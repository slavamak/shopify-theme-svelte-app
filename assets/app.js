var Rt=Array.isArray,rn=Array.from,ln=Object.defineProperty,H=Object.getOwnPropertyDescriptor,un=Object.getOwnPropertyDescriptors,on=Object.prototype,fn=Array.prototype,Ft=Object.getPrototypeOf;function sn(t){return t()}function xt(t){for(var n=0;n<t.length;n++)t[n]()}const T=2,It=4,lt=8,ht=16,N=32,ut=64,at=128,P=256,tt=512,E=1024,A=2048,z=4096,nt=8192,Y=16384,an=32768,cn=65536,_n=1<<19,Pt=1<<20,K=Symbol("$state");function jt(t){return t===this.v}function vn(t){throw new Error("https://svelte.dev/e/effect_in_teardown")}function dn(){throw new Error("https://svelte.dev/e/effect_in_unowned_derived")}function hn(t){throw new Error("https://svelte.dev/e/effect_orphan")}function pn(){throw new Error("https://svelte.dev/e/effect_update_depth_exceeded")}function gn(){throw new Error("https://svelte.dev/e/state_descriptors_fixed")}function wn(){throw new Error("https://svelte.dev/e/state_prototype_fixed")}function yn(){throw new Error("https://svelte.dev/e/state_unsafe_local_read")}function mn(){throw new Error("https://svelte.dev/e/state_unsafe_mutation")}let pt=!1;function En(){pt=!0}const bn=2,y=Symbol();function x(t,n){var e={f:0,v:t,reactions:null,equals:jt,version:0};return e}function k(t,n){return h!==null&&Et()&&h.f&(T|ht)&&(F===null||!F.includes(t))&&mn(),xn(t,n)}function xn(t,n){return t.equals(n)||(t.v=n,t.version=Jt(),Mt(t,A),Et()&&d!==null&&d.f&E&&!(d.f&N)&&(w!==null&&w.includes(t)?(S(d,A),ft(d)):D===null?qn([t]):D.push(t))),n}function Mt(t,n){var e=t.reactions;if(e!==null)for(var r=Et(),l=e.length,u=0;u<l;u++){var f=e[u],_=f.f;_&A||!r&&f===d||(S(f,n),_&(E|P)&&(_&T?Mt(f,z):ft(f)))}}function V(t,n=null,e){if(typeof t!="object"||t===null||K in t)return t;const r=Ft(t);if(r!==on&&r!==fn)return t;var l=new Map,u=Rt(t),f=x(0);u&&l.set("length",x(t.length));var _;return new Proxy(t,{defineProperty(a,i,o){(!("value"in o)||o.configurable===!1||o.enumerable===!1||o.writable===!1)&&gn();var s=l.get(i);return s===void 0?(s=x(o.value),l.set(i,s)):k(s,V(o.value,_)),!0},deleteProperty(a,i){var o=l.get(i);if(o===void 0)i in a&&l.set(i,x(y));else{if(u&&typeof i=="string"){var s=l.get("length"),c=Number(i);Number.isInteger(c)&&c<s.v&&k(s,c)}k(o,y),Tt(f)}return!0},get(a,i,o){var p;if(i===K)return t;var s=l.get(i),c=i in a;if(s===void 0&&(!c||(p=H(a,i))!=null&&p.writable)&&(s=x(V(c?a[i]:y,_)),l.set(i,s)),s!==void 0){var v=O(s);return v===y?void 0:v}return Reflect.get(a,i,o)},getOwnPropertyDescriptor(a,i){var o=Reflect.getOwnPropertyDescriptor(a,i);if(o&&"value"in o){var s=l.get(i);s&&(o.value=O(s))}else if(o===void 0){var c=l.get(i),v=c==null?void 0:c.v;if(c!==void 0&&v!==y)return{enumerable:!0,configurable:!0,value:v,writable:!0}}return o},has(a,i){var v;if(i===K)return!0;var o=l.get(i),s=o!==void 0&&o.v!==y||Reflect.has(a,i);if(o!==void 0||d!==null&&(!s||(v=H(a,i))!=null&&v.writable)){o===void 0&&(o=x(s?V(a[i],_):y),l.set(i,o));var c=O(o);if(c===y)return!1}return s},set(a,i,o,s){var C;var c=l.get(i),v=i in a;if(u&&i==="length")for(var p=o;p<c.v;p+=1){var b=l.get(p+"");b!==void 0?k(b,y):p in a&&(b=x(y),l.set(p+"",b))}c===void 0?(!v||(C=H(a,i))!=null&&C.writable)&&(c=x(void 0),k(c,V(o,_)),l.set(i,c)):(v=c.v!==y,k(c,V(o,_)));var j=Reflect.getOwnPropertyDescriptor(a,i);if(j!=null&&j.set&&j.set.call(s,o),!v){if(u&&typeof i=="string"){var J=l.get("length"),M=Number(i);Number.isInteger(M)&&M>=J.v&&k(J,M+1)}Tt(f)}return!0},ownKeys(a){O(f);var i=Reflect.ownKeys(a).filter(c=>{var v=l.get(c);return v===void 0||v.v!==y});for(var[o,s]of l)s.v!==y&&!(o in a)&&i.push(o);return i},setPrototypeOf(){wn()}})}function Tt(t,n=1){k(t,t.v+n)}var kt,Lt,qt;function Tn(){if(kt===void 0){kt=window;var t=Element.prototype,n=Node.prototype;Lt=H(n,"firstChild").get,qt=H(n,"nextSibling").get,t.__click=void 0,t.__className="",t.__attributes=null,t.__styles=null,t.__e=void 0,Text.prototype.__t=void 0}}function kn(t=""){return document.createTextNode(t)}function gt(t){return Lt.call(t)}function wt(t){return qt.call(t)}function Nt(t,n){return gt(t)}function Nn(t,n){{var e=gt(t);return e instanceof Comment&&e.data===""?wt(e):e}}function st(t,n=1,e=!1){let r=t;for(;n--;)r=wt(r);return r}function Sn(t){var n=T|A;d===null?n|=P:d.f|=Pt;var e=h!==null&&h.f&T?h:null;const r={children:null,ctx:g,deps:null,equals:jt,f:n,fn:t,reactions:null,v:null,version:0,parent:e??d};return e!==null&&(e.children??(e.children=[])).push(r),r}function Vt(t){var n=t.children;if(n!==null){t.children=null;for(var e=0;e<n.length;e+=1){var r=n[e];r.f&T?yt(r):I(r)}}}function On(t){for(var n=t.parent;n!==null;){if(!(n.f&T))return n;n=n.parent}return null}function Bt(t){var n,e=d;U(On(t));try{Vt(t),n=Qt(t)}finally{U(e)}return n}function $t(t){var n=Bt(t),e=(R||t.f&P)&&t.deps!==null?z:E;S(t,e),t.equals(n)||(t.v=n,t.version=Jt())}function yt(t){Vt(t),Z(t,0),S(t,Y),t.v=t.children=t.deps=t.ctx=t.reactions=null}function Ut(t){d===null&&h===null&&hn(),h!==null&&h.f&P&&dn(),mt&&vn()}function Dn(t,n){var e=n.last;e===null?n.last=n.first=t:(e.next=t,t.prev=e,n.last=t)}function G(t,n,e,r=!0){var l=(t&ut)!==0,u=d,f={ctx:g,deps:null,deriveds:null,nodes_start:null,nodes_end:null,f:t|A,first:null,fn:n,last:null,next:null,parent:l?null:u,prev:null,teardown:null,transitions:null,version:0};if(e){var _=B;try{Ot(!0),bt(f),f.f|=an}catch(o){throw I(f),o}finally{Ot(_)}}else n!==null&&ft(f);var a=e&&f.deps===null&&f.first===null&&f.nodes_start===null&&f.teardown===null&&(f.f&Pt)===0;if(!a&&!l&&r&&(u!==null&&Dn(f,u),h!==null&&h.f&T)){var i=h;(i.children??(i.children=[])).push(f)}return f}function St(t){Ut();var n=d!==null&&(d.f&N)!==0&&g!==null&&!g.m;if(n){var e=g;(e.e??(e.e=[])).push({fn:t,effect:d,reaction:h})}else{var r=Yt(t);return r}}function An(t){return Ut(),Rn(t)}function Cn(t){const n=G(ut,t,!0);return(e={})=>new Promise(r=>{e.outro?Mn(n,()=>{I(n),r(void 0)}):(I(n),r(void 0))})}function Yt(t){return G(It,t,!1)}function Rn(t){return G(lt,t,!0)}function Fn(t){return In(t)}function In(t,n=0){return G(lt|ht|n,t,!0)}function Pn(t,n=!0){return G(lt|N,t,!0,n)}function Ht(t){var n=t.teardown;if(n!==null){const e=mt,r=h;Dt(!0),$(null);try{n.call(null)}finally{Dt(e),$(r)}}}function Kt(t){var n=t.deriveds;if(n!==null){t.deriveds=null;for(var e=0;e<n.length;e+=1)yt(n[e])}}function Wt(t,n=!1){var e=t.first;for(t.first=t.last=null;e!==null;){var r=e.next;I(e,n),e=r}}function jn(t){for(var n=t.first;n!==null;){var e=n.next;n.f&N||I(n),n=e}}function I(t,n=!0){var e=!1;if((n||t.f&_n)&&t.nodes_start!==null){for(var r=t.nodes_start,l=t.nodes_end;r!==null;){var u=r===l?null:wt(r);r.remove(),r=u}e=!0}Wt(t,n&&!e),Kt(t),Z(t,0),S(t,Y);var f=t.transitions;if(f!==null)for(const a of f)a.stop();Ht(t);var _=t.parent;_!==null&&_.first!==null&&Zt(t),t.next=t.prev=t.teardown=t.ctx=t.deps=t.fn=t.nodes_start=t.nodes_end=null}function Zt(t){var n=t.parent,e=t.prev,r=t.next;e!==null&&(e.next=r),r!==null&&(r.prev=e),n!==null&&(n.first===t&&(n.first=r),n.last===t&&(n.last=e))}function Mn(t,n){var e=[];zt(t,e,!0),Ln(e,()=>{I(t),n()})}function Ln(t,n){var e=t.length;if(e>0){var r=()=>--e||n();for(var l of t)l.out(r)}else n()}function zt(t,n,e){if(!(t.f&nt)){if(t.f^=nt,t.transitions!==null)for(const f of t.transitions)(f.is_global||e)&&n.push(f);for(var r=t.first;r!==null;){var l=r.next,u=(r.f&cn)!==0||(r.f&N)!==0;zt(r,n,u?e:!1),r=l}}}let X=!1,et=!1,rt=null,B=!1,mt=!1;function Ot(t){B=t}function Dt(t){mt=t}let ct=[],W=0;let h=null;function $(t){h=t}let d=null;function U(t){d=t}let F=null,w=null,m=0,D=null;function qn(t){D=t}let Gt=1,R=!1,g=null;function Jt(){return++Gt}function Et(){return!pt||g!==null&&g.l===null}function it(t){var f,_;var n=t.f;if(n&A)return!0;if(n&z){var e=t.deps,r=(n&P)!==0;if(e!==null){var l;if(n&tt){for(l=0;l<e.length;l++)((f=e[l]).reactions??(f.reactions=[])).push(t);t.f^=tt}for(l=0;l<e.length;l++){var u=e[l];if(it(u)&&$t(u),r&&d!==null&&!R&&!((_=u==null?void 0:u.reactions)!=null&&_.includes(t))&&(u.reactions??(u.reactions=[])).push(t),u.version>t.version)return!0}}(!r||d!==null&&!R)&&S(t,E)}return!1}function Vn(t,n){for(var e=n;e!==null;){if(e.f&at)try{e.fn(t);return}catch{e.f^=at}e=e.parent}throw X=!1,t}function Bn(t){return(t.f&Y)===0&&(t.parent===null||(t.parent.f&at)===0)}function ot(t,n,e,r){if(X){if(e===null&&(X=!1),Bn(n))throw t;return}e!==null&&(X=!0);{Vn(t,n);return}}function Qt(t){var c;var n=w,e=m,r=D,l=h,u=R,f=F,_=g,a=t.f;w=null,m=0,D=null,h=a&(N|ut)?null:t,R=!B&&(a&P)!==0,F=null,g=t.ctx;try{var i=(0,t.fn)(),o=t.deps;if(w!==null){var s;if(Z(t,m),o!==null&&m>0)for(o.length=m+w.length,s=0;s<w.length;s++)o[m+s]=w[s];else t.deps=o=w;if(!R)for(s=m;s<o.length;s++)((c=o[s]).reactions??(c.reactions=[])).push(t)}else o!==null&&m<o.length&&(Z(t,m),o.length=m);return i}finally{w=n,m=e,D=r,h=l,R=u,F=f,g=_}}function $n(t,n){let e=n.reactions;if(e!==null){var r=e.indexOf(t);if(r!==-1){var l=e.length-1;l===0?e=n.reactions=null:(e[r]=e[l],e.pop())}}e===null&&n.f&T&&(w===null||!w.includes(n))&&(S(n,z),n.f&(P|tt)||(n.f^=tt),Z(n,0))}function Z(t,n){var e=t.deps;if(e!==null)for(var r=n;r<e.length;r++)$n(t,e[r])}function bt(t){var n=t.f;if(!(n&Y)){S(t,E);var e=d,r=g;d=t;try{n&ht?jn(t):Wt(t),Kt(t),Ht(t);var l=Qt(t);t.teardown=typeof l=="function"?l:null,t.version=Gt}catch(u){ot(u,t,e,r||t.ctx)}finally{d=e}}}function Un(){if(W>1e3){W=0;try{pn()}catch(t){if(rt!==null)ot(t,rt,null);else throw t}}W++}function Yn(t){var n=t.length;if(n!==0){Un();var e=B;B=!0;try{for(var r=0;r<n;r++){var l=t[r];l.f&E||(l.f^=E);var u=[];Xt(l,u),Hn(u)}}finally{B=e}}}function Hn(t){var n=t.length;if(n!==0)for(var e=0;e<n;e++){var r=t[e];if(!(r.f&(Y|nt)))try{it(r)&&(bt(r),r.deps===null&&r.first===null&&r.nodes_start===null&&(r.teardown===null?Zt(r):r.fn=null))}catch(l){ot(l,r,null,r.ctx)}}}function Kn(){if(et=!1,W>1001)return;const t=ct;ct=[],Yn(t),et||(W=0,rt=null)}function ft(t){et||(et=!0,queueMicrotask(Kn)),rt=t;for(var n=t;n.parent!==null;){n=n.parent;var e=n.f;if(e&(ut|N)){if(!(e&E))return;n.f^=E}}ct.push(n)}function Xt(t,n){var e=t.first,r=[];t:for(;e!==null;){var l=e.f,u=(l&N)!==0,f=u&&(l&E)!==0,_=e.next;if(!f&&!(l&nt))if(l&lt){if(u)e.f^=E;else try{it(e)&&bt(e)}catch(s){ot(s,e,null,e.ctx)}var a=e.first;if(a!==null){e=a;continue}}else l&It&&r.push(e);if(_===null){let s=e.parent;for(;s!==null;){if(t===s)break t;var i=s.next;if(i!==null){e=i;continue t}s=s.parent}}e=_}for(var o=0;o<r.length;o++)a=r[o],n.push(a),Xt(a,n)}function O(t){var o;var n=t.f,e=(n&T)!==0;if(e&&n&Y){var r=Bt(t);return yt(t),r}if(h!==null){F!==null&&F.includes(t)&&yn();var l=h.deps;w===null&&l!==null&&l[m]===t?m++:w===null?w=[t]:w.push(t),D!==null&&d!==null&&d.f&E&&!(d.f&N)&&D.includes(t)&&(S(d,A),ft(d))}else if(e&&t.deps===null)for(var u=t,f=u.parent,_=u;f!==null;)if(f.f&T){var a=f;_=a,f=a.parent}else{var i=f;(o=i.deriveds)!=null&&o.includes(_)||(i.deriveds??(i.deriveds=[])).push(_);break}return e&&(u=t,it(u)&&$t(u)),t.v}function Wn(t){const n=h;try{return h=null,t()}finally{h=n}}const Zn=~(A|z|E);function S(t,n){t.f=t.f&Zn|n}function tn(t,n=!1,e){g={p:g,c:null,e:null,m:!1,s:t,x:null,l:null},pt&&!n&&(g.l={s:null,u:null,r1:[],r2:x(!1)})}function nn(t){const n=g;if(n!==null){const f=n.e;if(f!==null){var e=d,r=h;n.e=null;try{for(var l=0;l<f.length;l++){var u=f[l];U(u.effect),$(u.reaction),Yt(u.fn)}}finally{U(e),$(r)}}g=n.p,n.m=!0}return{}}function zn(t){if(!(typeof t!="object"||!t||t instanceof EventTarget)){if(K in t)_t(t);else if(!Array.isArray(t))for(let n in t){const e=t[n];typeof e=="object"&&e&&K in e&&_t(e)}}}function _t(t,n=new Set){if(typeof t=="object"&&t!==null&&!(t instanceof EventTarget)&&!n.has(t)){n.add(t),t instanceof Date&&t.getTime();for(let r in t)try{_t(t[r],n)}catch{}const e=Ft(t);if(e!==Object.prototype&&e!==Array.prototype&&e!==Map.prototype&&e!==Set.prototype&&e!==Date.prototype){const r=un(e);for(let l in r){const u=r[l].get;if(u)try{u.call(t)}catch{}}}}}const Gn=["touchstart","touchmove"];function Jn(t){return Gn.includes(t)}const en=new Set,vt=new Set;function Qn(t){for(var n=0;n<t.length;n++)en.add(t[n]);for(var e of vt)e(t)}function Q(t){var M;var n=this,e=n.ownerDocument,r=t.type,l=((M=t.composedPath)==null?void 0:M.call(t))||[],u=l[0]||t.target,f=0,_=t.__root;if(_){var a=l.indexOf(_);if(a!==-1&&(n===document||n===window)){t.__root=n;return}var i=l.indexOf(n);if(i===-1)return;a<=i&&(f=a)}if(u=l[f]||t.target,u!==n){ln(t,"currentTarget",{configurable:!0,get(){return u||e}});var o=h,s=d;$(null),U(null);try{for(var c,v=[];u!==null;){var p=u.assignedSlot||u.parentNode||u.host||null;try{var b=u["__"+r];if(b!==void 0&&!u.disabled)if(Rt(b)){var[j,...J]=b;j.apply(u,[t,...J])}else b.call(u,t)}catch(C){c?v.push(C):c=C}if(t.cancelBubble||p===n||p===null)break;u=p}if(c){for(let C of v)queueMicrotask(()=>{throw C});throw c}}finally{t.__root=n,delete t.currentTarget,$(o),U(s)}}}function Xn(t){var n=document.createElement("template");return n.innerHTML=t,n.content}function te(t,n){var e=d;e.nodes_start===null&&(e.nodes_start=t,e.nodes_end=n)}function ne(t,n){var e=(n&bn)!==0,r,l=!t.startsWith("<!>");return()=>{r===void 0&&(r=Xn(l?t:"<!>"+t));var u=e?document.importNode(r,!0):r.cloneNode(!0);{var f=gt(u),_=u.lastChild;te(f,_)}return u}}function ee(t,n){t!==null&&t.before(n)}function At(t,n){var e=n==null?"":typeof n=="object"?n+"":n;e!==(t.__t??(t.__t=t.nodeValue))&&(t.__t=e,t.nodeValue=e==null?"":e+"")}function re(t,n){return le(t,n)}const L=new Map;function le(t,{target:n,anchor:e,props:r={},events:l,context:u,intro:f=!0}){Tn();var _=new Set,a=s=>{for(var c=0;c<s.length;c++){var v=s[c];if(!_.has(v)){_.add(v);var p=Jn(v);n.addEventListener(v,Q,{passive:p});var b=L.get(v);b===void 0?(document.addEventListener(v,Q,{passive:p}),L.set(v,1)):L.set(v,b+1)}}};a(rn(en)),vt.add(a);var i=void 0,o=Cn(()=>{var s=e??n.appendChild(kn());return Pn(()=>{if(u){tn({});var c=g;c.c=u}l&&(r.$$events=l),i=t(s,r)||{},u&&nn()}),()=>{var p;for(var c of _){n.removeEventListener(c,Q);var v=L.get(c);--v===0?(document.removeEventListener(c,Q),L.delete(c)):L.set(c,v)}vt.delete(a),s!==e&&((p=s.parentNode)==null||p.removeChild(s))}});return ue.set(i,o),i}let ue=new WeakMap;function ie(t=!1){const n=g,e=n.l.u;if(!e)return;let r=()=>zn(n.s);if(t){let l=0,u={};const f=Sn(()=>{let _=!1;const a=n.s;for(const i in a)a[i]!==u[i]&&(u[i]=a[i],_=!0);return _&&l++,l});r=()=>O(f)}e.b.length&&An(()=>{Ct(n,r),xt(e.b)}),St(()=>{const l=Wn(()=>e.m.map(sn));return()=>{for(const u of l)typeof u=="function"&&u()}}),e.a.length&&St(()=>{Ct(n,r),xt(e.a)})}function Ct(t,n){if(t.l.s)for(const e of t.l.s)O(e);n()}function oe(t){var n=x(0);return function(){return arguments.length===1?(k(n,O(n)+1),arguments[0]):(O(n),t())}}const fe="5";typeof window<"u"&&(window.__svelte||(window.__svelte={v:new Set})).v.add(fe);En();const se=V({count:0,customer:{name:null}});var q=oe(()=>se),ae=ne('<button class="svelte-103p3id">Set customer name</button> <button class="svelte-103p3id">Increment count</button> <div> </div> <div> </div>',1);function ce(t,n){tn(n,!1);function e(){q(q().customer.name="Svelte")}function r(){q(q().count+=1)}ie();var l=ae(),u=Nn(l);u.__click=e;var f=st(u,2);f.__click=r;var _=st(f,2),a=Nt(_),i=st(_,2),o=Nt(i);Fn(()=>{At(a,`Customer name: ${q().customer.name??""}`),At(o,`Count: ${q().count??""}`)}),ee(t,l),nn()}Qn(["click"]);const dt=document.getElementById("app");if(!dt)throw new Error("Target element not found.");re(ce,{target:dt,props:{...dt.dataset}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmpzIiwic291cmNlcyI6WyIuLi9ub2RlX21vZHVsZXMvLnBucG0vc3ZlbHRlQDUuMTYuMC9ub2RlX21vZHVsZXMvc3ZlbHRlL3NyYy9pbnRlcm5hbC9zaGFyZWQvdXRpbHMuanMiLCIuLi9ub2RlX21vZHVsZXMvLnBucG0vc3ZlbHRlQDUuMTYuMC9ub2RlX21vZHVsZXMvc3ZlbHRlL3NyYy9pbnRlcm5hbC9jbGllbnQvY29uc3RhbnRzLmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3N2ZWx0ZUA1LjE2LjAvbm9kZV9tb2R1bGVzL3N2ZWx0ZS9zcmMvaW50ZXJuYWwvY2xpZW50L3JlYWN0aXZpdHkvZXF1YWxpdHkuanMiLCIuLi9ub2RlX21vZHVsZXMvLnBucG0vc3ZlbHRlQDUuMTYuMC9ub2RlX21vZHVsZXMvc3ZlbHRlL3NyYy9pbnRlcm5hbC9jbGllbnQvZXJyb3JzLmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3N2ZWx0ZUA1LjE2LjAvbm9kZV9tb2R1bGVzL3N2ZWx0ZS9zcmMvaW50ZXJuYWwvZmxhZ3MvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvLnBucG0vc3ZlbHRlQDUuMTYuMC9ub2RlX21vZHVsZXMvc3ZlbHRlL3NyYy9jb25zdGFudHMuanMiLCIuLi9ub2RlX21vZHVsZXMvLnBucG0vc3ZlbHRlQDUuMTYuMC9ub2RlX21vZHVsZXMvc3ZlbHRlL3NyYy9pbnRlcm5hbC9jbGllbnQvcmVhY3Rpdml0eS9zb3VyY2VzLmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3N2ZWx0ZUA1LjE2LjAvbm9kZV9tb2R1bGVzL3N2ZWx0ZS9zcmMvaW50ZXJuYWwvY2xpZW50L3Byb3h5LmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2VzbS1lbnZAMS4yLjEvbm9kZV9tb2R1bGVzL2VzbS1lbnYvZmFsc2UuanMiLCIuLi9ub2RlX21vZHVsZXMvLnBucG0vc3ZlbHRlQDUuMTYuMC9ub2RlX21vZHVsZXMvc3ZlbHRlL3NyYy9pbnRlcm5hbC9jbGllbnQvZG9tL29wZXJhdGlvbnMuanMiLCIuLi9ub2RlX21vZHVsZXMvLnBucG0vc3ZlbHRlQDUuMTYuMC9ub2RlX21vZHVsZXMvc3ZlbHRlL3NyYy9pbnRlcm5hbC9jbGllbnQvcmVhY3Rpdml0eS9kZXJpdmVkcy5qcyIsIi4uL25vZGVfbW9kdWxlcy8ucG5wbS9zdmVsdGVANS4xNi4wL25vZGVfbW9kdWxlcy9zdmVsdGUvc3JjL2ludGVybmFsL2NsaWVudC9yZWFjdGl2aXR5L2VmZmVjdHMuanMiLCIuLi9ub2RlX21vZHVsZXMvLnBucG0vc3ZlbHRlQDUuMTYuMC9ub2RlX21vZHVsZXMvc3ZlbHRlL3NyYy9pbnRlcm5hbC9jbGllbnQvcnVudGltZS5qcyIsIi4uL25vZGVfbW9kdWxlcy8ucG5wbS9zdmVsdGVANS4xNi4wL25vZGVfbW9kdWxlcy9zdmVsdGUvc3JjL3V0aWxzLmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3N2ZWx0ZUA1LjE2LjAvbm9kZV9tb2R1bGVzL3N2ZWx0ZS9zcmMvaW50ZXJuYWwvY2xpZW50L2RvbS9lbGVtZW50cy9ldmVudHMuanMiLCIuLi9ub2RlX21vZHVsZXMvLnBucG0vc3ZlbHRlQDUuMTYuMC9ub2RlX21vZHVsZXMvc3ZlbHRlL3NyYy9pbnRlcm5hbC9jbGllbnQvZG9tL3JlY29uY2lsZXIuanMiLCIuLi9ub2RlX21vZHVsZXMvLnBucG0vc3ZlbHRlQDUuMTYuMC9ub2RlX21vZHVsZXMvc3ZlbHRlL3NyYy9pbnRlcm5hbC9jbGllbnQvZG9tL3RlbXBsYXRlLmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3N2ZWx0ZUA1LjE2LjAvbm9kZV9tb2R1bGVzL3N2ZWx0ZS9zcmMvaW50ZXJuYWwvY2xpZW50L3JlbmRlci5qcyIsIi4uL25vZGVfbW9kdWxlcy8ucG5wbS9zdmVsdGVANS4xNi4wL25vZGVfbW9kdWxlcy9zdmVsdGUvc3JjL2ludGVybmFsL2NsaWVudC9kb20vbGVnYWN5L2xpZmVjeWNsZS5qcyIsIi4uL25vZGVfbW9kdWxlcy8ucG5wbS9zdmVsdGVANS4xNi4wL25vZGVfbW9kdWxlcy9zdmVsdGUvc3JjL2ludGVybmFsL2NsaWVudC9kb20vbGVnYWN5L21pc2MuanMiLCIuLi9ub2RlX21vZHVsZXMvLnBucG0vc3ZlbHRlQDUuMTYuMC9ub2RlX21vZHVsZXMvc3ZlbHRlL3NyYy92ZXJzaW9uLmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3N2ZWx0ZUA1LjE2LjAvbm9kZV9tb2R1bGVzL3N2ZWx0ZS9zcmMvaW50ZXJuYWwvZGlzY2xvc2UtdmVyc2lvbi5qcyIsIi4uL25vZGVfbW9kdWxlcy8ucG5wbS9zdmVsdGVANS4xNi4wL25vZGVfbW9kdWxlcy9zdmVsdGUvc3JjL2ludGVybmFsL2ZsYWdzL2xlZ2FjeS5qcyIsIi4uL2Zyb250ZW5kL3N0YXRlLnN2ZWx0ZS50cyIsIi4uL2Zyb250ZW5kL0FwcC5zdmVsdGUiLCIuLi9mcm9udGVuZC9tYWluLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFN0b3JlIHRoZSByZWZlcmVuY2VzIHRvIGdsb2JhbHMgaW4gY2FzZSBzb21lb25lIHRyaWVzIHRvIG1vbmtleSBwYXRjaCB0aGVzZSwgY2F1c2luZyB0aGUgYmVsb3dcbi8vIHRvIGRlLW9wdCAodGhpcyBvY2N1cnMgb2Z0ZW4gd2hlbiB1c2luZyBwb3B1bGFyIGV4dGVuc2lvbnMpLlxuZXhwb3J0IHZhciBpc19hcnJheSA9IEFycmF5LmlzQXJyYXk7XG5leHBvcnQgdmFyIGFycmF5X2Zyb20gPSBBcnJheS5mcm9tO1xuZXhwb3J0IHZhciBvYmplY3Rfa2V5cyA9IE9iamVjdC5rZXlzO1xuZXhwb3J0IHZhciBkZWZpbmVfcHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5leHBvcnQgdmFyIGdldF9kZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbmV4cG9ydCB2YXIgZ2V0X2Rlc2NyaXB0b3JzID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnM7XG5leHBvcnQgdmFyIG9iamVjdF9wcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xuZXhwb3J0IHZhciBhcnJheV9wcm90b3R5cGUgPSBBcnJheS5wcm90b3R5cGU7XG5leHBvcnQgdmFyIGdldF9wcm90b3R5cGVfb2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG5cbi8qKlxuICogQHBhcmFtIHthbnl9IHRoaW5nXG4gKiBAcmV0dXJucyB7dGhpbmcgaXMgRnVuY3Rpb259XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc19mdW5jdGlvbih0aGluZykge1xuXHRyZXR1cm4gdHlwZW9mIHRoaW5nID09PSAnZnVuY3Rpb24nO1xufVxuXG5leHBvcnQgY29uc3Qgbm9vcCA9ICgpID0+IHt9O1xuXG4vLyBBZGFwdGVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL3RoZW4vaXMtcHJvbWlzZS9ibG9iL21hc3Rlci9pbmRleC5qc1xuLy8gRGlzdHJpYnV0ZWQgdW5kZXIgTUlUIExpY2Vuc2UgaHR0cHM6Ly9naXRodWIuY29tL3RoZW4vaXMtcHJvbWlzZS9ibG9iL21hc3Rlci9MSUNFTlNFXG5cbi8qKlxuICogQHRlbXBsYXRlIFtUPWFueV1cbiAqIEBwYXJhbSB7YW55fSB2YWx1ZVxuICogQHJldHVybnMge3ZhbHVlIGlzIFByb21pc2VMaWtlPFQ+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNfcHJvbWlzZSh2YWx1ZSkge1xuXHRyZXR1cm4gdHlwZW9mIHZhbHVlPy50aGVuID09PSAnZnVuY3Rpb24nO1xufVxuXG4vKiogQHBhcmFtIHtGdW5jdGlvbn0gZm4gKi9cbmV4cG9ydCBmdW5jdGlvbiBydW4oZm4pIHtcblx0cmV0dXJuIGZuKCk7XG59XG5cbi8qKiBAcGFyYW0ge0FycmF5PCgpID0+IHZvaWQ+fSBhcnIgKi9cbmV4cG9ydCBmdW5jdGlvbiBydW5fYWxsKGFycikge1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuXHRcdGFycltpXSgpO1xuXHR9XG59XG5cbi8qKlxuICogVE9ETyByZXBsYWNlIHdpdGggUHJvbWlzZS53aXRoUmVzb2x2ZXJzIG9uY2Ugc3VwcG9ydGVkIHdpZGVseSBlbm91Z2hcbiAqIEB0ZW1wbGF0ZSBUXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWZlcnJlZCgpIHtcblx0LyoqIEB0eXBlIHsodmFsdWU6IFQpID0+IHZvaWR9ICovXG5cdHZhciByZXNvbHZlO1xuXG5cdC8qKiBAdHlwZSB7KHJlYXNvbjogYW55KSA9PiB2b2lkfSAqL1xuXHR2YXIgcmVqZWN0O1xuXG5cdC8qKiBAdHlwZSB7UHJvbWlzZTxUPn0gKi9cblx0dmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzLCByZWopID0+IHtcblx0XHRyZXNvbHZlID0gcmVzO1xuXHRcdHJlamVjdCA9IHJlajtcblx0fSk7XG5cblx0Ly8gQHRzLWV4cGVjdC1lcnJvclxuXHRyZXR1cm4geyBwcm9taXNlLCByZXNvbHZlLCByZWplY3QgfTtcbn1cblxuLyoqXG4gKiBAdGVtcGxhdGUgVlxuICogQHBhcmFtIHtWfSB2YWx1ZVxuICogQHBhcmFtIHtWIHwgKCgpID0+IFYpfSBmYWxsYmFja1xuICogQHBhcmFtIHtib29sZWFufSBbbGF6eV1cbiAqIEByZXR1cm5zIHtWfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZmFsbGJhY2sodmFsdWUsIGZhbGxiYWNrLCBsYXp5ID0gZmFsc2UpIHtcblx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWRcblx0XHQ/IGxhenlcblx0XHRcdD8gLyoqIEB0eXBlIHsoKSA9PiBWfSAqLyAoZmFsbGJhY2spKClcblx0XHRcdDogLyoqIEB0eXBlIHtWfSAqLyAoZmFsbGJhY2spXG5cdFx0OiB2YWx1ZTtcbn1cbiIsImV4cG9ydCBjb25zdCBERVJJVkVEID0gMSA8PCAxO1xuZXhwb3J0IGNvbnN0IEVGRkVDVCA9IDEgPDwgMjtcbmV4cG9ydCBjb25zdCBSRU5ERVJfRUZGRUNUID0gMSA8PCAzO1xuZXhwb3J0IGNvbnN0IEJMT0NLX0VGRkVDVCA9IDEgPDwgNDtcbmV4cG9ydCBjb25zdCBCUkFOQ0hfRUZGRUNUID0gMSA8PCA1O1xuZXhwb3J0IGNvbnN0IFJPT1RfRUZGRUNUID0gMSA8PCA2O1xuZXhwb3J0IGNvbnN0IEJPVU5EQVJZX0VGRkVDVCA9IDEgPDwgNztcbmV4cG9ydCBjb25zdCBVTk9XTkVEID0gMSA8PCA4O1xuZXhwb3J0IGNvbnN0IERJU0NPTk5FQ1RFRCA9IDEgPDwgOTtcbmV4cG9ydCBjb25zdCBDTEVBTiA9IDEgPDwgMTA7XG5leHBvcnQgY29uc3QgRElSVFkgPSAxIDw8IDExO1xuZXhwb3J0IGNvbnN0IE1BWUJFX0RJUlRZID0gMSA8PCAxMjtcbmV4cG9ydCBjb25zdCBJTkVSVCA9IDEgPDwgMTM7XG5leHBvcnQgY29uc3QgREVTVFJPWUVEID0gMSA8PCAxNDtcbmV4cG9ydCBjb25zdCBFRkZFQ1RfUkFOID0gMSA8PCAxNTtcbi8qKiAnVHJhbnNwYXJlbnQnIGVmZmVjdHMgZG8gbm90IGNyZWF0ZSBhIHRyYW5zaXRpb24gYm91bmRhcnkgKi9cbmV4cG9ydCBjb25zdCBFRkZFQ1RfVFJBTlNQQVJFTlQgPSAxIDw8IDE2O1xuLyoqIFN2ZWx0ZSA0IGxlZ2FjeSBtb2RlIHByb3BzIG5lZWQgdG8gYmUgaGFuZGxlZCB3aXRoIGRlcml2ZWRzIGFuZCBiZSByZWNvZ25pemVkIGVsc2V3aGVyZSwgaGVuY2UgdGhlIGRlZGljYXRlZCBmbGFnICovXG5leHBvcnQgY29uc3QgTEVHQUNZX0RFUklWRURfUFJPUCA9IDEgPDwgMTc7XG5leHBvcnQgY29uc3QgSU5TUEVDVF9FRkZFQ1QgPSAxIDw8IDE4O1xuZXhwb3J0IGNvbnN0IEhFQURfRUZGRUNUID0gMSA8PCAxOTtcbmV4cG9ydCBjb25zdCBFRkZFQ1RfSEFTX0RFUklWRUQgPSAxIDw8IDIwO1xuXG5leHBvcnQgY29uc3QgU1RBVEVfU1lNQk9MID0gU3ltYm9sKCckc3RhdGUnKTtcbmV4cG9ydCBjb25zdCBTVEFURV9TWU1CT0xfTUVUQURBVEEgPSBTeW1ib2woJyRzdGF0ZSBtZXRhZGF0YScpO1xuZXhwb3J0IGNvbnN0IExFR0FDWV9QUk9QUyA9IFN5bWJvbCgnbGVnYWN5IHByb3BzJyk7XG5leHBvcnQgY29uc3QgTE9BRElOR19BVFRSX1NZTUJPTCA9IFN5bWJvbCgnJyk7XG4iLCIvKiogQGltcG9ydCB7IEVxdWFscyB9IGZyb20gJyNjbGllbnQnICovXG4vKiogQHR5cGUge0VxdWFsc30gKi9cbmV4cG9ydCBmdW5jdGlvbiBlcXVhbHModmFsdWUpIHtcblx0cmV0dXJuIHZhbHVlID09PSB0aGlzLnY7XG59XG5cbi8qKlxuICogQHBhcmFtIHt1bmtub3dufSBhXG4gKiBAcGFyYW0ge3Vua25vd259IGJcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2FmZV9ub3RfZXF1YWwoYSwgYikge1xuXHRyZXR1cm4gYSAhPSBhXG5cdFx0PyBiID09IGJcblx0XHQ6IGEgIT09IGIgfHwgKGEgIT09IG51bGwgJiYgdHlwZW9mIGEgPT09ICdvYmplY3QnKSB8fCB0eXBlb2YgYSA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3Vua25vd259IGFcbiAqIEBwYXJhbSB7dW5rbm93bn0gYlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBub3RfZXF1YWwoYSwgYikge1xuXHRyZXR1cm4gYSAhPT0gYjtcbn1cblxuLyoqIEB0eXBlIHtFcXVhbHN9ICovXG5leHBvcnQgZnVuY3Rpb24gc2FmZV9lcXVhbHModmFsdWUpIHtcblx0cmV0dXJuICFzYWZlX25vdF9lcXVhbCh2YWx1ZSwgdGhpcy52KTtcbn1cbiIsIi8qIFRoaXMgZmlsZSBpcyBnZW5lcmF0ZWQgYnkgc2NyaXB0cy9wcm9jZXNzLW1lc3NhZ2VzL2luZGV4LmpzLiBEbyBub3QgZWRpdCEgKi9cblxuaW1wb3J0IHsgREVWIH0gZnJvbSAnZXNtLWVudic7XG5cbi8qKlxuICogVXNpbmcgYGJpbmQ6dmFsdWVgIHRvZ2V0aGVyIHdpdGggYSBjaGVja2JveCBpbnB1dCBpcyBub3QgYWxsb3dlZC4gVXNlIGBiaW5kOmNoZWNrZWRgIGluc3RlYWRcbiAqIEByZXR1cm5zIHtuZXZlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJpbmRfaW52YWxpZF9jaGVja2JveF92YWx1ZSgpIHtcblx0aWYgKERFVikge1xuXHRcdGNvbnN0IGVycm9yID0gbmV3IEVycm9yKGBiaW5kX2ludmFsaWRfY2hlY2tib3hfdmFsdWVcXG5Vc2luZyBcXGBiaW5kOnZhbHVlXFxgIHRvZ2V0aGVyIHdpdGggYSBjaGVja2JveCBpbnB1dCBpcyBub3QgYWxsb3dlZC4gVXNlIFxcYGJpbmQ6Y2hlY2tlZFxcYCBpbnN0ZWFkXFxuaHR0cHM6Ly9zdmVsdGUuZGV2L2UvYmluZF9pbnZhbGlkX2NoZWNrYm94X3ZhbHVlYCk7XG5cblx0XHRlcnJvci5uYW1lID0gJ1N2ZWx0ZSBlcnJvcic7XG5cdFx0dGhyb3cgZXJyb3I7XG5cdH0gZWxzZSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKGBodHRwczovL3N2ZWx0ZS5kZXYvZS9iaW5kX2ludmFsaWRfY2hlY2tib3hfdmFsdWVgKTtcblx0fVxufVxuXG4vKipcbiAqIENvbXBvbmVudCAlY29tcG9uZW50JSBoYXMgYW4gZXhwb3J0IG5hbWVkIGAla2V5JWAgdGhhdCBhIGNvbnN1bWVyIGNvbXBvbmVudCBpcyB0cnlpbmcgdG8gYWNjZXNzIHVzaW5nIGBiaW5kOiVrZXklYCwgd2hpY2ggaXMgZGlzYWxsb3dlZC4gSW5zdGVhZCwgdXNlIGBiaW5kOnRoaXNgIChlLmcuIGA8JW5hbWUlIGJpbmQ6dGhpcz17Y29tcG9uZW50fSAvPmApIGFuZCB0aGVuIGFjY2VzcyB0aGUgcHJvcGVydHkgb24gdGhlIGJvdW5kIGNvbXBvbmVudCBpbnN0YW5jZSAoZS5nLiBgY29tcG9uZW50LiVrZXklYClcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb21wb25lbnRcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXlcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKiBAcmV0dXJucyB7bmV2ZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBiaW5kX2ludmFsaWRfZXhwb3J0KGNvbXBvbmVudCwga2V5LCBuYW1lKSB7XG5cdGlmIChERVYpIHtcblx0XHRjb25zdCBlcnJvciA9IG5ldyBFcnJvcihgYmluZF9pbnZhbGlkX2V4cG9ydFxcbkNvbXBvbmVudCAke2NvbXBvbmVudH0gaGFzIGFuIGV4cG9ydCBuYW1lZCBcXGAke2tleX1cXGAgdGhhdCBhIGNvbnN1bWVyIGNvbXBvbmVudCBpcyB0cnlpbmcgdG8gYWNjZXNzIHVzaW5nIFxcYGJpbmQ6JHtrZXl9XFxgLCB3aGljaCBpcyBkaXNhbGxvd2VkLiBJbnN0ZWFkLCB1c2UgXFxgYmluZDp0aGlzXFxgIChlLmcuIFxcYDwke25hbWV9IGJpbmQ6dGhpcz17Y29tcG9uZW50fSAvPlxcYCkgYW5kIHRoZW4gYWNjZXNzIHRoZSBwcm9wZXJ0eSBvbiB0aGUgYm91bmQgY29tcG9uZW50IGluc3RhbmNlIChlLmcuIFxcYGNvbXBvbmVudC4ke2tleX1cXGApXFxuaHR0cHM6Ly9zdmVsdGUuZGV2L2UvYmluZF9pbnZhbGlkX2V4cG9ydGApO1xuXG5cdFx0ZXJyb3IubmFtZSA9ICdTdmVsdGUgZXJyb3InO1xuXHRcdHRocm93IGVycm9yO1xuXHR9IGVsc2Uge1xuXHRcdHRocm93IG5ldyBFcnJvcihgaHR0cHM6Ly9zdmVsdGUuZGV2L2UvYmluZF9pbnZhbGlkX2V4cG9ydGApO1xuXHR9XG59XG5cbi8qKlxuICogQSBjb21wb25lbnQgaXMgYXR0ZW1wdGluZyB0byBiaW5kIHRvIGEgbm9uLWJpbmRhYmxlIHByb3BlcnR5IGAla2V5JWAgYmVsb25naW5nIHRvICVjb21wb25lbnQlIChpLmUuIGA8JW5hbWUlIGJpbmQ6JWtleSU9ey4uLn0+YCkuIFRvIG1hcmsgYSBwcm9wZXJ0eSBhcyBiaW5kYWJsZTogYGxldCB7ICVrZXklID0gJGJpbmRhYmxlKCkgfSA9ICRwcm9wcygpYFxuICogQHBhcmFtIHtzdHJpbmd9IGtleVxuICogQHBhcmFtIHtzdHJpbmd9IGNvbXBvbmVudFxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAqIEByZXR1cm5zIHtuZXZlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJpbmRfbm90X2JpbmRhYmxlKGtleSwgY29tcG9uZW50LCBuYW1lKSB7XG5cdGlmIChERVYpIHtcblx0XHRjb25zdCBlcnJvciA9IG5ldyBFcnJvcihgYmluZF9ub3RfYmluZGFibGVcXG5BIGNvbXBvbmVudCBpcyBhdHRlbXB0aW5nIHRvIGJpbmQgdG8gYSBub24tYmluZGFibGUgcHJvcGVydHkgXFxgJHtrZXl9XFxgIGJlbG9uZ2luZyB0byAke2NvbXBvbmVudH0gKGkuZS4gXFxgPCR7bmFtZX0gYmluZDoke2tleX09ey4uLn0+XFxgKS4gVG8gbWFyayBhIHByb3BlcnR5IGFzIGJpbmRhYmxlOiBcXGBsZXQgeyAke2tleX0gPSAkYmluZGFibGUoKSB9ID0gJHByb3BzKClcXGBcXG5odHRwczovL3N2ZWx0ZS5kZXYvZS9iaW5kX25vdF9iaW5kYWJsZWApO1xuXG5cdFx0ZXJyb3IubmFtZSA9ICdTdmVsdGUgZXJyb3InO1xuXHRcdHRocm93IGVycm9yO1xuXHR9IGVsc2Uge1xuXHRcdHRocm93IG5ldyBFcnJvcihgaHR0cHM6Ly9zdmVsdGUuZGV2L2UvYmluZF9ub3RfYmluZGFibGVgKTtcblx0fVxufVxuXG4vKipcbiAqICVwYXJlbnQlIGNhbGxlZCBgJW1ldGhvZCVgIG9uIGFuIGluc3RhbmNlIG9mICVjb21wb25lbnQlLCB3aGljaCBpcyBubyBsb25nZXIgdmFsaWQgaW4gU3ZlbHRlIDVcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXJlbnRcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2RcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb21wb25lbnRcbiAqIEByZXR1cm5zIHtuZXZlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbXBvbmVudF9hcGlfY2hhbmdlZChwYXJlbnQsIG1ldGhvZCwgY29tcG9uZW50KSB7XG5cdGlmIChERVYpIHtcblx0XHRjb25zdCBlcnJvciA9IG5ldyBFcnJvcihgY29tcG9uZW50X2FwaV9jaGFuZ2VkXFxuJHtwYXJlbnR9IGNhbGxlZCBcXGAke21ldGhvZH1cXGAgb24gYW4gaW5zdGFuY2Ugb2YgJHtjb21wb25lbnR9LCB3aGljaCBpcyBubyBsb25nZXIgdmFsaWQgaW4gU3ZlbHRlIDVcXG5odHRwczovL3N2ZWx0ZS5kZXYvZS9jb21wb25lbnRfYXBpX2NoYW5nZWRgKTtcblxuXHRcdGVycm9yLm5hbWUgPSAnU3ZlbHRlIGVycm9yJztcblx0XHR0aHJvdyBlcnJvcjtcblx0fSBlbHNlIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoYGh0dHBzOi8vc3ZlbHRlLmRldi9lL2NvbXBvbmVudF9hcGlfY2hhbmdlZGApO1xuXHR9XG59XG5cbi8qKlxuICogQXR0ZW1wdGVkIHRvIGluc3RhbnRpYXRlICVjb21wb25lbnQlIHdpdGggYG5ldyAlbmFtZSVgLCB3aGljaCBpcyBubyBsb25nZXIgdmFsaWQgaW4gU3ZlbHRlIDUuIElmIHRoaXMgY29tcG9uZW50IGlzIG5vdCB1bmRlciB5b3VyIGNvbnRyb2wsIHNldCB0aGUgYGNvbXBhdGliaWxpdHkuY29tcG9uZW50QXBpYCBjb21waWxlciBvcHRpb24gdG8gYDRgIHRvIGtlZXAgaXQgd29ya2luZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjb21wb25lbnRcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKiBAcmV0dXJucyB7bmV2ZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb21wb25lbnRfYXBpX2ludmFsaWRfbmV3KGNvbXBvbmVudCwgbmFtZSkge1xuXHRpZiAoREVWKSB7XG5cdFx0Y29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoYGNvbXBvbmVudF9hcGlfaW52YWxpZF9uZXdcXG5BdHRlbXB0ZWQgdG8gaW5zdGFudGlhdGUgJHtjb21wb25lbnR9IHdpdGggXFxgbmV3ICR7bmFtZX1cXGAsIHdoaWNoIGlzIG5vIGxvbmdlciB2YWxpZCBpbiBTdmVsdGUgNS4gSWYgdGhpcyBjb21wb25lbnQgaXMgbm90IHVuZGVyIHlvdXIgY29udHJvbCwgc2V0IHRoZSBcXGBjb21wYXRpYmlsaXR5LmNvbXBvbmVudEFwaVxcYCBjb21waWxlciBvcHRpb24gdG8gXFxgNFxcYCB0byBrZWVwIGl0IHdvcmtpbmcuXFxuaHR0cHM6Ly9zdmVsdGUuZGV2L2UvY29tcG9uZW50X2FwaV9pbnZhbGlkX25ld2ApO1xuXG5cdFx0ZXJyb3IubmFtZSA9ICdTdmVsdGUgZXJyb3InO1xuXHRcdHRocm93IGVycm9yO1xuXHR9IGVsc2Uge1xuXHRcdHRocm93IG5ldyBFcnJvcihgaHR0cHM6Ly9zdmVsdGUuZGV2L2UvY29tcG9uZW50X2FwaV9pbnZhbGlkX25ld2ApO1xuXHR9XG59XG5cbi8qKlxuICogQSBkZXJpdmVkIHZhbHVlIGNhbm5vdCByZWZlcmVuY2UgaXRzZWxmIHJlY3Vyc2l2ZWx5XG4gKiBAcmV0dXJucyB7bmV2ZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZXJpdmVkX3JlZmVyZW5jZXNfc2VsZigpIHtcblx0aWYgKERFVikge1xuXHRcdGNvbnN0IGVycm9yID0gbmV3IEVycm9yKGBkZXJpdmVkX3JlZmVyZW5jZXNfc2VsZlxcbkEgZGVyaXZlZCB2YWx1ZSBjYW5ub3QgcmVmZXJlbmNlIGl0c2VsZiByZWN1cnNpdmVseVxcbmh0dHBzOi8vc3ZlbHRlLmRldi9lL2Rlcml2ZWRfcmVmZXJlbmNlc19zZWxmYCk7XG5cblx0XHRlcnJvci5uYW1lID0gJ1N2ZWx0ZSBlcnJvcic7XG5cdFx0dGhyb3cgZXJyb3I7XG5cdH0gZWxzZSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKGBodHRwczovL3N2ZWx0ZS5kZXYvZS9kZXJpdmVkX3JlZmVyZW5jZXNfc2VsZmApO1xuXHR9XG59XG5cbi8qKlxuICogS2V5ZWQgZWFjaCBibG9jayBoYXMgZHVwbGljYXRlIGtleSBgJXZhbHVlJWAgYXQgaW5kZXhlcyAlYSUgYW5kICViJVxuICogQHBhcmFtIHtzdHJpbmd9IGFcbiAqIEBwYXJhbSB7c3RyaW5nfSBiXG4gKiBAcGFyYW0ge3N0cmluZyB8IHVuZGVmaW5lZCB8IG51bGx9IFt2YWx1ZV1cbiAqIEByZXR1cm5zIHtuZXZlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVhY2hfa2V5X2R1cGxpY2F0ZShhLCBiLCB2YWx1ZSkge1xuXHRpZiAoREVWKSB7XG5cdFx0Y29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoYGVhY2hfa2V5X2R1cGxpY2F0ZVxcbiR7dmFsdWUgPyBgS2V5ZWQgZWFjaCBibG9jayBoYXMgZHVwbGljYXRlIGtleSBcXGAke3ZhbHVlfVxcYCBhdCBpbmRleGVzICR7YX0gYW5kICR7Yn1gIDogYEtleWVkIGVhY2ggYmxvY2sgaGFzIGR1cGxpY2F0ZSBrZXkgYXQgaW5kZXhlcyAke2F9IGFuZCAke2J9YH1cXG5odHRwczovL3N2ZWx0ZS5kZXYvZS9lYWNoX2tleV9kdXBsaWNhdGVgKTtcblxuXHRcdGVycm9yLm5hbWUgPSAnU3ZlbHRlIGVycm9yJztcblx0XHR0aHJvdyBlcnJvcjtcblx0fSBlbHNlIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoYGh0dHBzOi8vc3ZlbHRlLmRldi9lL2VhY2hfa2V5X2R1cGxpY2F0ZWApO1xuXHR9XG59XG5cbi8qKlxuICogYCVydW5lJWAgY2Fubm90IGJlIHVzZWQgaW5zaWRlIGFuIGVmZmVjdCBjbGVhbnVwIGZ1bmN0aW9uXG4gKiBAcGFyYW0ge3N0cmluZ30gcnVuZVxuICogQHJldHVybnMge25ldmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZWZmZWN0X2luX3RlYXJkb3duKHJ1bmUpIHtcblx0aWYgKERFVikge1xuXHRcdGNvbnN0IGVycm9yID0gbmV3IEVycm9yKGBlZmZlY3RfaW5fdGVhcmRvd25cXG5cXGAke3J1bmV9XFxgIGNhbm5vdCBiZSB1c2VkIGluc2lkZSBhbiBlZmZlY3QgY2xlYW51cCBmdW5jdGlvblxcbmh0dHBzOi8vc3ZlbHRlLmRldi9lL2VmZmVjdF9pbl90ZWFyZG93bmApO1xuXG5cdFx0ZXJyb3IubmFtZSA9ICdTdmVsdGUgZXJyb3InO1xuXHRcdHRocm93IGVycm9yO1xuXHR9IGVsc2Uge1xuXHRcdHRocm93IG5ldyBFcnJvcihgaHR0cHM6Ly9zdmVsdGUuZGV2L2UvZWZmZWN0X2luX3RlYXJkb3duYCk7XG5cdH1cbn1cblxuLyoqXG4gKiBFZmZlY3QgY2Fubm90IGJlIGNyZWF0ZWQgaW5zaWRlIGEgYCRkZXJpdmVkYCB2YWx1ZSB0aGF0IHdhcyBub3QgaXRzZWxmIGNyZWF0ZWQgaW5zaWRlIGFuIGVmZmVjdFxuICogQHJldHVybnMge25ldmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZWZmZWN0X2luX3Vub3duZWRfZGVyaXZlZCgpIHtcblx0aWYgKERFVikge1xuXHRcdGNvbnN0IGVycm9yID0gbmV3IEVycm9yKGBlZmZlY3RfaW5fdW5vd25lZF9kZXJpdmVkXFxuRWZmZWN0IGNhbm5vdCBiZSBjcmVhdGVkIGluc2lkZSBhIFxcYCRkZXJpdmVkXFxgIHZhbHVlIHRoYXQgd2FzIG5vdCBpdHNlbGYgY3JlYXRlZCBpbnNpZGUgYW4gZWZmZWN0XFxuaHR0cHM6Ly9zdmVsdGUuZGV2L2UvZWZmZWN0X2luX3Vub3duZWRfZGVyaXZlZGApO1xuXG5cdFx0ZXJyb3IubmFtZSA9ICdTdmVsdGUgZXJyb3InO1xuXHRcdHRocm93IGVycm9yO1xuXHR9IGVsc2Uge1xuXHRcdHRocm93IG5ldyBFcnJvcihgaHR0cHM6Ly9zdmVsdGUuZGV2L2UvZWZmZWN0X2luX3Vub3duZWRfZGVyaXZlZGApO1xuXHR9XG59XG5cbi8qKlxuICogYCVydW5lJWAgY2FuIG9ubHkgYmUgdXNlZCBpbnNpZGUgYW4gZWZmZWN0IChlLmcuIGR1cmluZyBjb21wb25lbnQgaW5pdGlhbGlzYXRpb24pXG4gKiBAcGFyYW0ge3N0cmluZ30gcnVuZVxuICogQHJldHVybnMge25ldmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZWZmZWN0X29ycGhhbihydW5lKSB7XG5cdGlmIChERVYpIHtcblx0XHRjb25zdCBlcnJvciA9IG5ldyBFcnJvcihgZWZmZWN0X29ycGhhblxcblxcYCR7cnVuZX1cXGAgY2FuIG9ubHkgYmUgdXNlZCBpbnNpZGUgYW4gZWZmZWN0IChlLmcuIGR1cmluZyBjb21wb25lbnQgaW5pdGlhbGlzYXRpb24pXFxuaHR0cHM6Ly9zdmVsdGUuZGV2L2UvZWZmZWN0X29ycGhhbmApO1xuXG5cdFx0ZXJyb3IubmFtZSA9ICdTdmVsdGUgZXJyb3InO1xuXHRcdHRocm93IGVycm9yO1xuXHR9IGVsc2Uge1xuXHRcdHRocm93IG5ldyBFcnJvcihgaHR0cHM6Ly9zdmVsdGUuZGV2L2UvZWZmZWN0X29ycGhhbmApO1xuXHR9XG59XG5cbi8qKlxuICogTWF4aW11bSB1cGRhdGUgZGVwdGggZXhjZWVkZWQuIFRoaXMgY2FuIGhhcHBlbiB3aGVuIGEgcmVhY3RpdmUgYmxvY2sgb3IgZWZmZWN0IHJlcGVhdGVkbHkgc2V0cyBhIG5ldyB2YWx1ZS4gU3ZlbHRlIGxpbWl0cyB0aGUgbnVtYmVyIG9mIG5lc3RlZCB1cGRhdGVzIHRvIHByZXZlbnQgaW5maW5pdGUgbG9vcHNcbiAqIEByZXR1cm5zIHtuZXZlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVmZmVjdF91cGRhdGVfZGVwdGhfZXhjZWVkZWQoKSB7XG5cdGlmIChERVYpIHtcblx0XHRjb25zdCBlcnJvciA9IG5ldyBFcnJvcihgZWZmZWN0X3VwZGF0ZV9kZXB0aF9leGNlZWRlZFxcbk1heGltdW0gdXBkYXRlIGRlcHRoIGV4Y2VlZGVkLiBUaGlzIGNhbiBoYXBwZW4gd2hlbiBhIHJlYWN0aXZlIGJsb2NrIG9yIGVmZmVjdCByZXBlYXRlZGx5IHNldHMgYSBuZXcgdmFsdWUuIFN2ZWx0ZSBsaW1pdHMgdGhlIG51bWJlciBvZiBuZXN0ZWQgdXBkYXRlcyB0byBwcmV2ZW50IGluZmluaXRlIGxvb3BzXFxuaHR0cHM6Ly9zdmVsdGUuZGV2L2UvZWZmZWN0X3VwZGF0ZV9kZXB0aF9leGNlZWRlZGApO1xuXG5cdFx0ZXJyb3IubmFtZSA9ICdTdmVsdGUgZXJyb3InO1xuXHRcdHRocm93IGVycm9yO1xuXHR9IGVsc2Uge1xuXHRcdHRocm93IG5ldyBFcnJvcihgaHR0cHM6Ly9zdmVsdGUuZGV2L2UvZWZmZWN0X3VwZGF0ZV9kZXB0aF9leGNlZWRlZGApO1xuXHR9XG59XG5cbi8qKlxuICogRmFpbGVkIHRvIGh5ZHJhdGUgdGhlIGFwcGxpY2F0aW9uXG4gKiBAcmV0dXJucyB7bmV2ZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBoeWRyYXRpb25fZmFpbGVkKCkge1xuXHRpZiAoREVWKSB7XG5cdFx0Y29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoYGh5ZHJhdGlvbl9mYWlsZWRcXG5GYWlsZWQgdG8gaHlkcmF0ZSB0aGUgYXBwbGljYXRpb25cXG5odHRwczovL3N2ZWx0ZS5kZXYvZS9oeWRyYXRpb25fZmFpbGVkYCk7XG5cblx0XHRlcnJvci5uYW1lID0gJ1N2ZWx0ZSBlcnJvcic7XG5cdFx0dGhyb3cgZXJyb3I7XG5cdH0gZWxzZSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKGBodHRwczovL3N2ZWx0ZS5kZXYvZS9oeWRyYXRpb25fZmFpbGVkYCk7XG5cdH1cbn1cblxuLyoqXG4gKiBDb3VsZCBub3QgYHtAcmVuZGVyfWAgc25pcHBldCBkdWUgdG8gdGhlIGV4cHJlc3Npb24gYmVpbmcgYG51bGxgIG9yIGB1bmRlZmluZWRgLiBDb25zaWRlciB1c2luZyBvcHRpb25hbCBjaGFpbmluZyBge0ByZW5kZXIgc25pcHBldD8uKCl9YFxuICogQHJldHVybnMge25ldmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gaW52YWxpZF9zbmlwcGV0KCkge1xuXHRpZiAoREVWKSB7XG5cdFx0Y29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoYGludmFsaWRfc25pcHBldFxcbkNvdWxkIG5vdCBcXGB7QHJlbmRlcn1cXGAgc25pcHBldCBkdWUgdG8gdGhlIGV4cHJlc3Npb24gYmVpbmcgXFxgbnVsbFxcYCBvciBcXGB1bmRlZmluZWRcXGAuIENvbnNpZGVyIHVzaW5nIG9wdGlvbmFsIGNoYWluaW5nIFxcYHtAcmVuZGVyIHNuaXBwZXQ/LigpfVxcYFxcbmh0dHBzOi8vc3ZlbHRlLmRldi9lL2ludmFsaWRfc25pcHBldGApO1xuXG5cdFx0ZXJyb3IubmFtZSA9ICdTdmVsdGUgZXJyb3InO1xuXHRcdHRocm93IGVycm9yO1xuXHR9IGVsc2Uge1xuXHRcdHRocm93IG5ldyBFcnJvcihgaHR0cHM6Ly9zdmVsdGUuZGV2L2UvaW52YWxpZF9zbmlwcGV0YCk7XG5cdH1cbn1cblxuLyoqXG4gKiBgJW5hbWUlKC4uLilgIGNhbm5vdCBiZSB1c2VkIGluIHJ1bmVzIG1vZGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKiBAcmV0dXJucyB7bmV2ZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsaWZlY3ljbGVfbGVnYWN5X29ubHkobmFtZSkge1xuXHRpZiAoREVWKSB7XG5cdFx0Y29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoYGxpZmVjeWNsZV9sZWdhY3lfb25seVxcblxcYCR7bmFtZX0oLi4uKVxcYCBjYW5ub3QgYmUgdXNlZCBpbiBydW5lcyBtb2RlXFxuaHR0cHM6Ly9zdmVsdGUuZGV2L2UvbGlmZWN5Y2xlX2xlZ2FjeV9vbmx5YCk7XG5cblx0XHRlcnJvci5uYW1lID0gJ1N2ZWx0ZSBlcnJvcic7XG5cdFx0dGhyb3cgZXJyb3I7XG5cdH0gZWxzZSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKGBodHRwczovL3N2ZWx0ZS5kZXYvZS9saWZlY3ljbGVfbGVnYWN5X29ubHlgKTtcblx0fVxufVxuXG4vKipcbiAqIENhbm5vdCBkbyBgYmluZDola2V5JT17dW5kZWZpbmVkfWAgd2hlbiBgJWtleSVgIGhhcyBhIGZhbGxiYWNrIHZhbHVlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5XG4gKiBAcmV0dXJucyB7bmV2ZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwcm9wc19pbnZhbGlkX3ZhbHVlKGtleSkge1xuXHRpZiAoREVWKSB7XG5cdFx0Y29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoYHByb3BzX2ludmFsaWRfdmFsdWVcXG5DYW5ub3QgZG8gXFxgYmluZDoke2tleX09e3VuZGVmaW5lZH1cXGAgd2hlbiBcXGAke2tleX1cXGAgaGFzIGEgZmFsbGJhY2sgdmFsdWVcXG5odHRwczovL3N2ZWx0ZS5kZXYvZS9wcm9wc19pbnZhbGlkX3ZhbHVlYCk7XG5cblx0XHRlcnJvci5uYW1lID0gJ1N2ZWx0ZSBlcnJvcic7XG5cdFx0dGhyb3cgZXJyb3I7XG5cdH0gZWxzZSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKGBodHRwczovL3N2ZWx0ZS5kZXYvZS9wcm9wc19pbnZhbGlkX3ZhbHVlYCk7XG5cdH1cbn1cblxuLyoqXG4gKiBSZXN0IGVsZW1lbnQgcHJvcGVydGllcyBvZiBgJHByb3BzKClgIHN1Y2ggYXMgYCVwcm9wZXJ0eSVgIGFyZSByZWFkb25seVxuICogQHBhcmFtIHtzdHJpbmd9IHByb3BlcnR5XG4gKiBAcmV0dXJucyB7bmV2ZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwcm9wc19yZXN0X3JlYWRvbmx5KHByb3BlcnR5KSB7XG5cdGlmIChERVYpIHtcblx0XHRjb25zdCBlcnJvciA9IG5ldyBFcnJvcihgcHJvcHNfcmVzdF9yZWFkb25seVxcblJlc3QgZWxlbWVudCBwcm9wZXJ0aWVzIG9mIFxcYCRwcm9wcygpXFxgIHN1Y2ggYXMgXFxgJHtwcm9wZXJ0eX1cXGAgYXJlIHJlYWRvbmx5XFxuaHR0cHM6Ly9zdmVsdGUuZGV2L2UvcHJvcHNfcmVzdF9yZWFkb25seWApO1xuXG5cdFx0ZXJyb3IubmFtZSA9ICdTdmVsdGUgZXJyb3InO1xuXHRcdHRocm93IGVycm9yO1xuXHR9IGVsc2Uge1xuXHRcdHRocm93IG5ldyBFcnJvcihgaHR0cHM6Ly9zdmVsdGUuZGV2L2UvcHJvcHNfcmVzdF9yZWFkb25seWApO1xuXHR9XG59XG5cbi8qKlxuICogVGhlIGAlcnVuZSVgIHJ1bmUgaXMgb25seSBhdmFpbGFibGUgaW5zaWRlIGAuc3ZlbHRlYCBhbmQgYC5zdmVsdGUuanMvdHNgIGZpbGVzXG4gKiBAcGFyYW0ge3N0cmluZ30gcnVuZVxuICogQHJldHVybnMge25ldmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gcnVuZV9vdXRzaWRlX3N2ZWx0ZShydW5lKSB7XG5cdGlmIChERVYpIHtcblx0XHRjb25zdCBlcnJvciA9IG5ldyBFcnJvcihgcnVuZV9vdXRzaWRlX3N2ZWx0ZVxcblRoZSBcXGAke3J1bmV9XFxgIHJ1bmUgaXMgb25seSBhdmFpbGFibGUgaW5zaWRlIFxcYC5zdmVsdGVcXGAgYW5kIFxcYC5zdmVsdGUuanMvdHNcXGAgZmlsZXNcXG5odHRwczovL3N2ZWx0ZS5kZXYvZS9ydW5lX291dHNpZGVfc3ZlbHRlYCk7XG5cblx0XHRlcnJvci5uYW1lID0gJ1N2ZWx0ZSBlcnJvcic7XG5cdFx0dGhyb3cgZXJyb3I7XG5cdH0gZWxzZSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKGBodHRwczovL3N2ZWx0ZS5kZXYvZS9ydW5lX291dHNpZGVfc3ZlbHRlYCk7XG5cdH1cbn1cblxuLyoqXG4gKiBQcm9wZXJ0eSBkZXNjcmlwdG9ycyBkZWZpbmVkIG9uIGAkc3RhdGVgIG9iamVjdHMgbXVzdCBjb250YWluIGB2YWx1ZWAgYW5kIGFsd2F5cyBiZSBgZW51bWVyYWJsZWAsIGBjb25maWd1cmFibGVgIGFuZCBgd3JpdGFibGVgLlxuICogQHJldHVybnMge25ldmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RhdGVfZGVzY3JpcHRvcnNfZml4ZWQoKSB7XG5cdGlmIChERVYpIHtcblx0XHRjb25zdCBlcnJvciA9IG5ldyBFcnJvcihgc3RhdGVfZGVzY3JpcHRvcnNfZml4ZWRcXG5Qcm9wZXJ0eSBkZXNjcmlwdG9ycyBkZWZpbmVkIG9uIFxcYCRzdGF0ZVxcYCBvYmplY3RzIG11c3QgY29udGFpbiBcXGB2YWx1ZVxcYCBhbmQgYWx3YXlzIGJlIFxcYGVudW1lcmFibGVcXGAsIFxcYGNvbmZpZ3VyYWJsZVxcYCBhbmQgXFxgd3JpdGFibGVcXGAuXFxuaHR0cHM6Ly9zdmVsdGUuZGV2L2Uvc3RhdGVfZGVzY3JpcHRvcnNfZml4ZWRgKTtcblxuXHRcdGVycm9yLm5hbWUgPSAnU3ZlbHRlIGVycm9yJztcblx0XHR0aHJvdyBlcnJvcjtcblx0fSBlbHNlIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoYGh0dHBzOi8vc3ZlbHRlLmRldi9lL3N0YXRlX2Rlc2NyaXB0b3JzX2ZpeGVkYCk7XG5cdH1cbn1cblxuLyoqXG4gKiBDYW5ub3Qgc2V0IHByb3RvdHlwZSBvZiBgJHN0YXRlYCBvYmplY3RcbiAqIEByZXR1cm5zIHtuZXZlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0YXRlX3Byb3RvdHlwZV9maXhlZCgpIHtcblx0aWYgKERFVikge1xuXHRcdGNvbnN0IGVycm9yID0gbmV3IEVycm9yKGBzdGF0ZV9wcm90b3R5cGVfZml4ZWRcXG5DYW5ub3Qgc2V0IHByb3RvdHlwZSBvZiBcXGAkc3RhdGVcXGAgb2JqZWN0XFxuaHR0cHM6Ly9zdmVsdGUuZGV2L2Uvc3RhdGVfcHJvdG90eXBlX2ZpeGVkYCk7XG5cblx0XHRlcnJvci5uYW1lID0gJ1N2ZWx0ZSBlcnJvcic7XG5cdFx0dGhyb3cgZXJyb3I7XG5cdH0gZWxzZSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKGBodHRwczovL3N2ZWx0ZS5kZXYvZS9zdGF0ZV9wcm90b3R5cGVfZml4ZWRgKTtcblx0fVxufVxuXG4vKipcbiAqIFJlYWRpbmcgc3RhdGUgdGhhdCB3YXMgY3JlYXRlZCBpbnNpZGUgdGhlIHNhbWUgZGVyaXZlZCBpcyBmb3JiaWRkZW4uIENvbnNpZGVyIHVzaW5nIGB1bnRyYWNrYCB0byByZWFkIGxvY2FsbHkgY3JlYXRlZCBzdGF0ZVxuICogQHJldHVybnMge25ldmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RhdGVfdW5zYWZlX2xvY2FsX3JlYWQoKSB7XG5cdGlmIChERVYpIHtcblx0XHRjb25zdCBlcnJvciA9IG5ldyBFcnJvcihgc3RhdGVfdW5zYWZlX2xvY2FsX3JlYWRcXG5SZWFkaW5nIHN0YXRlIHRoYXQgd2FzIGNyZWF0ZWQgaW5zaWRlIHRoZSBzYW1lIGRlcml2ZWQgaXMgZm9yYmlkZGVuLiBDb25zaWRlciB1c2luZyBcXGB1bnRyYWNrXFxgIHRvIHJlYWQgbG9jYWxseSBjcmVhdGVkIHN0YXRlXFxuaHR0cHM6Ly9zdmVsdGUuZGV2L2Uvc3RhdGVfdW5zYWZlX2xvY2FsX3JlYWRgKTtcblxuXHRcdGVycm9yLm5hbWUgPSAnU3ZlbHRlIGVycm9yJztcblx0XHR0aHJvdyBlcnJvcjtcblx0fSBlbHNlIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoYGh0dHBzOi8vc3ZlbHRlLmRldi9lL3N0YXRlX3Vuc2FmZV9sb2NhbF9yZWFkYCk7XG5cdH1cbn1cblxuLyoqXG4gKiBVcGRhdGluZyBzdGF0ZSBpbnNpZGUgYSBkZXJpdmVkIG9yIGEgdGVtcGxhdGUgZXhwcmVzc2lvbiBpcyBmb3JiaWRkZW4uIElmIHRoZSB2YWx1ZSBzaG91bGQgbm90IGJlIHJlYWN0aXZlLCBkZWNsYXJlIGl0IHdpdGhvdXQgYCRzdGF0ZWBcbiAqIEByZXR1cm5zIHtuZXZlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0YXRlX3Vuc2FmZV9tdXRhdGlvbigpIHtcblx0aWYgKERFVikge1xuXHRcdGNvbnN0IGVycm9yID0gbmV3IEVycm9yKGBzdGF0ZV91bnNhZmVfbXV0YXRpb25cXG5VcGRhdGluZyBzdGF0ZSBpbnNpZGUgYSBkZXJpdmVkIG9yIGEgdGVtcGxhdGUgZXhwcmVzc2lvbiBpcyBmb3JiaWRkZW4uIElmIHRoZSB2YWx1ZSBzaG91bGQgbm90IGJlIHJlYWN0aXZlLCBkZWNsYXJlIGl0IHdpdGhvdXQgXFxgJHN0YXRlXFxgXFxuaHR0cHM6Ly9zdmVsdGUuZGV2L2Uvc3RhdGVfdW5zYWZlX211dGF0aW9uYCk7XG5cblx0XHRlcnJvci5uYW1lID0gJ1N2ZWx0ZSBlcnJvcic7XG5cdFx0dGhyb3cgZXJyb3I7XG5cdH0gZWxzZSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKGBodHRwczovL3N2ZWx0ZS5kZXYvZS9zdGF0ZV91bnNhZmVfbXV0YXRpb25gKTtcblx0fVxufSIsImV4cG9ydCBsZXQgbGVnYWN5X21vZGVfZmxhZyA9IGZhbHNlO1xuZXhwb3J0IGxldCB0cmFjaW5nX21vZGVfZmxhZyA9IGZhbHNlO1xuXG5leHBvcnQgZnVuY3Rpb24gZW5hYmxlX2xlZ2FjeV9tb2RlX2ZsYWcoKSB7XG5cdGxlZ2FjeV9tb2RlX2ZsYWcgPSB0cnVlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZW5hYmxlX3RyYWNpbmdfbW9kZV9mbGFnKCkge1xuXHR0cmFjaW5nX21vZGVfZmxhZyA9IHRydWU7XG59XG4iLCJleHBvcnQgY29uc3QgRUFDSF9JVEVNX1JFQUNUSVZFID0gMTtcbmV4cG9ydCBjb25zdCBFQUNIX0lOREVYX1JFQUNUSVZFID0gMSA8PCAxO1xuLyoqIFNlZSBFYWNoQmxvY2sgaW50ZXJmYWNlIG1ldGFkYXRhLmlzX2NvbnRyb2xsZWQgZm9yIGFuIGV4cGxhbmF0aW9uIHdoYXQgdGhpcyBpcyAqL1xuZXhwb3J0IGNvbnN0IEVBQ0hfSVNfQ09OVFJPTExFRCA9IDEgPDwgMjtcbmV4cG9ydCBjb25zdCBFQUNIX0lTX0FOSU1BVEVEID0gMSA8PCAzO1xuZXhwb3J0IGNvbnN0IEVBQ0hfSVRFTV9JTU1VVEFCTEUgPSAxIDw8IDQ7XG5cbmV4cG9ydCBjb25zdCBQUk9QU19JU19JTU1VVEFCTEUgPSAxO1xuZXhwb3J0IGNvbnN0IFBST1BTX0lTX1JVTkVTID0gMSA8PCAxO1xuZXhwb3J0IGNvbnN0IFBST1BTX0lTX1VQREFURUQgPSAxIDw8IDI7XG5leHBvcnQgY29uc3QgUFJPUFNfSVNfQklOREFCTEUgPSAxIDw8IDM7XG5leHBvcnQgY29uc3QgUFJPUFNfSVNfTEFaWV9JTklUSUFMID0gMSA8PCA0O1xuXG5leHBvcnQgY29uc3QgVFJBTlNJVElPTl9JTiA9IDE7XG5leHBvcnQgY29uc3QgVFJBTlNJVElPTl9PVVQgPSAxIDw8IDE7XG5leHBvcnQgY29uc3QgVFJBTlNJVElPTl9HTE9CQUwgPSAxIDw8IDI7XG5cbmV4cG9ydCBjb25zdCBURU1QTEFURV9GUkFHTUVOVCA9IDE7XG5leHBvcnQgY29uc3QgVEVNUExBVEVfVVNFX0lNUE9SVF9OT0RFID0gMSA8PCAxO1xuXG5leHBvcnQgY29uc3QgSFlEUkFUSU9OX1NUQVJUID0gJ1snO1xuLyoqIHVzZWQgdG8gaW5kaWNhdGUgdGhhdCBhbiBgezplbHNlfS4uLmAgYmxvY2sgd2FzIHJlbmRlcmVkICovXG5leHBvcnQgY29uc3QgSFlEUkFUSU9OX1NUQVJUX0VMU0UgPSAnWyEnO1xuZXhwb3J0IGNvbnN0IEhZRFJBVElPTl9FTkQgPSAnXSc7XG5leHBvcnQgY29uc3QgSFlEUkFUSU9OX0VSUk9SID0ge307XG5cbmV4cG9ydCBjb25zdCBFTEVNRU5UX0lTX05BTUVTUEFDRUQgPSAxO1xuZXhwb3J0IGNvbnN0IEVMRU1FTlRfUFJFU0VSVkVfQVRUUklCVVRFX0NBU0UgPSAxIDw8IDE7XG5cbmV4cG9ydCBjb25zdCBVTklOSVRJQUxJWkVEID0gU3ltYm9sKCk7XG5cbi8vIERldi10aW1lIGNvbXBvbmVudCBwcm9wZXJ0aWVzXG5leHBvcnQgY29uc3QgRklMRU5BTUUgPSBTeW1ib2woJ2ZpbGVuYW1lJyk7XG5leHBvcnQgY29uc3QgSE1SID0gU3ltYm9sKCdobXInKTtcblxuZXhwb3J0IGNvbnN0IE5BTUVTUEFDRV9TVkcgPSAnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnO1xuZXhwb3J0IGNvbnN0IE5BTUVTUEFDRV9NQVRITUwgPSAnaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTCc7XG5cbi8vIHdlIHVzZSBhIGxpc3Qgb2YgaWdub3JhYmxlIHJ1bnRpbWUgd2FybmluZ3MgYmVjYXVzZSBub3QgZXZlcnkgcnVudGltZSB3YXJuaW5nXG4vLyBjYW4gYmUgaWdub3JlZCBhbmQgd2Ugd2FudCB0byBrZWVwIHRoZSB2YWxpZGF0aW9uIGZvciBzdmVsdGUtaWdub3JlIGluIHBsYWNlXG5leHBvcnQgY29uc3QgSUdOT1JBQkxFX1JVTlRJTUVfV0FSTklOR1MgPSAvKiogQHR5cGUge2NvbnN0fSAqLyAoW1xuXHQnc3RhdGVfc25hcHNob3RfdW5jbG9uZWFibGUnLFxuXHQnYmluZGluZ19wcm9wZXJ0eV9ub25fcmVhY3RpdmUnLFxuXHQnaHlkcmF0aW9uX2F0dHJpYnV0ZV9jaGFuZ2VkJyxcblx0J2h5ZHJhdGlvbl9odG1sX2NoYW5nZWQnLFxuXHQnb3duZXJzaGlwX2ludmFsaWRfYmluZGluZycsXG5cdCdvd25lcnNoaXBfaW52YWxpZF9tdXRhdGlvbidcbl0pO1xuXG4vKipcbiAqIFdoaXRlc3BhY2UgaW5zaWRlIG9uZSBvZiB0aGVzZSBlbGVtZW50cyB3aWxsIG5vdCByZXN1bHQgaW5cbiAqIGEgd2hpdGVzcGFjZSBub2RlIGJlaW5nIGNyZWF0ZWQgaW4gYW55IGNpcmN1bXN0YW5jZXMuIChUaGlzXG4gKiBsaXN0IGlzIGFsbW9zdCBjZXJ0YWlubHkgdmVyeSBpbmNvbXBsZXRlKVxuICogVE9ETyB0aGlzIGlzIGN1cnJlbnRseSB1bnVzZWRcbiAqL1xuZXhwb3J0IGNvbnN0IEVMRU1FTlRTX1dJVEhPVVRfVEVYVCA9IFsnYXVkaW8nLCAnZGF0YWxpc3QnLCAnZGwnLCAnb3B0Z3JvdXAnLCAnc2VsZWN0JywgJ3ZpZGVvJ107XG4iLCIvKiogQGltcG9ydCB7IERlcml2ZWQsIEVmZmVjdCwgUmVhY3Rpb24sIFNvdXJjZSwgVmFsdWUgfSBmcm9tICcjY2xpZW50JyAqL1xuaW1wb3J0IHsgREVWIH0gZnJvbSAnZXNtLWVudic7XG5pbXBvcnQge1xuXHRjb21wb25lbnRfY29udGV4dCxcblx0YWN0aXZlX3JlYWN0aW9uLFxuXHRuZXdfZGVwcyxcblx0YWN0aXZlX2VmZmVjdCxcblx0dW50cmFja2VkX3dyaXRlcyxcblx0Z2V0LFxuXHRpc19ydW5lcyxcblx0c2NoZWR1bGVfZWZmZWN0LFxuXHRzZXRfdW50cmFja2VkX3dyaXRlcyxcblx0c2V0X3NpZ25hbF9zdGF0dXMsXG5cdHVudHJhY2ssXG5cdGluY3JlbWVudF92ZXJzaW9uLFxuXHR1cGRhdGVfZWZmZWN0LFxuXHRkZXJpdmVkX3NvdXJjZXMsXG5cdHNldF9kZXJpdmVkX3NvdXJjZXMsXG5cdGNoZWNrX2RpcnRpbmVzcyxcblx0c2V0X2lzX2ZsdXNoaW5nX2VmZmVjdCxcblx0aXNfZmx1c2hpbmdfZWZmZWN0XG59IGZyb20gJy4uL3J1bnRpbWUuanMnO1xuaW1wb3J0IHsgZXF1YWxzLCBzYWZlX2VxdWFscyB9IGZyb20gJy4vZXF1YWxpdHkuanMnO1xuaW1wb3J0IHtcblx0Q0xFQU4sXG5cdERFUklWRUQsXG5cdERJUlRZLFxuXHRCUkFOQ0hfRUZGRUNULFxuXHRJTlNQRUNUX0VGRkVDVCxcblx0VU5PV05FRCxcblx0TUFZQkVfRElSVFksXG5cdEJMT0NLX0VGRkVDVFxufSBmcm9tICcuLi9jb25zdGFudHMuanMnO1xuaW1wb3J0ICogYXMgZSBmcm9tICcuLi9lcnJvcnMuanMnO1xuaW1wb3J0IHsgbGVnYWN5X21vZGVfZmxhZywgdHJhY2luZ19tb2RlX2ZsYWcgfSBmcm9tICcuLi8uLi9mbGFncy9pbmRleC5qcyc7XG5pbXBvcnQgeyBnZXRfc3RhY2sgfSBmcm9tICcuLi9kZXYvdHJhY2luZy5qcyc7XG5cbmV4cG9ydCBsZXQgaW5zcGVjdF9lZmZlY3RzID0gbmV3IFNldCgpO1xuXG4vKipcbiAqIEBwYXJhbSB7U2V0PGFueT59IHZcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldF9pbnNwZWN0X2VmZmVjdHModikge1xuXHRpbnNwZWN0X2VmZmVjdHMgPSB2O1xufVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBWXG4gKiBAcGFyYW0ge1Z9IHZcbiAqIEBwYXJhbSB7RXJyb3IgfCBudWxsfSBbc3RhY2tdXG4gKiBAcmV0dXJucyB7U291cmNlPFY+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gc291cmNlKHYsIHN0YWNrKSB7XG5cdC8qKiBAdHlwZSB7VmFsdWV9ICovXG5cdHZhciBzaWduYWwgPSB7XG5cdFx0ZjogMCwgLy8gVE9ETyBpZGVhbGx5IHdlIGNvdWxkIHNraXAgdGhpcyBhbHRvZ2V0aGVyLCBidXQgaXQgY2F1c2VzIHR5cGUgZXJyb3JzXG5cdFx0dixcblx0XHRyZWFjdGlvbnM6IG51bGwsXG5cdFx0ZXF1YWxzLFxuXHRcdHZlcnNpb246IDBcblx0fTtcblxuXHRpZiAoREVWICYmIHRyYWNpbmdfbW9kZV9mbGFnKSB7XG5cdFx0c2lnbmFsLmNyZWF0ZWQgPSBzdGFjayA/PyBnZXRfc3RhY2soJ0NyZWF0ZWRBdCcpO1xuXHRcdHNpZ25hbC5kZWJ1ZyA9IG51bGw7XG5cdH1cblxuXHRyZXR1cm4gc2lnbmFsO1xufVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBWXG4gKiBAcGFyYW0ge1Z9IHZcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0YXRlKHYpIHtcblx0cmV0dXJuIHB1c2hfZGVyaXZlZF9zb3VyY2Uoc291cmNlKHYpKTtcbn1cblxuLyoqXG4gKiBAdGVtcGxhdGUgVlxuICogQHBhcmFtIHtWfSBpbml0aWFsX3ZhbHVlXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpbW11dGFibGVdXG4gKiBAcmV0dXJucyB7U291cmNlPFY+fVxuICovXG4vKiNfX05PX1NJREVfRUZGRUNUU19fKi9cbmV4cG9ydCBmdW5jdGlvbiBtdXRhYmxlX3NvdXJjZShpbml0aWFsX3ZhbHVlLCBpbW11dGFibGUgPSBmYWxzZSkge1xuXHRjb25zdCBzID0gc291cmNlKGluaXRpYWxfdmFsdWUpO1xuXHRpZiAoIWltbXV0YWJsZSkge1xuXHRcdHMuZXF1YWxzID0gc2FmZV9lcXVhbHM7XG5cdH1cblxuXHQvLyBiaW5kIHRoZSBzaWduYWwgdG8gdGhlIGNvbXBvbmVudCBjb250ZXh0LCBpbiBjYXNlIHdlIG5lZWQgdG9cblx0Ly8gdHJhY2sgdXBkYXRlcyB0byB0cmlnZ2VyIGJlZm9yZVVwZGF0ZS9hZnRlclVwZGF0ZSBjYWxsYmFja3Ncblx0aWYgKGxlZ2FjeV9tb2RlX2ZsYWcgJiYgY29tcG9uZW50X2NvbnRleHQgIT09IG51bGwgJiYgY29tcG9uZW50X2NvbnRleHQubCAhPT0gbnVsbCkge1xuXHRcdChjb21wb25lbnRfY29udGV4dC5sLnMgPz89IFtdKS5wdXNoKHMpO1xuXHR9XG5cblx0cmV0dXJuIHM7XG59XG5cbi8qKlxuICogQHRlbXBsYXRlIFZcbiAqIEBwYXJhbSB7Vn0gdlxuICogQHBhcmFtIHtib29sZWFufSBbaW1tdXRhYmxlXVxuICogQHJldHVybnMge1NvdXJjZTxWPn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG11dGFibGVfc3RhdGUodiwgaW1tdXRhYmxlID0gZmFsc2UpIHtcblx0cmV0dXJuIHB1c2hfZGVyaXZlZF9zb3VyY2UobXV0YWJsZV9zb3VyY2UodiwgaW1tdXRhYmxlKSk7XG59XG5cbi8qKlxuICogQHRlbXBsYXRlIFZcbiAqIEBwYXJhbSB7U291cmNlPFY+fSBzb3VyY2VcbiAqL1xuLyojX19OT19TSURFX0VGRkVDVFNfXyovXG5mdW5jdGlvbiBwdXNoX2Rlcml2ZWRfc291cmNlKHNvdXJjZSkge1xuXHRpZiAoYWN0aXZlX3JlYWN0aW9uICE9PSBudWxsICYmIChhY3RpdmVfcmVhY3Rpb24uZiAmIERFUklWRUQpICE9PSAwKSB7XG5cdFx0aWYgKGRlcml2ZWRfc291cmNlcyA9PT0gbnVsbCkge1xuXHRcdFx0c2V0X2Rlcml2ZWRfc291cmNlcyhbc291cmNlXSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRlcml2ZWRfc291cmNlcy5wdXNoKHNvdXJjZSk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHNvdXJjZTtcbn1cblxuLyoqXG4gKiBAdGVtcGxhdGUgVlxuICogQHBhcmFtIHtWYWx1ZTxWPn0gc291cmNlXG4gKiBAcGFyYW0ge1Z9IHZhbHVlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtdXRhdGUoc291cmNlLCB2YWx1ZSkge1xuXHRzZXQoXG5cdFx0c291cmNlLFxuXHRcdHVudHJhY2soKCkgPT4gZ2V0KHNvdXJjZSkpXG5cdCk7XG5cdHJldHVybiB2YWx1ZTtcbn1cblxuLyoqXG4gKiBAdGVtcGxhdGUgVlxuICogQHBhcmFtIHtTb3VyY2U8Vj59IHNvdXJjZVxuICogQHBhcmFtIHtWfSB2YWx1ZVxuICogQHJldHVybnMge1Z9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXQoc291cmNlLCB2YWx1ZSkge1xuXHRpZiAoXG5cdFx0YWN0aXZlX3JlYWN0aW9uICE9PSBudWxsICYmXG5cdFx0aXNfcnVuZXMoKSAmJlxuXHRcdChhY3RpdmVfcmVhY3Rpb24uZiAmIChERVJJVkVEIHwgQkxPQ0tfRUZGRUNUKSkgIT09IDAgJiZcblx0XHQvLyBJZiB0aGUgc291cmNlIHdhcyBjcmVhdGVkIGxvY2FsbHkgd2l0aGluIHRoZSBjdXJyZW50IGRlcml2ZWQsIHRoZW5cblx0XHQvLyB3ZSBhbGxvdyB0aGUgbXV0YXRpb24uXG5cdFx0KGRlcml2ZWRfc291cmNlcyA9PT0gbnVsbCB8fCAhZGVyaXZlZF9zb3VyY2VzLmluY2x1ZGVzKHNvdXJjZSkpXG5cdCkge1xuXHRcdGUuc3RhdGVfdW5zYWZlX211dGF0aW9uKCk7XG5cdH1cblxuXHRyZXR1cm4gaW50ZXJuYWxfc2V0KHNvdXJjZSwgdmFsdWUpO1xufVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBWXG4gKiBAcGFyYW0ge1NvdXJjZTxWPn0gc291cmNlXG4gKiBAcGFyYW0ge1Z9IHZhbHVlXG4gKiBAcmV0dXJucyB7Vn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGludGVybmFsX3NldChzb3VyY2UsIHZhbHVlKSB7XG5cdGlmICghc291cmNlLmVxdWFscyh2YWx1ZSkpIHtcblx0XHRzb3VyY2UudiA9IHZhbHVlO1xuXHRcdHNvdXJjZS52ZXJzaW9uID0gaW5jcmVtZW50X3ZlcnNpb24oKTtcblxuXHRcdGlmIChERVYgJiYgdHJhY2luZ19tb2RlX2ZsYWcpIHtcblx0XHRcdHNvdXJjZS51cGRhdGVkID0gZ2V0X3N0YWNrKCdVcGRhdGVkQXQnKTtcblx0XHR9XG5cblx0XHRtYXJrX3JlYWN0aW9ucyhzb3VyY2UsIERJUlRZKTtcblxuXHRcdC8vIElmIHRoZSBjdXJyZW50IHNpZ25hbCBpcyBydW5uaW5nIGZvciB0aGUgZmlyc3QgdGltZSwgaXQgd29uJ3QgaGF2ZSBhbnlcblx0XHQvLyByZWFjdGlvbnMgYXMgd2Ugb25seSBhbGxvY2F0ZSBhbmQgYXNzaWduIHRoZSByZWFjdGlvbnMgYWZ0ZXIgdGhlIHNpZ25hbFxuXHRcdC8vIGhhcyBmdWxseSBleGVjdXRlZC4gU28gaW4gdGhlIGNhc2Ugb2YgZW5zdXJpbmcgaXQgcmVnaXN0ZXJzIHRoZSByZWFjdGlvblxuXHRcdC8vIHByb3Blcmx5IGZvciBpdHNlbGYsIHdlIG5lZWQgdG8gZW5zdXJlIHRoZSBjdXJyZW50IGVmZmVjdCBhY3R1YWxseSBnZXRzXG5cdFx0Ly8gc2NoZWR1bGVkLiBpLmU6IGAkZWZmZWN0KCgpID0+IHgrKylgXG5cdFx0aWYgKFxuXHRcdFx0aXNfcnVuZXMoKSAmJlxuXHRcdFx0YWN0aXZlX2VmZmVjdCAhPT0gbnVsbCAmJlxuXHRcdFx0KGFjdGl2ZV9lZmZlY3QuZiAmIENMRUFOKSAhPT0gMCAmJlxuXHRcdFx0KGFjdGl2ZV9lZmZlY3QuZiAmIEJSQU5DSF9FRkZFQ1QpID09PSAwXG5cdFx0KSB7XG5cdFx0XHRpZiAobmV3X2RlcHMgIT09IG51bGwgJiYgbmV3X2RlcHMuaW5jbHVkZXMoc291cmNlKSkge1xuXHRcdFx0XHRzZXRfc2lnbmFsX3N0YXR1cyhhY3RpdmVfZWZmZWN0LCBESVJUWSk7XG5cdFx0XHRcdHNjaGVkdWxlX2VmZmVjdChhY3RpdmVfZWZmZWN0KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGlmICh1bnRyYWNrZWRfd3JpdGVzID09PSBudWxsKSB7XG5cdFx0XHRcdFx0c2V0X3VudHJhY2tlZF93cml0ZXMoW3NvdXJjZV0pO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHVudHJhY2tlZF93cml0ZXMucHVzaChzb3VyY2UpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKERFViAmJiBpbnNwZWN0X2VmZmVjdHMuc2l6ZSA+IDApIHtcblx0XHRcdGNvbnN0IGluc3BlY3RzID0gQXJyYXkuZnJvbShpbnNwZWN0X2VmZmVjdHMpO1xuXHRcdFx0dmFyIHByZXZpb3VzbHlfZmx1c2hpbmdfZWZmZWN0ID0gaXNfZmx1c2hpbmdfZWZmZWN0O1xuXHRcdFx0c2V0X2lzX2ZsdXNoaW5nX2VmZmVjdCh0cnVlKTtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGZvciAoY29uc3QgZWZmZWN0IG9mIGluc3BlY3RzKSB7XG5cdFx0XHRcdFx0Ly8gTWFyayBjbGVhbiBpbnNwZWN0LWVmZmVjdHMgYXMgbWF5YmUgZGlydHkgYW5kIHRoZW4gY2hlY2sgdGhlaXIgZGlydGluZXNzXG5cdFx0XHRcdFx0Ly8gaW5zdGVhZCBvZiBqdXN0IHVwZGF0aW5nIHRoZSBlZmZlY3RzIC0gdGhpcyB3YXkgd2UgYXZvaWQgb3ZlcmZpcmluZy5cblx0XHRcdFx0XHRpZiAoKGVmZmVjdC5mICYgQ0xFQU4pICE9PSAwKSB7XG5cdFx0XHRcdFx0XHRzZXRfc2lnbmFsX3N0YXR1cyhlZmZlY3QsIE1BWUJFX0RJUlRZKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKGNoZWNrX2RpcnRpbmVzcyhlZmZlY3QpKSB7XG5cdFx0XHRcdFx0XHR1cGRhdGVfZWZmZWN0KGVmZmVjdCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGZpbmFsbHkge1xuXHRcdFx0XHRzZXRfaXNfZmx1c2hpbmdfZWZmZWN0KHByZXZpb3VzbHlfZmx1c2hpbmdfZWZmZWN0KTtcblx0XHRcdH1cblx0XHRcdGluc3BlY3RfZWZmZWN0cy5jbGVhcigpO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiB2YWx1ZTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1ZhbHVlfSBzaWduYWxcbiAqIEBwYXJhbSB7bnVtYmVyfSBzdGF0dXMgc2hvdWxkIGJlIERJUlRZIG9yIE1BWUJFX0RJUlRZXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gbWFya19yZWFjdGlvbnMoc2lnbmFsLCBzdGF0dXMpIHtcblx0dmFyIHJlYWN0aW9ucyA9IHNpZ25hbC5yZWFjdGlvbnM7XG5cdGlmIChyZWFjdGlvbnMgPT09IG51bGwpIHJldHVybjtcblxuXHR2YXIgcnVuZXMgPSBpc19ydW5lcygpO1xuXHR2YXIgbGVuZ3RoID0gcmVhY3Rpb25zLmxlbmd0aDtcblxuXHRmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIHJlYWN0aW9uID0gcmVhY3Rpb25zW2ldO1xuXHRcdHZhciBmbGFncyA9IHJlYWN0aW9uLmY7XG5cblx0XHQvLyBTa2lwIGFueSBlZmZlY3RzIHRoYXQgYXJlIGFscmVhZHkgZGlydHlcblx0XHRpZiAoKGZsYWdzICYgRElSVFkpICE9PSAwKSBjb250aW51ZTtcblxuXHRcdC8vIEluIGxlZ2FjeSBtb2RlLCBza2lwIHRoZSBjdXJyZW50IGVmZmVjdCB0byBwcmV2ZW50IGluZmluaXRlIGxvb3BzXG5cdFx0aWYgKCFydW5lcyAmJiByZWFjdGlvbiA9PT0gYWN0aXZlX2VmZmVjdCkgY29udGludWU7XG5cblx0XHQvLyBJbnNwZWN0IGVmZmVjdHMgbmVlZCB0byBydW4gaW1tZWRpYXRlbHksIHNvIHRoYXQgdGhlIHN0YWNrIHRyYWNlIG1ha2VzIHNlbnNlXG5cdFx0aWYgKERFViAmJiAoZmxhZ3MgJiBJTlNQRUNUX0VGRkVDVCkgIT09IDApIHtcblx0XHRcdGluc3BlY3RfZWZmZWN0cy5hZGQocmVhY3Rpb24pO1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0c2V0X3NpZ25hbF9zdGF0dXMocmVhY3Rpb24sIHN0YXR1cyk7XG5cblx0XHQvLyBJZiB0aGUgc2lnbmFsIGEpIHdhcyBwcmV2aW91c2x5IGNsZWFuIG9yIGIpIGlzIGFuIHVub3duZWQgZGVyaXZlZCwgdGhlbiBtYXJrIGl0XG5cdFx0aWYgKChmbGFncyAmIChDTEVBTiB8IFVOT1dORUQpKSAhPT0gMCkge1xuXHRcdFx0aWYgKChmbGFncyAmIERFUklWRUQpICE9PSAwKSB7XG5cdFx0XHRcdG1hcmtfcmVhY3Rpb25zKC8qKiBAdHlwZSB7RGVyaXZlZH0gKi8gKHJlYWN0aW9uKSwgTUFZQkVfRElSVFkpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0c2NoZWR1bGVfZWZmZWN0KC8qKiBAdHlwZSB7RWZmZWN0fSAqLyAocmVhY3Rpb24pKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn1cbiIsIi8qKiBAaW1wb3J0IHsgUHJveHlNZXRhZGF0YSwgUHJveHlTdGF0ZU9iamVjdCwgU291cmNlIH0gZnJvbSAnI2NsaWVudCcgKi9cbmltcG9ydCB7IERFViB9IGZyb20gJ2VzbS1lbnYnO1xuaW1wb3J0IHsgZ2V0LCBjb21wb25lbnRfY29udGV4dCwgYWN0aXZlX2VmZmVjdCB9IGZyb20gJy4vcnVudGltZS5qcyc7XG5pbXBvcnQge1xuXHRhcnJheV9wcm90b3R5cGUsXG5cdGdldF9kZXNjcmlwdG9yLFxuXHRnZXRfcHJvdG90eXBlX29mLFxuXHRpc19hcnJheSxcblx0b2JqZWN0X3Byb3RvdHlwZVxufSBmcm9tICcuLi9zaGFyZWQvdXRpbHMuanMnO1xuaW1wb3J0IHsgY2hlY2tfb3duZXJzaGlwLCB3aWRlbl9vd25lcnNoaXAgfSBmcm9tICcuL2Rldi9vd25lcnNoaXAuanMnO1xuaW1wb3J0IHsgc291cmNlLCBzZXQgfSBmcm9tICcuL3JlYWN0aXZpdHkvc291cmNlcy5qcyc7XG5pbXBvcnQgeyBTVEFURV9TWU1CT0wsIFNUQVRFX1NZTUJPTF9NRVRBREFUQSB9IGZyb20gJy4vY29uc3RhbnRzLmpzJztcbmltcG9ydCB7IFVOSU5JVElBTElaRUQgfSBmcm9tICcuLi8uLi9jb25zdGFudHMuanMnO1xuaW1wb3J0ICogYXMgZSBmcm9tICcuL2Vycm9ycy5qcyc7XG5pbXBvcnQgeyBnZXRfc3RhY2sgfSBmcm9tICcuL2Rldi90cmFjaW5nLmpzJztcbmltcG9ydCB7IHRyYWNpbmdfbW9kZV9mbGFnIH0gZnJvbSAnLi4vZmxhZ3MvaW5kZXguanMnO1xuXG4vKipcbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAcGFyYW0ge1R9IHZhbHVlXG4gKiBAcGFyYW0ge1Byb3h5TWV0YWRhdGEgfCBudWxsfSBbcGFyZW50XVxuICogQHBhcmFtIHtTb3VyY2U8VD59IFtwcmV2XSBkZXYgbW9kZSBvbmx5XG4gKiBAcmV0dXJucyB7VH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByb3h5KHZhbHVlLCBwYXJlbnQgPSBudWxsLCBwcmV2KSB7XG5cdC8qKiBAdHlwZSB7RXJyb3IgfCBudWxsfSAqL1xuXHR2YXIgc3RhY2sgPSBudWxsO1xuXHRpZiAoREVWICYmIHRyYWNpbmdfbW9kZV9mbGFnKSB7XG5cdFx0c3RhY2sgPSBnZXRfc3RhY2soJ0NyZWF0ZWRBdCcpO1xuXHR9XG5cdC8vIGlmIG5vbi1wcm94eWFibGUsIG9yIGlzIGFscmVhZHkgYSBwcm94eSwgcmV0dXJuIGB2YWx1ZWBcblx0aWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcgfHwgdmFsdWUgPT09IG51bGwgfHwgU1RBVEVfU1lNQk9MIGluIHZhbHVlKSB7XG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9XG5cblx0Y29uc3QgcHJvdG90eXBlID0gZ2V0X3Byb3RvdHlwZV9vZih2YWx1ZSk7XG5cblx0aWYgKHByb3RvdHlwZSAhPT0gb2JqZWN0X3Byb3RvdHlwZSAmJiBwcm90b3R5cGUgIT09IGFycmF5X3Byb3RvdHlwZSkge1xuXHRcdHJldHVybiB2YWx1ZTtcblx0fVxuXG5cdC8qKiBAdHlwZSB7TWFwPGFueSwgU291cmNlPGFueT4+fSAqL1xuXHR2YXIgc291cmNlcyA9IG5ldyBNYXAoKTtcblx0dmFyIGlzX3Byb3hpZWRfYXJyYXkgPSBpc19hcnJheSh2YWx1ZSk7XG5cdHZhciB2ZXJzaW9uID0gc291cmNlKDApO1xuXG5cdGlmIChpc19wcm94aWVkX2FycmF5KSB7XG5cdFx0Ly8gV2UgbmVlZCB0byBjcmVhdGUgdGhlIGxlbmd0aCBzb3VyY2UgZWFnZXJseSB0byBlbnN1cmUgdGhhdFxuXHRcdC8vIG11dGF0aW9ucyB0byB0aGUgYXJyYXkgYXJlIHByb3Blcmx5IHN5bmNlZCB3aXRoIG91ciBwcm94eVxuXHRcdHNvdXJjZXMuc2V0KCdsZW5ndGgnLCBzb3VyY2UoLyoqIEB0eXBlIHthbnlbXX0gKi8gKHZhbHVlKS5sZW5ndGgsIHN0YWNrKSk7XG5cdH1cblxuXHQvKiogQHR5cGUge1Byb3h5TWV0YWRhdGF9ICovXG5cdHZhciBtZXRhZGF0YTtcblxuXHRpZiAoREVWKSB7XG5cdFx0bWV0YWRhdGEgPSB7XG5cdFx0XHRwYXJlbnQsXG5cdFx0XHRvd25lcnM6IG51bGxcblx0XHR9O1xuXG5cdFx0aWYgKHByZXYpIHtcblx0XHRcdC8vIFJldXNlIG93bmVycyBmcm9tIHByZXZpb3VzIHN0YXRlOyBuZWNlc3NhcnkgYmVjYXVzZSByZWFzc2lnbm1lbnQgaXMgbm90IGd1YXJhbnRlZWQgdG8gaGF2ZSBjb3JyZWN0IGNvbXBvbmVudCBjb250ZXh0LlxuXHRcdFx0Ly8gSWYgbm8gcHJldmlvdXMgcHJveHkgZXhpc3RzIHdlIHBsYXkgaXQgc2FmZSBhbmQgYXNzdW1lIG93bmVybGVzcyBzdGF0ZVxuXHRcdFx0Ly8gQHRzLWV4cGVjdC1lcnJvclxuXHRcdFx0Y29uc3QgcHJldl9vd25lcnMgPSBwcmV2LnY/LltTVEFURV9TWU1CT0xfTUVUQURBVEFdPy5vd25lcnM7XG5cdFx0XHRtZXRhZGF0YS5vd25lcnMgPSBwcmV2X293bmVycyA/IG5ldyBTZXQocHJldl9vd25lcnMpIDogbnVsbDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWV0YWRhdGEub3duZXJzID1cblx0XHRcdFx0cGFyZW50ID09PSBudWxsXG5cdFx0XHRcdFx0PyBjb21wb25lbnRfY29udGV4dCAhPT0gbnVsbFxuXHRcdFx0XHRcdFx0PyBuZXcgU2V0KFtjb21wb25lbnRfY29udGV4dC5mdW5jdGlvbl0pXG5cdFx0XHRcdFx0XHQ6IG51bGxcblx0XHRcdFx0XHQ6IG5ldyBTZXQoKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbmV3IFByb3h5KC8qKiBAdHlwZSB7YW55fSAqLyAodmFsdWUpLCB7XG5cdFx0ZGVmaW5lUHJvcGVydHkoXywgcHJvcCwgZGVzY3JpcHRvcikge1xuXHRcdFx0aWYgKFxuXHRcdFx0XHQhKCd2YWx1ZScgaW4gZGVzY3JpcHRvcikgfHxcblx0XHRcdFx0ZGVzY3JpcHRvci5jb25maWd1cmFibGUgPT09IGZhbHNlIHx8XG5cdFx0XHRcdGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9PT0gZmFsc2UgfHxcblx0XHRcdFx0ZGVzY3JpcHRvci53cml0YWJsZSA9PT0gZmFsc2Vcblx0XHRcdCkge1xuXHRcdFx0XHQvLyB3ZSBkaXNhbGxvdyBub24tYmFzaWMgZGVzY3JpcHRvcnMsIGJlY2F1c2UgdW5sZXNzIHRoZXkgYXJlIGFwcGxpZWQgdG8gdGhlXG5cdFx0XHRcdC8vIHRhcmdldCBvYmplY3Qg4oCUIHdoaWNoIHdlIGF2b2lkLCBzbyB0aGF0IHN0YXRlIGNhbiBiZSBmb3JrZWQg4oCUIHdlIHdpbGwgcnVuXG5cdFx0XHRcdC8vIGFmb3VsIG9mIHRoZSB2YXJpb3VzIGludmFyaWFudHNcblx0XHRcdFx0Ly8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvUHJveHkvUHJveHkvZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yI2ludmFyaWFudHNcblx0XHRcdFx0ZS5zdGF0ZV9kZXNjcmlwdG9yc19maXhlZCgpO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgcyA9IHNvdXJjZXMuZ2V0KHByb3ApO1xuXG5cdFx0XHRpZiAocyA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdHMgPSBzb3VyY2UoZGVzY3JpcHRvci52YWx1ZSwgc3RhY2spO1xuXHRcdFx0XHRzb3VyY2VzLnNldChwcm9wLCBzKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHNldChzLCBwcm94eShkZXNjcmlwdG9yLnZhbHVlLCBtZXRhZGF0YSkpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0ZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBwcm9wKSB7XG5cdFx0XHR2YXIgcyA9IHNvdXJjZXMuZ2V0KHByb3ApO1xuXG5cdFx0XHRpZiAocyA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdGlmIChwcm9wIGluIHRhcmdldCkge1xuXHRcdFx0XHRcdHNvdXJjZXMuc2V0KHByb3AsIHNvdXJjZShVTklOSVRJQUxJWkVELCBzdGFjaykpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyBXaGVuIHdvcmtpbmcgd2l0aCBhcnJheXMsIHdlIG5lZWQgdG8gYWxzbyBlbnN1cmUgd2UgdXBkYXRlIHRoZSBsZW5ndGggd2hlbiByZW1vdmluZ1xuXHRcdFx0XHQvLyBhbiBpbmRleGVkIHByb3BlcnR5XG5cdFx0XHRcdGlmIChpc19wcm94aWVkX2FycmF5ICYmIHR5cGVvZiBwcm9wID09PSAnc3RyaW5nJykge1xuXHRcdFx0XHRcdHZhciBscyA9IC8qKiBAdHlwZSB7U291cmNlPG51bWJlcj59ICovIChzb3VyY2VzLmdldCgnbGVuZ3RoJykpO1xuXHRcdFx0XHRcdHZhciBuID0gTnVtYmVyKHByb3ApO1xuXG5cdFx0XHRcdFx0aWYgKE51bWJlci5pc0ludGVnZXIobikgJiYgbiA8IGxzLnYpIHtcblx0XHRcdFx0XHRcdHNldChscywgbik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHNldChzLCBVTklOSVRJQUxJWkVEKTtcblx0XHRcdFx0dXBkYXRlX3ZlcnNpb24odmVyc2lvbik7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0sXG5cblx0XHRnZXQodGFyZ2V0LCBwcm9wLCByZWNlaXZlcikge1xuXHRcdFx0aWYgKERFViAmJiBwcm9wID09PSBTVEFURV9TWU1CT0xfTUVUQURBVEEpIHtcblx0XHRcdFx0cmV0dXJuIG1ldGFkYXRhO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAocHJvcCA9PT0gU1RBVEVfU1lNQk9MKSB7XG5cdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdH1cblxuXHRcdFx0dmFyIHMgPSBzb3VyY2VzLmdldChwcm9wKTtcblx0XHRcdHZhciBleGlzdHMgPSBwcm9wIGluIHRhcmdldDtcblxuXHRcdFx0Ly8gY3JlYXRlIGEgc291cmNlLCBidXQgb25seSBpZiBpdCdzIGFuIG93biBwcm9wZXJ0eSBhbmQgbm90IGEgcHJvdG90eXBlIHByb3BlcnR5XG5cdFx0XHRpZiAocyA9PT0gdW5kZWZpbmVkICYmICghZXhpc3RzIHx8IGdldF9kZXNjcmlwdG9yKHRhcmdldCwgcHJvcCk/LndyaXRhYmxlKSkge1xuXHRcdFx0XHRzID0gc291cmNlKHByb3h5KGV4aXN0cyA/IHRhcmdldFtwcm9wXSA6IFVOSU5JVElBTElaRUQsIG1ldGFkYXRhKSwgc3RhY2spO1xuXHRcdFx0XHRzb3VyY2VzLnNldChwcm9wLCBzKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHMgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHR2YXIgdiA9IGdldChzKTtcblxuXHRcdFx0XHQvLyBJbiBjYXNlIG9mIHNvbWV0aGluZyBsaWtlIGBmb28gPSBiYXIubWFwKC4uLilgLCBmb28gd291bGQgaGF2ZSBvd25lcnNoaXBcblx0XHRcdFx0Ly8gb2YgdGhlIGFycmF5IGl0c2VsZiwgd2hpbGUgdGhlIGluZGl2aWR1YWwgaXRlbXMgd291bGQgaGF2ZSBvd25lcnNoaXBcblx0XHRcdFx0Ly8gb2YgdGhlIGNvbXBvbmVudCB0aGF0IGNyZWF0ZWQgYmFyLiBUaGF0IG1lYW5zIGlmIHdlIGxhdGVyIGRvIGBmb29bMF0uYmF6ID0gNDJgLFxuXHRcdFx0XHQvLyB3ZSBjb3VsZCBnZXQgYSBmYWxzZS1wb3NpdGl2ZSBvd25lcnNoaXAgdmlvbGF0aW9uLCBzaW5jZSB0aGUgdHdvIHByb3hpZXNcblx0XHRcdFx0Ly8gYXJlIG5vdCBjb25uZWN0ZWQgdG8gZWFjaCBvdGhlciB2aWEgdGhlIHBhcmVudCBtZXRhZGF0YSByZWxhdGlvbnNoaXAuXG5cdFx0XHRcdC8vIEZvciB0aGlzIHJlYXNvbiwgd2UgbmVlZCB0byB3aWRlbiB0aGUgb3duZXJzaGlwIG9mIHRoZSBjaGlsZHJlblxuXHRcdFx0XHQvLyB1cG9uIGFjY2VzcyB3aGVuIHdlIGRldGVjdCB0aGV5IGFyZSBub3QgY29ubmVjdGVkLlxuXHRcdFx0XHRpZiAoREVWKSB7XG5cdFx0XHRcdFx0LyoqIEB0eXBlIHtQcm94eU1ldGFkYXRhIHwgdW5kZWZpbmVkfSAqL1xuXHRcdFx0XHRcdHZhciBwcm9wX21ldGFkYXRhID0gdj8uW1NUQVRFX1NZTUJPTF9NRVRBREFUQV07XG5cdFx0XHRcdFx0aWYgKHByb3BfbWV0YWRhdGEgJiYgcHJvcF9tZXRhZGF0YT8ucGFyZW50ICE9PSBtZXRhZGF0YSkge1xuXHRcdFx0XHRcdFx0d2lkZW5fb3duZXJzaGlwKG1ldGFkYXRhLCBwcm9wX21ldGFkYXRhKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdiA9PT0gVU5JTklUSUFMSVpFRCA/IHVuZGVmaW5lZCA6IHY7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBSZWZsZWN0LmdldCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKTtcblx0XHR9LFxuXG5cdFx0Z2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgcHJvcCkge1xuXHRcdFx0dmFyIGRlc2NyaXB0b3IgPSBSZWZsZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIHByb3ApO1xuXG5cdFx0XHRpZiAoZGVzY3JpcHRvciAmJiAndmFsdWUnIGluIGRlc2NyaXB0b3IpIHtcblx0XHRcdFx0dmFyIHMgPSBzb3VyY2VzLmdldChwcm9wKTtcblx0XHRcdFx0aWYgKHMpIGRlc2NyaXB0b3IudmFsdWUgPSBnZXQocyk7XG5cdFx0XHR9IGVsc2UgaWYgKGRlc2NyaXB0b3IgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHR2YXIgc291cmNlID0gc291cmNlcy5nZXQocHJvcCk7XG5cdFx0XHRcdHZhciB2YWx1ZSA9IHNvdXJjZT8udjtcblxuXHRcdFx0XHRpZiAoc291cmNlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgIT09IFVOSU5JVElBTElaRUQpIHtcblx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0XHRcdHZhbHVlLFxuXHRcdFx0XHRcdFx0d3JpdGFibGU6IHRydWVcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBkZXNjcmlwdG9yO1xuXHRcdH0sXG5cblx0XHRoYXModGFyZ2V0LCBwcm9wKSB7XG5cdFx0XHRpZiAoREVWICYmIHByb3AgPT09IFNUQVRFX1NZTUJPTF9NRVRBREFUQSkge1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHByb3AgPT09IFNUQVRFX1NZTUJPTCkge1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblxuXHRcdFx0dmFyIHMgPSBzb3VyY2VzLmdldChwcm9wKTtcblx0XHRcdHZhciBoYXMgPSAocyAhPT0gdW5kZWZpbmVkICYmIHMudiAhPT0gVU5JTklUSUFMSVpFRCkgfHwgUmVmbGVjdC5oYXModGFyZ2V0LCBwcm9wKTtcblxuXHRcdFx0aWYgKFxuXHRcdFx0XHRzICE9PSB1bmRlZmluZWQgfHxcblx0XHRcdFx0KGFjdGl2ZV9lZmZlY3QgIT09IG51bGwgJiYgKCFoYXMgfHwgZ2V0X2Rlc2NyaXB0b3IodGFyZ2V0LCBwcm9wKT8ud3JpdGFibGUpKVxuXHRcdFx0KSB7XG5cdFx0XHRcdGlmIChzID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRzID0gc291cmNlKGhhcyA/IHByb3h5KHRhcmdldFtwcm9wXSwgbWV0YWRhdGEpIDogVU5JTklUSUFMSVpFRCwgc3RhY2spO1xuXHRcdFx0XHRcdHNvdXJjZXMuc2V0KHByb3AsIHMpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dmFyIHZhbHVlID0gZ2V0KHMpO1xuXHRcdFx0XHRpZiAodmFsdWUgPT09IFVOSU5JVElBTElaRUQpIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGhhcztcblx0XHR9LFxuXG5cdFx0c2V0KHRhcmdldCwgcHJvcCwgdmFsdWUsIHJlY2VpdmVyKSB7XG5cdFx0XHR2YXIgcyA9IHNvdXJjZXMuZ2V0KHByb3ApO1xuXHRcdFx0dmFyIGhhcyA9IHByb3AgaW4gdGFyZ2V0O1xuXG5cdFx0XHQvLyB2YXJpYWJsZS5sZW5ndGggPSB2YWx1ZSAtPiBjbGVhciBhbGwgc2lnbmFscyB3aXRoIGluZGV4ID49IHZhbHVlXG5cdFx0XHRpZiAoaXNfcHJveGllZF9hcnJheSAmJiBwcm9wID09PSAnbGVuZ3RoJykge1xuXHRcdFx0XHRmb3IgKHZhciBpID0gdmFsdWU7IGkgPCAvKiogQHR5cGUge1NvdXJjZTxudW1iZXI+fSAqLyAocykudjsgaSArPSAxKSB7XG5cdFx0XHRcdFx0dmFyIG90aGVyX3MgPSBzb3VyY2VzLmdldChpICsgJycpO1xuXHRcdFx0XHRcdGlmIChvdGhlcl9zICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRcdHNldChvdGhlcl9zLCBVTklOSVRJQUxJWkVEKTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKGkgaW4gdGFyZ2V0KSB7XG5cdFx0XHRcdFx0XHQvLyBJZiB0aGUgaXRlbSBleGlzdHMgaW4gdGhlIG9yaWdpbmFsLCB3ZSBuZWVkIHRvIGNyZWF0ZSBhIHVuaW5pdGlhbGl6ZWQgc291cmNlLFxuXHRcdFx0XHRcdFx0Ly8gZWxzZSBhIGxhdGVyIHJlYWQgb2YgdGhlIHByb3BlcnR5IHdvdWxkIHJlc3VsdCBpbiBhIHNvdXJjZSBiZWluZyBjcmVhdGVkIHdpdGhcblx0XHRcdFx0XHRcdC8vIHRoZSB2YWx1ZSBvZiB0aGUgb3JpZ2luYWwgaXRlbSBhdCB0aGF0IGluZGV4LlxuXHRcdFx0XHRcdFx0b3RoZXJfcyA9IHNvdXJjZShVTklOSVRJQUxJWkVELCBzdGFjayk7XG5cdFx0XHRcdFx0XHRzb3VyY2VzLnNldChpICsgJycsIG90aGVyX3MpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiB3ZSBoYXZlbid0IHlldCBjcmVhdGVkIGEgc291cmNlIGZvciB0aGlzIHByb3BlcnR5LCB3ZSBuZWVkIHRvIGVuc3VyZVxuXHRcdFx0Ly8gd2UgZG8gc28gb3RoZXJ3aXNlIGlmIHdlIHJlYWQgaXQgbGF0ZXIsIHRoZW4gdGhlIHdyaXRlIHdvbid0IGJlIHRyYWNrZWQgYW5kXG5cdFx0XHQvLyB0aGUgaGV1cmlzdGljcyBvZiBlZmZlY3RzIHdpbGwgYmUgZGlmZmVyZW50IHZzIGlmIHdlIGhhZCByZWFkIHRoZSBwcm94aWVkXG5cdFx0XHQvLyBvYmplY3QgcHJvcGVydHkgYmVmb3JlIHdyaXRpbmcgdG8gdGhhdCBwcm9wZXJ0eS5cblx0XHRcdGlmIChzID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0aWYgKCFoYXMgfHwgZ2V0X2Rlc2NyaXB0b3IodGFyZ2V0LCBwcm9wKT8ud3JpdGFibGUpIHtcblx0XHRcdFx0XHRzID0gc291cmNlKHVuZGVmaW5lZCwgc3RhY2spO1xuXHRcdFx0XHRcdHNldChzLCBwcm94eSh2YWx1ZSwgbWV0YWRhdGEpKTtcblx0XHRcdFx0XHRzb3VyY2VzLnNldChwcm9wLCBzKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aGFzID0gcy52ICE9PSBVTklOSVRJQUxJWkVEO1xuXHRcdFx0XHRzZXQocywgcHJveHkodmFsdWUsIG1ldGFkYXRhKSk7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChERVYpIHtcblx0XHRcdFx0LyoqIEB0eXBlIHtQcm94eU1ldGFkYXRhIHwgdW5kZWZpbmVkfSAqL1xuXHRcdFx0XHR2YXIgcHJvcF9tZXRhZGF0YSA9IHZhbHVlPy5bU1RBVEVfU1lNQk9MX01FVEFEQVRBXTtcblx0XHRcdFx0aWYgKHByb3BfbWV0YWRhdGEgJiYgcHJvcF9tZXRhZGF0YT8ucGFyZW50ICE9PSBtZXRhZGF0YSkge1xuXHRcdFx0XHRcdHdpZGVuX293bmVyc2hpcChtZXRhZGF0YSwgcHJvcF9tZXRhZGF0YSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Y2hlY2tfb3duZXJzaGlwKG1ldGFkYXRhKTtcblx0XHRcdH1cblxuXHRcdFx0dmFyIGRlc2NyaXB0b3IgPSBSZWZsZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIHByb3ApO1xuXG5cdFx0XHQvLyBTZXQgdGhlIG5ldyB2YWx1ZSBiZWZvcmUgdXBkYXRpbmcgYW55IHNpZ25hbHMgc28gdGhhdCBhbnkgbGlzdGVuZXJzIGdldCB0aGUgbmV3IHZhbHVlXG5cdFx0XHRpZiAoZGVzY3JpcHRvcj8uc2V0KSB7XG5cdFx0XHRcdGRlc2NyaXB0b3Iuc2V0LmNhbGwocmVjZWl2ZXIsIHZhbHVlKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCFoYXMpIHtcblx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBtdXRhdGVkIGFuIGFycmF5IGRpcmVjdGx5LCB3ZSBtaWdodCBuZWVkIHRvXG5cdFx0XHRcdC8vIHNpZ25hbCB0aGF0IGxlbmd0aCBoYXMgYWxzbyBjaGFuZ2VkLiBEbyBpdCBiZWZvcmUgdXBkYXRpbmcgbWV0YWRhdGFcblx0XHRcdFx0Ly8gdG8gZW5zdXJlIHRoYXQgaXRlcmF0aW5nIG92ZXIgdGhlIGFycmF5IGFzIGEgcmVzdWx0IG9mIGEgbWV0YWRhdGEgdXBkYXRlXG5cdFx0XHRcdC8vIHdpbGwgbm90IGNhdXNlIHRoZSBsZW5ndGggdG8gYmUgb3V0IG9mIHN5bmMuXG5cdFx0XHRcdGlmIChpc19wcm94aWVkX2FycmF5ICYmIHR5cGVvZiBwcm9wID09PSAnc3RyaW5nJykge1xuXHRcdFx0XHRcdHZhciBscyA9IC8qKiBAdHlwZSB7U291cmNlPG51bWJlcj59ICovIChzb3VyY2VzLmdldCgnbGVuZ3RoJykpO1xuXHRcdFx0XHRcdHZhciBuID0gTnVtYmVyKHByb3ApO1xuXG5cdFx0XHRcdFx0aWYgKE51bWJlci5pc0ludGVnZXIobikgJiYgbiA+PSBscy52KSB7XG5cdFx0XHRcdFx0XHRzZXQobHMsIG4gKyAxKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR1cGRhdGVfdmVyc2lvbih2ZXJzaW9uKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSxcblxuXHRcdG93bktleXModGFyZ2V0KSB7XG5cdFx0XHRnZXQodmVyc2lvbik7XG5cblx0XHRcdHZhciBvd25fa2V5cyA9IFJlZmxlY3Qub3duS2V5cyh0YXJnZXQpLmZpbHRlcigoa2V5KSA9PiB7XG5cdFx0XHRcdHZhciBzb3VyY2UgPSBzb3VyY2VzLmdldChrZXkpO1xuXHRcdFx0XHRyZXR1cm4gc291cmNlID09PSB1bmRlZmluZWQgfHwgc291cmNlLnYgIT09IFVOSU5JVElBTElaRUQ7XG5cdFx0XHR9KTtcblxuXHRcdFx0Zm9yICh2YXIgW2tleSwgc291cmNlXSBvZiBzb3VyY2VzKSB7XG5cdFx0XHRcdGlmIChzb3VyY2UudiAhPT0gVU5JTklUSUFMSVpFRCAmJiAhKGtleSBpbiB0YXJnZXQpKSB7XG5cdFx0XHRcdFx0b3duX2tleXMucHVzaChrZXkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBvd25fa2V5cztcblx0XHR9LFxuXG5cdFx0c2V0UHJvdG90eXBlT2YoKSB7XG5cdFx0XHRlLnN0YXRlX3Byb3RvdHlwZV9maXhlZCgpO1xuXHRcdH1cblx0fSk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtTb3VyY2U8bnVtYmVyPn0gc2lnbmFsXG4gKiBAcGFyYW0gezEgfCAtMX0gW2RdXG4gKi9cbmZ1bmN0aW9uIHVwZGF0ZV92ZXJzaW9uKHNpZ25hbCwgZCA9IDEpIHtcblx0c2V0KHNpZ25hbCwgc2lnbmFsLnYgKyBkKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge2FueX0gdmFsdWVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldF9wcm94aWVkX3ZhbHVlKHZhbHVlKSB7XG5cdGlmICh2YWx1ZSAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIFNUQVRFX1NZTUJPTCBpbiB2YWx1ZSkge1xuXHRcdHJldHVybiB2YWx1ZVtTVEFURV9TWU1CT0xdO1xuXHR9XG5cblx0cmV0dXJuIHZhbHVlO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7YW55fSBhXG4gKiBAcGFyYW0ge2FueX0gYlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXMoYSwgYikge1xuXHRyZXR1cm4gT2JqZWN0LmlzKGdldF9wcm94aWVkX3ZhbHVlKGEpLCBnZXRfcHJveGllZF92YWx1ZShiKSk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmYWxzZTtcbiIsIi8qKiBAaW1wb3J0IHsgVGVtcGxhdGVOb2RlIH0gZnJvbSAnI2NsaWVudCcgKi9cbmltcG9ydCB7IGh5ZHJhdGVfbm9kZSwgaHlkcmF0aW5nLCBzZXRfaHlkcmF0ZV9ub2RlIH0gZnJvbSAnLi9oeWRyYXRpb24uanMnO1xuaW1wb3J0IHsgREVWIH0gZnJvbSAnZXNtLWVudic7XG5pbXBvcnQgeyBpbml0X2FycmF5X3Byb3RvdHlwZV93YXJuaW5ncyB9IGZyb20gJy4uL2Rldi9lcXVhbGl0eS5qcyc7XG5pbXBvcnQgeyBnZXRfZGVzY3JpcHRvciB9IGZyb20gJy4uLy4uL3NoYXJlZC91dGlscy5qcyc7XG5cbi8vIGV4cG9ydCB0aGVzZSBmb3IgcmVmZXJlbmNlIGluIHRoZSBjb21waWxlZCBjb2RlLCBtYWtpbmcgZ2xvYmFsIG5hbWUgZGVkdXBsaWNhdGlvbiB1bm5lY2Vzc2FyeVxuLyoqIEB0eXBlIHtXaW5kb3d9ICovXG5leHBvcnQgdmFyICR3aW5kb3c7XG5cbi8qKiBAdHlwZSB7RG9jdW1lbnR9ICovXG5leHBvcnQgdmFyICRkb2N1bWVudDtcblxuLyoqIEB0eXBlIHsoKSA9PiBOb2RlIHwgbnVsbH0gKi9cbnZhciBmaXJzdF9jaGlsZF9nZXR0ZXI7XG4vKiogQHR5cGUgeygpID0+IE5vZGUgfCBudWxsfSAqL1xudmFyIG5leHRfc2libGluZ19nZXR0ZXI7XG5cbi8qKlxuICogSW5pdGlhbGl6ZSB0aGVzZSBsYXppbHkgdG8gYXZvaWQgaXNzdWVzIHdoZW4gdXNpbmcgdGhlIHJ1bnRpbWUgaW4gYSBzZXJ2ZXIgY29udGV4dFxuICogd2hlcmUgdGhlc2UgZ2xvYmFscyBhcmUgbm90IGF2YWlsYWJsZSB3aGlsZSBhdm9pZGluZyBhIHNlcGFyYXRlIHNlcnZlciBlbnRyeSBwb2ludFxuICovXG5leHBvcnQgZnVuY3Rpb24gaW5pdF9vcGVyYXRpb25zKCkge1xuXHRpZiAoJHdpbmRvdyAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0JHdpbmRvdyA9IHdpbmRvdztcblx0JGRvY3VtZW50ID0gZG9jdW1lbnQ7XG5cblx0dmFyIGVsZW1lbnRfcHJvdG90eXBlID0gRWxlbWVudC5wcm90b3R5cGU7XG5cdHZhciBub2RlX3Byb3RvdHlwZSA9IE5vZGUucHJvdG90eXBlO1xuXG5cdC8vIEB0cy1pZ25vcmVcblx0Zmlyc3RfY2hpbGRfZ2V0dGVyID0gZ2V0X2Rlc2NyaXB0b3Iobm9kZV9wcm90b3R5cGUsICdmaXJzdENoaWxkJykuZ2V0O1xuXHQvLyBAdHMtaWdub3JlXG5cdG5leHRfc2libGluZ19nZXR0ZXIgPSBnZXRfZGVzY3JpcHRvcihub2RlX3Byb3RvdHlwZSwgJ25leHRTaWJsaW5nJykuZ2V0O1xuXG5cdC8vIHRoZSBmb2xsb3dpbmcgYXNzaWdubWVudHMgaW1wcm92ZSBwZXJmIG9mIGxvb2t1cHMgb24gRE9NIG5vZGVzXG5cdC8vIEB0cy1leHBlY3QtZXJyb3Jcblx0ZWxlbWVudF9wcm90b3R5cGUuX19jbGljayA9IHVuZGVmaW5lZDtcblx0Ly8gQHRzLWV4cGVjdC1lcnJvclxuXHRlbGVtZW50X3Byb3RvdHlwZS5fX2NsYXNzTmFtZSA9ICcnO1xuXHQvLyBAdHMtZXhwZWN0LWVycm9yXG5cdGVsZW1lbnRfcHJvdG90eXBlLl9fYXR0cmlidXRlcyA9IG51bGw7XG5cdC8vIEB0cy1leHBlY3QtZXJyb3Jcblx0ZWxlbWVudF9wcm90b3R5cGUuX19zdHlsZXMgPSBudWxsO1xuXHQvLyBAdHMtZXhwZWN0LWVycm9yXG5cdGVsZW1lbnRfcHJvdG90eXBlLl9fZSA9IHVuZGVmaW5lZDtcblxuXHQvLyBAdHMtZXhwZWN0LWVycm9yXG5cdFRleHQucHJvdG90eXBlLl9fdCA9IHVuZGVmaW5lZDtcblxuXHRpZiAoREVWKSB7XG5cdFx0Ly8gQHRzLWV4cGVjdC1lcnJvclxuXHRcdGVsZW1lbnRfcHJvdG90eXBlLl9fc3ZlbHRlX21ldGEgPSBudWxsO1xuXG5cdFx0aW5pdF9hcnJheV9wcm90b3R5cGVfd2FybmluZ3MoKTtcblx0fVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHJldHVybnMge1RleHR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVfdGV4dCh2YWx1ZSA9ICcnKSB7XG5cdHJldHVybiBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh2YWx1ZSk7XG59XG5cbi8qKlxuICogQHRlbXBsYXRlIHtOb2RlfSBOXG4gKiBAcGFyYW0ge059IG5vZGVcbiAqIEByZXR1cm5zIHtOb2RlIHwgbnVsbH1cbiAqL1xuLypAX19OT19TSURFX0VGRkVDVFNfXyovXG5leHBvcnQgZnVuY3Rpb24gZ2V0X2ZpcnN0X2NoaWxkKG5vZGUpIHtcblx0cmV0dXJuIGZpcnN0X2NoaWxkX2dldHRlci5jYWxsKG5vZGUpO1xufVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSB7Tm9kZX0gTlxuICogQHBhcmFtIHtOfSBub2RlXG4gKiBAcmV0dXJucyB7Tm9kZSB8IG51bGx9XG4gKi9cbi8qQF9fTk9fU0lERV9FRkZFQ1RTX18qL1xuZXhwb3J0IGZ1bmN0aW9uIGdldF9uZXh0X3NpYmxpbmcobm9kZSkge1xuXHRyZXR1cm4gbmV4dF9zaWJsaW5nX2dldHRlci5jYWxsKG5vZGUpO1xufVxuXG4vKipcbiAqIERvbid0IG1hcmsgdGhpcyBhcyBzaWRlLWVmZmVjdC1mcmVlLCBoeWRyYXRpb24gbmVlZHMgdG8gd2FsayBhbGwgbm9kZXNcbiAqIEB0ZW1wbGF0ZSB7Tm9kZX0gTlxuICogQHBhcmFtIHtOfSBub2RlXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGlzX3RleHRcbiAqIEByZXR1cm5zIHtOb2RlIHwgbnVsbH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNoaWxkKG5vZGUsIGlzX3RleHQpIHtcblx0aWYgKCFoeWRyYXRpbmcpIHtcblx0XHRyZXR1cm4gZ2V0X2ZpcnN0X2NoaWxkKG5vZGUpO1xuXHR9XG5cblx0dmFyIGNoaWxkID0gLyoqIEB0eXBlIHtUZW1wbGF0ZU5vZGV9ICovIChnZXRfZmlyc3RfY2hpbGQoaHlkcmF0ZV9ub2RlKSk7XG5cblx0Ly8gQ2hpbGQgY2FuIGJlIG51bGwgaWYgd2UgaGF2ZSBhbiBlbGVtZW50IHdpdGggYSBzaW5nbGUgY2hpbGQsIGxpa2UgYDxwPnt0ZXh0fTwvcD5gLCB3aGVyZSBgdGV4dGAgaXMgZW1wdHlcblx0aWYgKGNoaWxkID09PSBudWxsKSB7XG5cdFx0Y2hpbGQgPSBoeWRyYXRlX25vZGUuYXBwZW5kQ2hpbGQoY3JlYXRlX3RleHQoKSk7XG5cdH0gZWxzZSBpZiAoaXNfdGV4dCAmJiBjaGlsZC5ub2RlVHlwZSAhPT0gMykge1xuXHRcdHZhciB0ZXh0ID0gY3JlYXRlX3RleHQoKTtcblx0XHRjaGlsZD8uYmVmb3JlKHRleHQpO1xuXHRcdHNldF9oeWRyYXRlX25vZGUodGV4dCk7XG5cdFx0cmV0dXJuIHRleHQ7XG5cdH1cblxuXHRzZXRfaHlkcmF0ZV9ub2RlKGNoaWxkKTtcblx0cmV0dXJuIGNoaWxkO1xufVxuXG4vKipcbiAqIERvbid0IG1hcmsgdGhpcyBhcyBzaWRlLWVmZmVjdC1mcmVlLCBoeWRyYXRpb24gbmVlZHMgdG8gd2FsayBhbGwgbm9kZXNcbiAqIEBwYXJhbSB7RG9jdW1lbnRGcmFnbWVudCB8IFRlbXBsYXRlTm9kZVtdfSBmcmFnbWVudFxuICogQHBhcmFtIHtib29sZWFufSBpc190ZXh0XG4gKiBAcmV0dXJucyB7Tm9kZSB8IG51bGx9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmaXJzdF9jaGlsZChmcmFnbWVudCwgaXNfdGV4dCkge1xuXHRpZiAoIWh5ZHJhdGluZykge1xuXHRcdC8vIHdoZW4gbm90IGh5ZHJhdGluZywgYGZyYWdtZW50YCBpcyBhIGBEb2N1bWVudEZyYWdtZW50YCAodGhlIHJlc3VsdCBvZiBjYWxsaW5nIGBvcGVuX2ZyYWdgKVxuXHRcdHZhciBmaXJzdCA9IC8qKiBAdHlwZSB7RG9jdW1lbnRGcmFnbWVudH0gKi8gKGdldF9maXJzdF9jaGlsZCgvKiogQHR5cGUge05vZGV9ICovIChmcmFnbWVudCkpKTtcblxuXHRcdC8vIFRPRE8gcHJldmVudCB1c2VyIGNvbW1lbnRzIHdpdGggdGhlIGVtcHR5IHN0cmluZyB3aGVuIHByZXNlcnZlQ29tbWVudHMgaXMgdHJ1ZVxuXHRcdGlmIChmaXJzdCBpbnN0YW5jZW9mIENvbW1lbnQgJiYgZmlyc3QuZGF0YSA9PT0gJycpIHJldHVybiBnZXRfbmV4dF9zaWJsaW5nKGZpcnN0KTtcblxuXHRcdHJldHVybiBmaXJzdDtcblx0fVxuXG5cdC8vIGlmIGFuIHtleHByZXNzaW9ufSBpcyBlbXB0eSBkdXJpbmcgU1NSLCB0aGVyZSBtaWdodCBiZSBub1xuXHQvLyB0ZXh0IG5vZGUgdG8gaHlkcmF0ZSDigJQgd2UgbXVzdCB0aGVyZWZvcmUgY3JlYXRlIG9uZVxuXHRpZiAoaXNfdGV4dCAmJiBoeWRyYXRlX25vZGU/Lm5vZGVUeXBlICE9PSAzKSB7XG5cdFx0dmFyIHRleHQgPSBjcmVhdGVfdGV4dCgpO1xuXG5cdFx0aHlkcmF0ZV9ub2RlPy5iZWZvcmUodGV4dCk7XG5cdFx0c2V0X2h5ZHJhdGVfbm9kZSh0ZXh0KTtcblx0XHRyZXR1cm4gdGV4dDtcblx0fVxuXG5cdHJldHVybiBoeWRyYXRlX25vZGU7XG59XG5cbi8qKlxuICogRG9uJ3QgbWFyayB0aGlzIGFzIHNpZGUtZWZmZWN0LWZyZWUsIGh5ZHJhdGlvbiBuZWVkcyB0byB3YWxrIGFsbCBub2Rlc1xuICogQHBhcmFtIHtUZW1wbGF0ZU5vZGV9IG5vZGVcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb3VudFxuICogQHBhcmFtIHtib29sZWFufSBpc190ZXh0XG4gKiBAcmV0dXJucyB7Tm9kZSB8IG51bGx9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzaWJsaW5nKG5vZGUsIGNvdW50ID0gMSwgaXNfdGV4dCA9IGZhbHNlKSB7XG5cdGxldCBuZXh0X3NpYmxpbmcgPSBoeWRyYXRpbmcgPyBoeWRyYXRlX25vZGUgOiBub2RlO1xuXHR2YXIgbGFzdF9zaWJsaW5nO1xuXG5cdHdoaWxlIChjb3VudC0tKSB7XG5cdFx0bGFzdF9zaWJsaW5nID0gbmV4dF9zaWJsaW5nO1xuXHRcdG5leHRfc2libGluZyA9IC8qKiBAdHlwZSB7VGVtcGxhdGVOb2RlfSAqLyAoZ2V0X25leHRfc2libGluZyhuZXh0X3NpYmxpbmcpKTtcblx0fVxuXG5cdGlmICghaHlkcmF0aW5nKSB7XG5cdFx0cmV0dXJuIG5leHRfc2libGluZztcblx0fVxuXG5cdHZhciB0eXBlID0gbmV4dF9zaWJsaW5nPy5ub2RlVHlwZTtcblxuXHQvLyBpZiBhIHNpYmxpbmcge2V4cHJlc3Npb259IGlzIGVtcHR5IGR1cmluZyBTU1IsIHRoZXJlIG1pZ2h0IGJlIG5vXG5cdC8vIHRleHQgbm9kZSB0byBoeWRyYXRlIOKAlCB3ZSBtdXN0IHRoZXJlZm9yZSBjcmVhdGUgb25lXG5cdGlmIChpc190ZXh0ICYmIHR5cGUgIT09IDMpIHtcblx0XHR2YXIgdGV4dCA9IGNyZWF0ZV90ZXh0KCk7XG5cdFx0Ly8gSWYgdGhlIG5leHQgc2libGluZyBpcyBgbnVsbGAgYW5kIHdlJ3JlIGhhbmRsaW5nIHRleHQgdGhlbiBpdCdzIGJlY2F1c2Vcblx0XHQvLyB0aGUgU1NSIGNvbnRlbnQgd2FzIGVtcHR5IGZvciB0aGUgdGV4dCwgc28gd2UgbmVlZCB0byBnZW5lcmF0ZSBhIG5ldyB0ZXh0XG5cdFx0Ly8gbm9kZSBhbmQgaW5zZXJ0IGl0IGFmdGVyIHRoZSBsYXN0IHNpYmxpbmdcblx0XHRpZiAobmV4dF9zaWJsaW5nID09PSBudWxsKSB7XG5cdFx0XHRsYXN0X3NpYmxpbmc/LmFmdGVyKHRleHQpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRuZXh0X3NpYmxpbmcuYmVmb3JlKHRleHQpO1xuXHRcdH1cblx0XHRzZXRfaHlkcmF0ZV9ub2RlKHRleHQpO1xuXHRcdHJldHVybiB0ZXh0O1xuXHR9XG5cblx0c2V0X2h5ZHJhdGVfbm9kZShuZXh0X3NpYmxpbmcpO1xuXHRyZXR1cm4gLyoqIEB0eXBlIHtUZW1wbGF0ZU5vZGV9ICovIChuZXh0X3NpYmxpbmcpO1xufVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSB7Tm9kZX0gTlxuICogQHBhcmFtIHtOfSBub2RlXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNsZWFyX3RleHRfY29udGVudChub2RlKSB7XG5cdG5vZGUudGV4dENvbnRlbnQgPSAnJztcbn1cbiIsIi8qKiBAaW1wb3J0IHsgRGVyaXZlZCwgRWZmZWN0IH0gZnJvbSAnI2NsaWVudCcgKi9cbmltcG9ydCB7IERFViB9IGZyb20gJ2VzbS1lbnYnO1xuaW1wb3J0IHtcblx0Q0xFQU4sXG5cdERFUklWRUQsXG5cdERFU1RST1lFRCxcblx0RElSVFksXG5cdEVGRkVDVF9IQVNfREVSSVZFRCxcblx0TUFZQkVfRElSVFksXG5cdFVOT1dORURcbn0gZnJvbSAnLi4vY29uc3RhbnRzLmpzJztcbmltcG9ydCB7XG5cdGFjdGl2ZV9yZWFjdGlvbixcblx0YWN0aXZlX2VmZmVjdCxcblx0cmVtb3ZlX3JlYWN0aW9ucyxcblx0c2V0X3NpZ25hbF9zdGF0dXMsXG5cdHNraXBfcmVhY3Rpb24sXG5cdHVwZGF0ZV9yZWFjdGlvbixcblx0aW5jcmVtZW50X3ZlcnNpb24sXG5cdHNldF9hY3RpdmVfZWZmZWN0LFxuXHRjb21wb25lbnRfY29udGV4dFxufSBmcm9tICcuLi9ydW50aW1lLmpzJztcbmltcG9ydCB7IGVxdWFscywgc2FmZV9lcXVhbHMgfSBmcm9tICcuL2VxdWFsaXR5LmpzJztcbmltcG9ydCAqIGFzIGUgZnJvbSAnLi4vZXJyb3JzLmpzJztcbmltcG9ydCB7IGRlc3Ryb3lfZWZmZWN0IH0gZnJvbSAnLi9lZmZlY3RzLmpzJztcbmltcG9ydCB7IGluc3BlY3RfZWZmZWN0cywgc2V0X2luc3BlY3RfZWZmZWN0cyB9IGZyb20gJy4vc291cmNlcy5qcyc7XG5pbXBvcnQgeyBnZXRfc3RhY2sgfSBmcm9tICcuLi9kZXYvdHJhY2luZy5qcyc7XG5pbXBvcnQgeyB0cmFjaW5nX21vZGVfZmxhZyB9IGZyb20gJy4uLy4uL2ZsYWdzL2luZGV4LmpzJztcblxuLyoqXG4gKiBAdGVtcGxhdGUgVlxuICogQHBhcmFtIHsoKSA9PiBWfSBmblxuICogQHJldHVybnMge0Rlcml2ZWQ8Vj59XG4gKi9cbi8qI19fTk9fU0lERV9FRkZFQ1RTX18qL1xuZXhwb3J0IGZ1bmN0aW9uIGRlcml2ZWQoZm4pIHtcblx0dmFyIGZsYWdzID0gREVSSVZFRCB8IERJUlRZO1xuXG5cdGlmIChhY3RpdmVfZWZmZWN0ID09PSBudWxsKSB7XG5cdFx0ZmxhZ3MgfD0gVU5PV05FRDtcblx0fSBlbHNlIHtcblx0XHQvLyBTaW5jZSBkZXJpdmVkcyBhcmUgZXZhbHVhdGVkIGxhemlseSwgYW55IGVmZmVjdHMgY3JlYXRlZCBpbnNpZGUgdGhlbSBhcmVcblx0XHQvLyBjcmVhdGVkIHRvbyBsYXRlIHRvIGVuc3VyZSB0aGF0IHRoZSBwYXJlbnQgZWZmZWN0IGlzIGFkZGVkIHRvIHRoZSB0cmVlXG5cdFx0YWN0aXZlX2VmZmVjdC5mIHw9IEVGRkVDVF9IQVNfREVSSVZFRDtcblx0fVxuXG5cdHZhciBwYXJlbnRfZGVyaXZlZCA9XG5cdFx0YWN0aXZlX3JlYWN0aW9uICE9PSBudWxsICYmIChhY3RpdmVfcmVhY3Rpb24uZiAmIERFUklWRUQpICE9PSAwXG5cdFx0XHQ/IC8qKiBAdHlwZSB7RGVyaXZlZH0gKi8gKGFjdGl2ZV9yZWFjdGlvbilcblx0XHRcdDogbnVsbDtcblxuXHQvKiogQHR5cGUge0Rlcml2ZWQ8Vj59ICovXG5cdGNvbnN0IHNpZ25hbCA9IHtcblx0XHRjaGlsZHJlbjogbnVsbCxcblx0XHRjdHg6IGNvbXBvbmVudF9jb250ZXh0LFxuXHRcdGRlcHM6IG51bGwsXG5cdFx0ZXF1YWxzLFxuXHRcdGY6IGZsYWdzLFxuXHRcdGZuLFxuXHRcdHJlYWN0aW9uczogbnVsbCxcblx0XHR2OiAvKiogQHR5cGUge1Z9ICovIChudWxsKSxcblx0XHR2ZXJzaW9uOiAwLFxuXHRcdHBhcmVudDogcGFyZW50X2Rlcml2ZWQgPz8gYWN0aXZlX2VmZmVjdFxuXHR9O1xuXG5cdGlmIChERVYgJiYgdHJhY2luZ19tb2RlX2ZsYWcpIHtcblx0XHRzaWduYWwuY3JlYXRlZCA9IGdldF9zdGFjaygnQ3JlYXRlZEF0Jyk7XG5cdH1cblxuXHRpZiAocGFyZW50X2Rlcml2ZWQgIT09IG51bGwpIHtcblx0XHQocGFyZW50X2Rlcml2ZWQuY2hpbGRyZW4gPz89IFtdKS5wdXNoKHNpZ25hbCk7XG5cdH1cblxuXHRyZXR1cm4gc2lnbmFsO1xufVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBWXG4gKiBAcGFyYW0geygpID0+IFZ9IGZuXG4gKiBAcmV0dXJucyB7RGVyaXZlZDxWPn1cbiAqL1xuLyojX19OT19TSURFX0VGRkVDVFNfXyovXG5leHBvcnQgZnVuY3Rpb24gZGVyaXZlZF9zYWZlX2VxdWFsKGZuKSB7XG5cdGNvbnN0IHNpZ25hbCA9IGRlcml2ZWQoZm4pO1xuXHRzaWduYWwuZXF1YWxzID0gc2FmZV9lcXVhbHM7XG5cdHJldHVybiBzaWduYWw7XG59XG5cbi8qKlxuICogQHBhcmFtIHtEZXJpdmVkfSBkZXJpdmVkXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gZGVzdHJveV9kZXJpdmVkX2NoaWxkcmVuKGRlcml2ZWQpIHtcblx0dmFyIGNoaWxkcmVuID0gZGVyaXZlZC5jaGlsZHJlbjtcblxuXHRpZiAoY2hpbGRyZW4gIT09IG51bGwpIHtcblx0XHRkZXJpdmVkLmNoaWxkcmVuID0gbnVsbDtcblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpICs9IDEpIHtcblx0XHRcdHZhciBjaGlsZCA9IGNoaWxkcmVuW2ldO1xuXHRcdFx0aWYgKChjaGlsZC5mICYgREVSSVZFRCkgIT09IDApIHtcblx0XHRcdFx0ZGVzdHJveV9kZXJpdmVkKC8qKiBAdHlwZSB7RGVyaXZlZH0gKi8gKGNoaWxkKSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZXN0cm95X2VmZmVjdCgvKiogQHR5cGUge0VmZmVjdH0gKi8gKGNoaWxkKSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59XG5cbi8qKlxuICogVGhlIGN1cnJlbnRseSB1cGRhdGluZyBkZXJpdmVkcywgdXNlZCB0byBkZXRlY3QgaW5maW5pdGUgcmVjdXJzaW9uXG4gKiBpbiBkZXYgbW9kZSBhbmQgcHJvdmlkZSBhIG5pY2VyIGVycm9yIHRoYW4gJ3RvbyBtdWNoIHJlY3Vyc2lvbidcbiAqIEB0eXBlIHtEZXJpdmVkW119XG4gKi9cbmxldCBzdGFjayA9IFtdO1xuXG4vKipcbiAqIEBwYXJhbSB7RGVyaXZlZH0gZGVyaXZlZFxuICogQHJldHVybnMge0VmZmVjdCB8IG51bGx9XG4gKi9cbmZ1bmN0aW9uIGdldF9kZXJpdmVkX3BhcmVudF9lZmZlY3QoZGVyaXZlZCkge1xuXHR2YXIgcGFyZW50ID0gZGVyaXZlZC5wYXJlbnQ7XG5cdHdoaWxlIChwYXJlbnQgIT09IG51bGwpIHtcblx0XHRpZiAoKHBhcmVudC5mICYgREVSSVZFRCkgPT09IDApIHtcblx0XHRcdHJldHVybiAvKiogQHR5cGUge0VmZmVjdH0gKi8gKHBhcmVudCk7XG5cdFx0fVxuXHRcdHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG5cdH1cblx0cmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogQHRlbXBsYXRlIFRcbiAqIEBwYXJhbSB7RGVyaXZlZH0gZGVyaXZlZFxuICogQHJldHVybnMge1R9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBleGVjdXRlX2Rlcml2ZWQoZGVyaXZlZCkge1xuXHR2YXIgdmFsdWU7XG5cdHZhciBwcmV2X2FjdGl2ZV9lZmZlY3QgPSBhY3RpdmVfZWZmZWN0O1xuXG5cdHNldF9hY3RpdmVfZWZmZWN0KGdldF9kZXJpdmVkX3BhcmVudF9lZmZlY3QoZGVyaXZlZCkpO1xuXG5cdGlmIChERVYpIHtcblx0XHRsZXQgcHJldl9pbnNwZWN0X2VmZmVjdHMgPSBpbnNwZWN0X2VmZmVjdHM7XG5cdFx0c2V0X2luc3BlY3RfZWZmZWN0cyhuZXcgU2V0KCkpO1xuXHRcdHRyeSB7XG5cdFx0XHRpZiAoc3RhY2suaW5jbHVkZXMoZGVyaXZlZCkpIHtcblx0XHRcdFx0ZS5kZXJpdmVkX3JlZmVyZW5jZXNfc2VsZigpO1xuXHRcdFx0fVxuXG5cdFx0XHRzdGFjay5wdXNoKGRlcml2ZWQpO1xuXG5cdFx0XHRkZXN0cm95X2Rlcml2ZWRfY2hpbGRyZW4oZGVyaXZlZCk7XG5cdFx0XHR2YWx1ZSA9IHVwZGF0ZV9yZWFjdGlvbihkZXJpdmVkKTtcblx0XHR9IGZpbmFsbHkge1xuXHRcdFx0c2V0X2FjdGl2ZV9lZmZlY3QocHJldl9hY3RpdmVfZWZmZWN0KTtcblx0XHRcdHNldF9pbnNwZWN0X2VmZmVjdHMocHJldl9pbnNwZWN0X2VmZmVjdHMpO1xuXHRcdFx0c3RhY2sucG9wKCk7XG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdHRyeSB7XG5cdFx0XHRkZXN0cm95X2Rlcml2ZWRfY2hpbGRyZW4oZGVyaXZlZCk7XG5cdFx0XHR2YWx1ZSA9IHVwZGF0ZV9yZWFjdGlvbihkZXJpdmVkKTtcblx0XHR9IGZpbmFsbHkge1xuXHRcdFx0c2V0X2FjdGl2ZV9lZmZlY3QocHJldl9hY3RpdmVfZWZmZWN0KTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdmFsdWU7XG59XG5cbi8qKlxuICogQHBhcmFtIHtEZXJpdmVkfSBkZXJpdmVkXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZV9kZXJpdmVkKGRlcml2ZWQpIHtcblx0dmFyIHZhbHVlID0gZXhlY3V0ZV9kZXJpdmVkKGRlcml2ZWQpO1xuXHR2YXIgc3RhdHVzID1cblx0XHQoc2tpcF9yZWFjdGlvbiB8fCAoZGVyaXZlZC5mICYgVU5PV05FRCkgIT09IDApICYmIGRlcml2ZWQuZGVwcyAhPT0gbnVsbCA/IE1BWUJFX0RJUlRZIDogQ0xFQU47XG5cblx0c2V0X3NpZ25hbF9zdGF0dXMoZGVyaXZlZCwgc3RhdHVzKTtcblxuXHRpZiAoIWRlcml2ZWQuZXF1YWxzKHZhbHVlKSkge1xuXHRcdGRlcml2ZWQudiA9IHZhbHVlO1xuXHRcdGRlcml2ZWQudmVyc2lvbiA9IGluY3JlbWVudF92ZXJzaW9uKCk7XG5cdH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge0Rlcml2ZWR9IGRlcml2ZWRcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVzdHJveV9kZXJpdmVkKGRlcml2ZWQpIHtcblx0ZGVzdHJveV9kZXJpdmVkX2NoaWxkcmVuKGRlcml2ZWQpO1xuXHRyZW1vdmVfcmVhY3Rpb25zKGRlcml2ZWQsIDApO1xuXHRzZXRfc2lnbmFsX3N0YXR1cyhkZXJpdmVkLCBERVNUUk9ZRUQpO1xuXG5cdGRlcml2ZWQudiA9IGRlcml2ZWQuY2hpbGRyZW4gPSBkZXJpdmVkLmRlcHMgPSBkZXJpdmVkLmN0eCA9IGRlcml2ZWQucmVhY3Rpb25zID0gbnVsbDtcbn1cbiIsIi8qKiBAaW1wb3J0IHsgQ29tcG9uZW50Q29udGV4dCwgQ29tcG9uZW50Q29udGV4dExlZ2FjeSwgRGVyaXZlZCwgRWZmZWN0LCBUZW1wbGF0ZU5vZGUsIFRyYW5zaXRpb25NYW5hZ2VyIH0gZnJvbSAnI2NsaWVudCcgKi9cbmltcG9ydCB7XG5cdGNoZWNrX2RpcnRpbmVzcyxcblx0Y29tcG9uZW50X2NvbnRleHQsXG5cdGFjdGl2ZV9lZmZlY3QsXG5cdGFjdGl2ZV9yZWFjdGlvbixcblx0ZGV2X2N1cnJlbnRfY29tcG9uZW50X2Z1bmN0aW9uLFxuXHR1cGRhdGVfZWZmZWN0LFxuXHRnZXQsXG5cdGlzX2Rlc3Ryb3lpbmdfZWZmZWN0LFxuXHRpc19mbHVzaGluZ19lZmZlY3QsXG5cdHJlbW92ZV9yZWFjdGlvbnMsXG5cdHNjaGVkdWxlX2VmZmVjdCxcblx0c2V0X2FjdGl2ZV9yZWFjdGlvbixcblx0c2V0X2lzX2Rlc3Ryb3lpbmdfZWZmZWN0LFxuXHRzZXRfaXNfZmx1c2hpbmdfZWZmZWN0LFxuXHRzZXRfc2lnbmFsX3N0YXR1cyxcblx0dW50cmFjayxcblx0c2tpcF9yZWFjdGlvblxufSBmcm9tICcuLi9ydW50aW1lLmpzJztcbmltcG9ydCB7XG5cdERJUlRZLFxuXHRCUkFOQ0hfRUZGRUNULFxuXHRSRU5ERVJfRUZGRUNULFxuXHRFRkZFQ1QsXG5cdERFU1RST1lFRCxcblx0SU5FUlQsXG5cdEVGRkVDVF9SQU4sXG5cdEJMT0NLX0VGRkVDVCxcblx0Uk9PVF9FRkZFQ1QsXG5cdEVGRkVDVF9UUkFOU1BBUkVOVCxcblx0REVSSVZFRCxcblx0VU5PV05FRCxcblx0Q0xFQU4sXG5cdElOU1BFQ1RfRUZGRUNULFxuXHRIRUFEX0VGRkVDVCxcblx0TUFZQkVfRElSVFksXG5cdEVGRkVDVF9IQVNfREVSSVZFRFxufSBmcm9tICcuLi9jb25zdGFudHMuanMnO1xuaW1wb3J0IHsgc2V0IH0gZnJvbSAnLi9zb3VyY2VzLmpzJztcbmltcG9ydCAqIGFzIGUgZnJvbSAnLi4vZXJyb3JzLmpzJztcbmltcG9ydCB7IERFViB9IGZyb20gJ2VzbS1lbnYnO1xuaW1wb3J0IHsgZGVmaW5lX3Byb3BlcnR5IH0gZnJvbSAnLi4vLi4vc2hhcmVkL3V0aWxzLmpzJztcbmltcG9ydCB7IGdldF9uZXh0X3NpYmxpbmcgfSBmcm9tICcuLi9kb20vb3BlcmF0aW9ucy5qcyc7XG5pbXBvcnQgeyBkZXN0cm95X2Rlcml2ZWQgfSBmcm9tICcuL2Rlcml2ZWRzLmpzJztcblxuLyoqXG4gKiBAcGFyYW0geyckZWZmZWN0JyB8ICckZWZmZWN0LnByZScgfCAnJGluc3BlY3QnfSBydW5lXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZV9lZmZlY3QocnVuZSkge1xuXHRpZiAoYWN0aXZlX2VmZmVjdCA9PT0gbnVsbCAmJiBhY3RpdmVfcmVhY3Rpb24gPT09IG51bGwpIHtcblx0XHRlLmVmZmVjdF9vcnBoYW4ocnVuZSk7XG5cdH1cblxuXHRpZiAoYWN0aXZlX3JlYWN0aW9uICE9PSBudWxsICYmIChhY3RpdmVfcmVhY3Rpb24uZiAmIFVOT1dORUQpICE9PSAwKSB7XG5cdFx0ZS5lZmZlY3RfaW5fdW5vd25lZF9kZXJpdmVkKCk7XG5cdH1cblxuXHRpZiAoaXNfZGVzdHJveWluZ19lZmZlY3QpIHtcblx0XHRlLmVmZmVjdF9pbl90ZWFyZG93bihydW5lKTtcblx0fVxufVxuXG4vKipcbiAqIEBwYXJhbSB7RWZmZWN0fSBlZmZlY3RcbiAqIEBwYXJhbSB7RWZmZWN0fSBwYXJlbnRfZWZmZWN0XG4gKi9cbmZ1bmN0aW9uIHB1c2hfZWZmZWN0KGVmZmVjdCwgcGFyZW50X2VmZmVjdCkge1xuXHR2YXIgcGFyZW50X2xhc3QgPSBwYXJlbnRfZWZmZWN0Lmxhc3Q7XG5cdGlmIChwYXJlbnRfbGFzdCA9PT0gbnVsbCkge1xuXHRcdHBhcmVudF9lZmZlY3QubGFzdCA9IHBhcmVudF9lZmZlY3QuZmlyc3QgPSBlZmZlY3Q7XG5cdH0gZWxzZSB7XG5cdFx0cGFyZW50X2xhc3QubmV4dCA9IGVmZmVjdDtcblx0XHRlZmZlY3QucHJldiA9IHBhcmVudF9sYXN0O1xuXHRcdHBhcmVudF9lZmZlY3QubGFzdCA9IGVmZmVjdDtcblx0fVxufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB0eXBlXG4gKiBAcGFyYW0ge251bGwgfCAoKCkgPT4gdm9pZCB8ICgoKSA9PiB2b2lkKSl9IGZuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHN5bmNcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gcHVzaFxuICogQHJldHVybnMge0VmZmVjdH1cbiAqL1xuZnVuY3Rpb24gY3JlYXRlX2VmZmVjdCh0eXBlLCBmbiwgc3luYywgcHVzaCA9IHRydWUpIHtcblx0dmFyIGlzX3Jvb3QgPSAodHlwZSAmIFJPT1RfRUZGRUNUKSAhPT0gMDtcblx0dmFyIHBhcmVudF9lZmZlY3QgPSBhY3RpdmVfZWZmZWN0O1xuXG5cdGlmIChERVYpIHtcblx0XHQvLyBFbnN1cmUgdGhlIHBhcmVudCBpcyBuZXZlciBhbiBpbnNwZWN0IGVmZmVjdFxuXHRcdHdoaWxlIChwYXJlbnRfZWZmZWN0ICE9PSBudWxsICYmIChwYXJlbnRfZWZmZWN0LmYgJiBJTlNQRUNUX0VGRkVDVCkgIT09IDApIHtcblx0XHRcdHBhcmVudF9lZmZlY3QgPSBwYXJlbnRfZWZmZWN0LnBhcmVudDtcblx0XHR9XG5cdH1cblxuXHQvKiogQHR5cGUge0VmZmVjdH0gKi9cblx0dmFyIGVmZmVjdCA9IHtcblx0XHRjdHg6IGNvbXBvbmVudF9jb250ZXh0LFxuXHRcdGRlcHM6IG51bGwsXG5cdFx0ZGVyaXZlZHM6IG51bGwsXG5cdFx0bm9kZXNfc3RhcnQ6IG51bGwsXG5cdFx0bm9kZXNfZW5kOiBudWxsLFxuXHRcdGY6IHR5cGUgfCBESVJUWSxcblx0XHRmaXJzdDogbnVsbCxcblx0XHRmbixcblx0XHRsYXN0OiBudWxsLFxuXHRcdG5leHQ6IG51bGwsXG5cdFx0cGFyZW50OiBpc19yb290ID8gbnVsbCA6IHBhcmVudF9lZmZlY3QsXG5cdFx0cHJldjogbnVsbCxcblx0XHR0ZWFyZG93bjogbnVsbCxcblx0XHR0cmFuc2l0aW9uczogbnVsbCxcblx0XHR2ZXJzaW9uOiAwXG5cdH07XG5cblx0aWYgKERFVikge1xuXHRcdGVmZmVjdC5jb21wb25lbnRfZnVuY3Rpb24gPSBkZXZfY3VycmVudF9jb21wb25lbnRfZnVuY3Rpb247XG5cdH1cblxuXHRpZiAoc3luYykge1xuXHRcdHZhciBwcmV2aW91c2x5X2ZsdXNoaW5nX2VmZmVjdCA9IGlzX2ZsdXNoaW5nX2VmZmVjdDtcblxuXHRcdHRyeSB7XG5cdFx0XHRzZXRfaXNfZmx1c2hpbmdfZWZmZWN0KHRydWUpO1xuXHRcdFx0dXBkYXRlX2VmZmVjdChlZmZlY3QpO1xuXHRcdFx0ZWZmZWN0LmYgfD0gRUZGRUNUX1JBTjtcblx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRkZXN0cm95X2VmZmVjdChlZmZlY3QpO1xuXHRcdFx0dGhyb3cgZTtcblx0XHR9IGZpbmFsbHkge1xuXHRcdFx0c2V0X2lzX2ZsdXNoaW5nX2VmZmVjdChwcmV2aW91c2x5X2ZsdXNoaW5nX2VmZmVjdCk7XG5cdFx0fVxuXHR9IGVsc2UgaWYgKGZuICE9PSBudWxsKSB7XG5cdFx0c2NoZWR1bGVfZWZmZWN0KGVmZmVjdCk7XG5cdH1cblxuXHQvLyBpZiBhbiBlZmZlY3QgaGFzIG5vIGRlcGVuZGVuY2llcywgbm8gRE9NIGFuZCBubyB0ZWFyZG93biBmdW5jdGlvbixcblx0Ly8gZG9uJ3QgYm90aGVyIGFkZGluZyBpdCB0byB0aGUgZWZmZWN0IHRyZWVcblx0dmFyIGluZXJ0ID1cblx0XHRzeW5jICYmXG5cdFx0ZWZmZWN0LmRlcHMgPT09IG51bGwgJiZcblx0XHRlZmZlY3QuZmlyc3QgPT09IG51bGwgJiZcblx0XHRlZmZlY3Qubm9kZXNfc3RhcnQgPT09IG51bGwgJiZcblx0XHRlZmZlY3QudGVhcmRvd24gPT09IG51bGwgJiZcblx0XHQoZWZmZWN0LmYgJiBFRkZFQ1RfSEFTX0RFUklWRUQpID09PSAwO1xuXG5cdGlmICghaW5lcnQgJiYgIWlzX3Jvb3QgJiYgcHVzaCkge1xuXHRcdGlmIChwYXJlbnRfZWZmZWN0ICE9PSBudWxsKSB7XG5cdFx0XHRwdXNoX2VmZmVjdChlZmZlY3QsIHBhcmVudF9lZmZlY3QpO1xuXHRcdH1cblxuXHRcdC8vIGlmIHdlJ3JlIGluIGEgZGVyaXZlZCwgYWRkIHRoZSBlZmZlY3QgdGhlcmUgdG9vXG5cdFx0aWYgKGFjdGl2ZV9yZWFjdGlvbiAhPT0gbnVsbCAmJiAoYWN0aXZlX3JlYWN0aW9uLmYgJiBERVJJVkVEKSAhPT0gMCkge1xuXHRcdFx0dmFyIGRlcml2ZWQgPSAvKiogQHR5cGUge0Rlcml2ZWR9ICovIChhY3RpdmVfcmVhY3Rpb24pO1xuXHRcdFx0KGRlcml2ZWQuY2hpbGRyZW4gPz89IFtdKS5wdXNoKGVmZmVjdCk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVmZmVjdDtcbn1cblxuLyoqXG4gKiBJbnRlcm5hbCByZXByZXNlbnRhdGlvbiBvZiBgJGVmZmVjdC50cmFja2luZygpYFxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlZmZlY3RfdHJhY2tpbmcoKSB7XG5cdGlmIChhY3RpdmVfcmVhY3Rpb24gPT09IG51bGwpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHQvLyBJZiBpdCdzIHNraXBwZWQsIHRoYXQncyBiZWNhdXNlIHdlJ3JlIGluc2lkZSBhbiB1bm93bmVkXG5cdC8vIHRoYXQgaXMgbm90IGJlaW5nIHRyYWNrZWQgYnkgYW5vdGhlciByZWFjdGlvblxuXHRyZXR1cm4gIXNraXBfcmVhY3Rpb247XG59XG5cbi8qKlxuICogQHBhcmFtIHsoKSA9PiB2b2lkfSBmblxuICovXG5leHBvcnQgZnVuY3Rpb24gdGVhcmRvd24oZm4pIHtcblx0Y29uc3QgZWZmZWN0ID0gY3JlYXRlX2VmZmVjdChSRU5ERVJfRUZGRUNULCBudWxsLCBmYWxzZSk7XG5cdHNldF9zaWduYWxfc3RhdHVzKGVmZmVjdCwgQ0xFQU4pO1xuXHRlZmZlY3QudGVhcmRvd24gPSBmbjtcblx0cmV0dXJuIGVmZmVjdDtcbn1cblxuLyoqXG4gKiBJbnRlcm5hbCByZXByZXNlbnRhdGlvbiBvZiBgJGVmZmVjdCguLi4pYFxuICogQHBhcmFtIHsoKSA9PiB2b2lkIHwgKCgpID0+IHZvaWQpfSBmblxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlcl9lZmZlY3QoZm4pIHtcblx0dmFsaWRhdGVfZWZmZWN0KCckZWZmZWN0Jyk7XG5cblx0Ly8gTm9uLW5lc3RlZCBgJGVmZmVjdCguLi4pYCBpbiBhIGNvbXBvbmVudCBzaG91bGQgYmUgZGVmZXJyZWRcblx0Ly8gdW50aWwgdGhlIGNvbXBvbmVudCBpcyBtb3VudGVkXG5cdHZhciBkZWZlciA9XG5cdFx0YWN0aXZlX2VmZmVjdCAhPT0gbnVsbCAmJlxuXHRcdChhY3RpdmVfZWZmZWN0LmYgJiBCUkFOQ0hfRUZGRUNUKSAhPT0gMCAmJlxuXHRcdGNvbXBvbmVudF9jb250ZXh0ICE9PSBudWxsICYmXG5cdFx0IWNvbXBvbmVudF9jb250ZXh0Lm07XG5cblx0aWYgKERFVikge1xuXHRcdGRlZmluZV9wcm9wZXJ0eShmbiwgJ25hbWUnLCB7XG5cdFx0XHR2YWx1ZTogJyRlZmZlY3QnXG5cdFx0fSk7XG5cdH1cblxuXHRpZiAoZGVmZXIpIHtcblx0XHR2YXIgY29udGV4dCA9IC8qKiBAdHlwZSB7Q29tcG9uZW50Q29udGV4dH0gKi8gKGNvbXBvbmVudF9jb250ZXh0KTtcblx0XHQoY29udGV4dC5lID8/PSBbXSkucHVzaCh7XG5cdFx0XHRmbixcblx0XHRcdGVmZmVjdDogYWN0aXZlX2VmZmVjdCxcblx0XHRcdHJlYWN0aW9uOiBhY3RpdmVfcmVhY3Rpb25cblx0XHR9KTtcblx0fSBlbHNlIHtcblx0XHR2YXIgc2lnbmFsID0gZWZmZWN0KGZuKTtcblx0XHRyZXR1cm4gc2lnbmFsO1xuXHR9XG59XG5cbi8qKlxuICogSW50ZXJuYWwgcmVwcmVzZW50YXRpb24gb2YgYCRlZmZlY3QucHJlKC4uLilgXG4gKiBAcGFyYW0geygpID0+IHZvaWQgfCAoKCkgPT4gdm9pZCl9IGZuXG4gKiBAcmV0dXJucyB7RWZmZWN0fVxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlcl9wcmVfZWZmZWN0KGZuKSB7XG5cdHZhbGlkYXRlX2VmZmVjdCgnJGVmZmVjdC5wcmUnKTtcblx0aWYgKERFVikge1xuXHRcdGRlZmluZV9wcm9wZXJ0eShmbiwgJ25hbWUnLCB7XG5cdFx0XHR2YWx1ZTogJyRlZmZlY3QucHJlJ1xuXHRcdH0pO1xuXHR9XG5cdHJldHVybiByZW5kZXJfZWZmZWN0KGZuKTtcbn1cblxuLyoqIEBwYXJhbSB7KCkgPT4gdm9pZCB8ICgoKSA9PiB2b2lkKX0gZm4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbnNwZWN0X2VmZmVjdChmbikge1xuXHRyZXR1cm4gY3JlYXRlX2VmZmVjdChJTlNQRUNUX0VGRkVDVCwgZm4sIHRydWUpO1xufVxuXG4vKipcbiAqIEludGVybmFsIHJlcHJlc2VudGF0aW9uIG9mIGAkZWZmZWN0LnJvb3QoLi4uKWBcbiAqIEBwYXJhbSB7KCkgPT4gdm9pZCB8ICgoKSA9PiB2b2lkKX0gZm5cbiAqIEByZXR1cm5zIHsoKSA9PiB2b2lkfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZWZmZWN0X3Jvb3QoZm4pIHtcblx0Y29uc3QgZWZmZWN0ID0gY3JlYXRlX2VmZmVjdChST09UX0VGRkVDVCwgZm4sIHRydWUpO1xuXG5cdHJldHVybiAoKSA9PiB7XG5cdFx0ZGVzdHJveV9lZmZlY3QoZWZmZWN0KTtcblx0fTtcbn1cblxuLyoqXG4gKiBBbiBlZmZlY3Qgcm9vdCB3aG9zZSBjaGlsZHJlbiBjYW4gdHJhbnNpdGlvbiBvdXRcbiAqIEBwYXJhbSB7KCkgPT4gdm9pZH0gZm5cbiAqIEByZXR1cm5zIHsob3B0aW9ucz86IHsgb3V0cm8/OiBib29sZWFuIH0pID0+IFByb21pc2U8dm9pZD59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb21wb25lbnRfcm9vdChmbikge1xuXHRjb25zdCBlZmZlY3QgPSBjcmVhdGVfZWZmZWN0KFJPT1RfRUZGRUNULCBmbiwgdHJ1ZSk7XG5cblx0cmV0dXJuIChvcHRpb25zID0ge30pID0+IHtcblx0XHRyZXR1cm4gbmV3IFByb21pc2UoKGZ1bGZpbCkgPT4ge1xuXHRcdFx0aWYgKG9wdGlvbnMub3V0cm8pIHtcblx0XHRcdFx0cGF1c2VfZWZmZWN0KGVmZmVjdCwgKCkgPT4ge1xuXHRcdFx0XHRcdGRlc3Ryb3lfZWZmZWN0KGVmZmVjdCk7XG5cdFx0XHRcdFx0ZnVsZmlsKHVuZGVmaW5lZCk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVzdHJveV9lZmZlY3QoZWZmZWN0KTtcblx0XHRcdFx0ZnVsZmlsKHVuZGVmaW5lZCk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH07XG59XG5cbi8qKlxuICogQHBhcmFtIHsoKSA9PiB2b2lkIHwgKCgpID0+IHZvaWQpfSBmblxuICogQHJldHVybnMge0VmZmVjdH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVmZmVjdChmbikge1xuXHRyZXR1cm4gY3JlYXRlX2VmZmVjdChFRkZFQ1QsIGZuLCBmYWxzZSk7XG59XG5cbi8qKlxuICogSW50ZXJuYWwgcmVwcmVzZW50YXRpb24gb2YgYCQ6IC4uYFxuICogQHBhcmFtIHsoKSA9PiBhbnl9IGRlcHNcbiAqIEBwYXJhbSB7KCkgPT4gdm9pZCB8ICgoKSA9PiB2b2lkKX0gZm5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxlZ2FjeV9wcmVfZWZmZWN0KGRlcHMsIGZuKSB7XG5cdHZhciBjb250ZXh0ID0gLyoqIEB0eXBlIHtDb21wb25lbnRDb250ZXh0TGVnYWN5fSAqLyAoY29tcG9uZW50X2NvbnRleHQpO1xuXG5cdC8qKiBAdHlwZSB7eyBlZmZlY3Q6IG51bGwgfCBFZmZlY3QsIHJhbjogYm9vbGVhbiB9fSAqL1xuXHR2YXIgdG9rZW4gPSB7IGVmZmVjdDogbnVsbCwgcmFuOiBmYWxzZSB9O1xuXHRjb250ZXh0LmwucjEucHVzaCh0b2tlbik7XG5cblx0dG9rZW4uZWZmZWN0ID0gcmVuZGVyX2VmZmVjdCgoKSA9PiB7XG5cdFx0ZGVwcygpO1xuXG5cdFx0Ly8gSWYgdGhpcyBsZWdhY3kgcHJlIGVmZmVjdCBoYXMgYWxyZWFkeSBydW4gYmVmb3JlIHRoZSBlbmQgb2YgdGhlIHJlc2V0LCB0aGVuXG5cdFx0Ly8gYmFpbCBvdXQgdG8gZW11bGF0ZSB0aGUgc2FtZSBiZWhhdmlvci5cblx0XHRpZiAodG9rZW4ucmFuKSByZXR1cm47XG5cblx0XHR0b2tlbi5yYW4gPSB0cnVlO1xuXHRcdHNldChjb250ZXh0LmwucjIsIHRydWUpO1xuXHRcdHVudHJhY2soZm4pO1xuXHR9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxlZ2FjeV9wcmVfZWZmZWN0X3Jlc2V0KCkge1xuXHR2YXIgY29udGV4dCA9IC8qKiBAdHlwZSB7Q29tcG9uZW50Q29udGV4dExlZ2FjeX0gKi8gKGNvbXBvbmVudF9jb250ZXh0KTtcblxuXHRyZW5kZXJfZWZmZWN0KCgpID0+IHtcblx0XHRpZiAoIWdldChjb250ZXh0LmwucjIpKSByZXR1cm47XG5cblx0XHQvLyBSdW4gZGlydHkgYCQ6YCBzdGF0ZW1lbnRzXG5cdFx0Zm9yICh2YXIgdG9rZW4gb2YgY29udGV4dC5sLnIxKSB7XG5cdFx0XHR2YXIgZWZmZWN0ID0gdG9rZW4uZWZmZWN0O1xuXG5cdFx0XHQvLyBJZiB0aGUgZWZmZWN0IGlzIENMRUFOLCB0aGVuIG1ha2UgaXQgTUFZQkVfRElSVFkuIFRoaXMgZW5zdXJlcyB3ZSB0cmF2ZXJzZSB0aHJvdWdoXG5cdFx0XHQvLyB0aGUgZWZmZWN0cyBkZXBlbmRlbmNpZXMgYW5kIGNvcnJlY3RseSBlbnN1cmUgZWFjaCBkZXBlbmRlbmN5IGlzIHVwLXRvLWRhdGUuXG5cdFx0XHRpZiAoKGVmZmVjdC5mICYgQ0xFQU4pICE9PSAwKSB7XG5cdFx0XHRcdHNldF9zaWduYWxfc3RhdHVzKGVmZmVjdCwgTUFZQkVfRElSVFkpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoY2hlY2tfZGlydGluZXNzKGVmZmVjdCkpIHtcblx0XHRcdFx0dXBkYXRlX2VmZmVjdChlZmZlY3QpO1xuXHRcdFx0fVxuXG5cdFx0XHR0b2tlbi5yYW4gPSBmYWxzZTtcblx0XHR9XG5cblx0XHRjb250ZXh0LmwucjIudiA9IGZhbHNlOyAvLyBzZXQgZGlyZWN0bHkgdG8gYXZvaWQgcmVydW5uaW5nIHRoaXMgZWZmZWN0XG5cdH0pO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7KCkgPT4gdm9pZCB8ICgoKSA9PiB2b2lkKX0gZm5cbiAqIEByZXR1cm5zIHtFZmZlY3R9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXJfZWZmZWN0KGZuKSB7XG5cdHJldHVybiBjcmVhdGVfZWZmZWN0KFJFTkRFUl9FRkZFQ1QsIGZuLCB0cnVlKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0geygpID0+IHZvaWQgfCAoKCkgPT4gdm9pZCl9IGZuXG4gKiBAcmV0dXJucyB7RWZmZWN0fVxuICovXG5leHBvcnQgZnVuY3Rpb24gdGVtcGxhdGVfZWZmZWN0KGZuKSB7XG5cdGlmIChERVYpIHtcblx0XHRkZWZpbmVfcHJvcGVydHkoZm4sICduYW1lJywge1xuXHRcdFx0dmFsdWU6ICd7ZXhwcmVzc2lvbn0nXG5cdFx0fSk7XG5cdH1cblx0cmV0dXJuIGJsb2NrKGZuKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0geygoKSA9PiB2b2lkKX0gZm5cbiAqIEBwYXJhbSB7bnVtYmVyfSBmbGFnc1xuICovXG5leHBvcnQgZnVuY3Rpb24gYmxvY2soZm4sIGZsYWdzID0gMCkge1xuXHRyZXR1cm4gY3JlYXRlX2VmZmVjdChSRU5ERVJfRUZGRUNUIHwgQkxPQ0tfRUZGRUNUIHwgZmxhZ3MsIGZuLCB0cnVlKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0geygoKSA9PiB2b2lkKX0gZm5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW3B1c2hdXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBicmFuY2goZm4sIHB1c2ggPSB0cnVlKSB7XG5cdHJldHVybiBjcmVhdGVfZWZmZWN0KFJFTkRFUl9FRkZFQ1QgfCBCUkFOQ0hfRUZGRUNULCBmbiwgdHJ1ZSwgcHVzaCk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtFZmZlY3R9IGVmZmVjdFxuICovXG5leHBvcnQgZnVuY3Rpb24gZXhlY3V0ZV9lZmZlY3RfdGVhcmRvd24oZWZmZWN0KSB7XG5cdHZhciB0ZWFyZG93biA9IGVmZmVjdC50ZWFyZG93bjtcblx0aWYgKHRlYXJkb3duICE9PSBudWxsKSB7XG5cdFx0Y29uc3QgcHJldmlvdXNseV9kZXN0cm95aW5nX2VmZmVjdCA9IGlzX2Rlc3Ryb3lpbmdfZWZmZWN0O1xuXHRcdGNvbnN0IHByZXZpb3VzX3JlYWN0aW9uID0gYWN0aXZlX3JlYWN0aW9uO1xuXHRcdHNldF9pc19kZXN0cm95aW5nX2VmZmVjdCh0cnVlKTtcblx0XHRzZXRfYWN0aXZlX3JlYWN0aW9uKG51bGwpO1xuXHRcdHRyeSB7XG5cdFx0XHR0ZWFyZG93bi5jYWxsKG51bGwpO1xuXHRcdH0gZmluYWxseSB7XG5cdFx0XHRzZXRfaXNfZGVzdHJveWluZ19lZmZlY3QocHJldmlvdXNseV9kZXN0cm95aW5nX2VmZmVjdCk7XG5cdFx0XHRzZXRfYWN0aXZlX3JlYWN0aW9uKHByZXZpb3VzX3JlYWN0aW9uKTtcblx0XHR9XG5cdH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge0VmZmVjdH0gc2lnbmFsXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlc3Ryb3lfZWZmZWN0X2Rlcml2ZWRzKHNpZ25hbCkge1xuXHR2YXIgZGVyaXZlZHMgPSBzaWduYWwuZGVyaXZlZHM7XG5cblx0aWYgKGRlcml2ZWRzICE9PSBudWxsKSB7XG5cdFx0c2lnbmFsLmRlcml2ZWRzID0gbnVsbDtcblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZGVyaXZlZHMubGVuZ3RoOyBpICs9IDEpIHtcblx0XHRcdGRlc3Ryb3lfZGVyaXZlZChkZXJpdmVkc1tpXSk7XG5cdFx0fVxuXHR9XG59XG5cbi8qKlxuICogQHBhcmFtIHtFZmZlY3R9IHNpZ25hbFxuICogQHBhcmFtIHtib29sZWFufSByZW1vdmVfZG9tXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlc3Ryb3lfZWZmZWN0X2NoaWxkcmVuKHNpZ25hbCwgcmVtb3ZlX2RvbSA9IGZhbHNlKSB7XG5cdHZhciBlZmZlY3QgPSBzaWduYWwuZmlyc3Q7XG5cdHNpZ25hbC5maXJzdCA9IHNpZ25hbC5sYXN0ID0gbnVsbDtcblxuXHR3aGlsZSAoZWZmZWN0ICE9PSBudWxsKSB7XG5cdFx0dmFyIG5leHQgPSBlZmZlY3QubmV4dDtcblx0XHRkZXN0cm95X2VmZmVjdChlZmZlY3QsIHJlbW92ZV9kb20pO1xuXHRcdGVmZmVjdCA9IG5leHQ7XG5cdH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge0VmZmVjdH0gc2lnbmFsXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlc3Ryb3lfYmxvY2tfZWZmZWN0X2NoaWxkcmVuKHNpZ25hbCkge1xuXHR2YXIgZWZmZWN0ID0gc2lnbmFsLmZpcnN0O1xuXG5cdHdoaWxlIChlZmZlY3QgIT09IG51bGwpIHtcblx0XHR2YXIgbmV4dCA9IGVmZmVjdC5uZXh0O1xuXHRcdGlmICgoZWZmZWN0LmYgJiBCUkFOQ0hfRUZGRUNUKSA9PT0gMCkge1xuXHRcdFx0ZGVzdHJveV9lZmZlY3QoZWZmZWN0KTtcblx0XHR9XG5cdFx0ZWZmZWN0ID0gbmV4dDtcblx0fVxufVxuXG4vKipcbiAqIEBwYXJhbSB7RWZmZWN0fSBlZmZlY3RcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW3JlbW92ZV9kb21dXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlc3Ryb3lfZWZmZWN0KGVmZmVjdCwgcmVtb3ZlX2RvbSA9IHRydWUpIHtcblx0dmFyIHJlbW92ZWQgPSBmYWxzZTtcblxuXHRpZiAoKHJlbW92ZV9kb20gfHwgKGVmZmVjdC5mICYgSEVBRF9FRkZFQ1QpICE9PSAwKSAmJiBlZmZlY3Qubm9kZXNfc3RhcnQgIT09IG51bGwpIHtcblx0XHQvKiogQHR5cGUge1RlbXBsYXRlTm9kZSB8IG51bGx9ICovXG5cdFx0dmFyIG5vZGUgPSBlZmZlY3Qubm9kZXNfc3RhcnQ7XG5cdFx0dmFyIGVuZCA9IGVmZmVjdC5ub2Rlc19lbmQ7XG5cblx0XHR3aGlsZSAobm9kZSAhPT0gbnVsbCkge1xuXHRcdFx0LyoqIEB0eXBlIHtUZW1wbGF0ZU5vZGUgfCBudWxsfSAqL1xuXHRcdFx0dmFyIG5leHQgPSBub2RlID09PSBlbmQgPyBudWxsIDogLyoqIEB0eXBlIHtUZW1wbGF0ZU5vZGV9ICovIChnZXRfbmV4dF9zaWJsaW5nKG5vZGUpKTtcblxuXHRcdFx0bm9kZS5yZW1vdmUoKTtcblx0XHRcdG5vZGUgPSBuZXh0O1xuXHRcdH1cblxuXHRcdHJlbW92ZWQgPSB0cnVlO1xuXHR9XG5cblx0ZGVzdHJveV9lZmZlY3RfY2hpbGRyZW4oZWZmZWN0LCByZW1vdmVfZG9tICYmICFyZW1vdmVkKTtcblx0ZGVzdHJveV9lZmZlY3RfZGVyaXZlZHMoZWZmZWN0KTtcblx0cmVtb3ZlX3JlYWN0aW9ucyhlZmZlY3QsIDApO1xuXHRzZXRfc2lnbmFsX3N0YXR1cyhlZmZlY3QsIERFU1RST1lFRCk7XG5cblx0dmFyIHRyYW5zaXRpb25zID0gZWZmZWN0LnRyYW5zaXRpb25zO1xuXG5cdGlmICh0cmFuc2l0aW9ucyAhPT0gbnVsbCkge1xuXHRcdGZvciAoY29uc3QgdHJhbnNpdGlvbiBvZiB0cmFuc2l0aW9ucykge1xuXHRcdFx0dHJhbnNpdGlvbi5zdG9wKCk7XG5cdFx0fVxuXHR9XG5cblx0ZXhlY3V0ZV9lZmZlY3RfdGVhcmRvd24oZWZmZWN0KTtcblxuXHR2YXIgcGFyZW50ID0gZWZmZWN0LnBhcmVudDtcblxuXHQvLyBJZiB0aGUgcGFyZW50IGRvZXNuJ3QgaGF2ZSBhbnkgY2hpbGRyZW4sIHRoZW4gc2tpcCB0aGlzIHdvcmsgYWx0b2dldGhlclxuXHRpZiAocGFyZW50ICE9PSBudWxsICYmIHBhcmVudC5maXJzdCAhPT0gbnVsbCkge1xuXHRcdHVubGlua19lZmZlY3QoZWZmZWN0KTtcblx0fVxuXG5cdGlmIChERVYpIHtcblx0XHRlZmZlY3QuY29tcG9uZW50X2Z1bmN0aW9uID0gbnVsbDtcblx0fVxuXG5cdC8vIGBmaXJzdGAgYW5kIGBjaGlsZGAgYXJlIG51bGxlZCBvdXQgaW4gZGVzdHJveV9lZmZlY3RfY2hpbGRyZW5cblx0Ly8gd2UgZG9uJ3QgbnVsbCBvdXQgYHBhcmVudGAgc28gdGhhdCBlcnJvciBwcm9wYWdhdGlvbiBjYW4gd29yayBjb3JyZWN0bHlcblx0ZWZmZWN0Lm5leHQgPVxuXHRcdGVmZmVjdC5wcmV2ID1cblx0XHRlZmZlY3QudGVhcmRvd24gPVxuXHRcdGVmZmVjdC5jdHggPVxuXHRcdGVmZmVjdC5kZXBzID1cblx0XHRlZmZlY3QuZm4gPVxuXHRcdGVmZmVjdC5ub2Rlc19zdGFydCA9XG5cdFx0ZWZmZWN0Lm5vZGVzX2VuZCA9XG5cdFx0XHRudWxsO1xufVxuXG4vKipcbiAqIERldGFjaCBhbiBlZmZlY3QgZnJvbSB0aGUgZWZmZWN0IHRyZWUsIGZyZWVpbmcgdXAgbWVtb3J5IGFuZFxuICogcmVkdWNpbmcgdGhlIGFtb3VudCBvZiB3b3JrIHRoYXQgaGFwcGVucyBvbiBzdWJzZXF1ZW50IHRyYXZlcnNhbHNcbiAqIEBwYXJhbSB7RWZmZWN0fSBlZmZlY3RcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVubGlua19lZmZlY3QoZWZmZWN0KSB7XG5cdHZhciBwYXJlbnQgPSBlZmZlY3QucGFyZW50O1xuXHR2YXIgcHJldiA9IGVmZmVjdC5wcmV2O1xuXHR2YXIgbmV4dCA9IGVmZmVjdC5uZXh0O1xuXG5cdGlmIChwcmV2ICE9PSBudWxsKSBwcmV2Lm5leHQgPSBuZXh0O1xuXHRpZiAobmV4dCAhPT0gbnVsbCkgbmV4dC5wcmV2ID0gcHJldjtcblxuXHRpZiAocGFyZW50ICE9PSBudWxsKSB7XG5cdFx0aWYgKHBhcmVudC5maXJzdCA9PT0gZWZmZWN0KSBwYXJlbnQuZmlyc3QgPSBuZXh0O1xuXHRcdGlmIChwYXJlbnQubGFzdCA9PT0gZWZmZWN0KSBwYXJlbnQubGFzdCA9IHByZXY7XG5cdH1cbn1cblxuLyoqXG4gKiBXaGVuIGEgYmxvY2sgZWZmZWN0IGlzIHJlbW92ZWQsIHdlIGRvbid0IGltbWVkaWF0ZWx5IGRlc3Ryb3kgaXQgb3IgeWFuayBpdFxuICogb3V0IG9mIHRoZSBET00sIGJlY2F1c2UgaXQgbWlnaHQgaGF2ZSB0cmFuc2l0aW9ucy4gSW5zdGVhZCwgd2UgJ3BhdXNlJyBpdC5cbiAqIEl0IHN0YXlzIGFyb3VuZCAoaW4gbWVtb3J5LCBhbmQgaW4gdGhlIERPTSkgdW50aWwgb3V0cm8gdHJhbnNpdGlvbnMgaGF2ZVxuICogY29tcGxldGVkLCBhbmQgaWYgdGhlIHN0YXRlIGNoYW5nZSBpcyByZXZlcnNlZCB0aGVuIHdlIF9yZXN1bWVfIGl0LlxuICogQSBwYXVzZWQgZWZmZWN0IGRvZXMgbm90IHVwZGF0ZSwgYW5kIHRoZSBET00gc3VidHJlZSBiZWNvbWVzIGluZXJ0LlxuICogQHBhcmFtIHtFZmZlY3R9IGVmZmVjdFxuICogQHBhcmFtIHsoKSA9PiB2b2lkfSBbY2FsbGJhY2tdXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXVzZV9lZmZlY3QoZWZmZWN0LCBjYWxsYmFjaykge1xuXHQvKiogQHR5cGUge1RyYW5zaXRpb25NYW5hZ2VyW119ICovXG5cdHZhciB0cmFuc2l0aW9ucyA9IFtdO1xuXG5cdHBhdXNlX2NoaWxkcmVuKGVmZmVjdCwgdHJhbnNpdGlvbnMsIHRydWUpO1xuXG5cdHJ1bl9vdXRfdHJhbnNpdGlvbnModHJhbnNpdGlvbnMsICgpID0+IHtcblx0XHRkZXN0cm95X2VmZmVjdChlZmZlY3QpO1xuXHRcdGlmIChjYWxsYmFjaykgY2FsbGJhY2soKTtcblx0fSk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtUcmFuc2l0aW9uTWFuYWdlcltdfSB0cmFuc2l0aW9uc1xuICogQHBhcmFtIHsoKSA9PiB2b2lkfSBmblxuICovXG5leHBvcnQgZnVuY3Rpb24gcnVuX291dF90cmFuc2l0aW9ucyh0cmFuc2l0aW9ucywgZm4pIHtcblx0dmFyIHJlbWFpbmluZyA9IHRyYW5zaXRpb25zLmxlbmd0aDtcblx0aWYgKHJlbWFpbmluZyA+IDApIHtcblx0XHR2YXIgY2hlY2sgPSAoKSA9PiAtLXJlbWFpbmluZyB8fCBmbigpO1xuXHRcdGZvciAodmFyIHRyYW5zaXRpb24gb2YgdHJhbnNpdGlvbnMpIHtcblx0XHRcdHRyYW5zaXRpb24ub3V0KGNoZWNrKTtcblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0Zm4oKTtcblx0fVxufVxuXG4vKipcbiAqIEBwYXJhbSB7RWZmZWN0fSBlZmZlY3RcbiAqIEBwYXJhbSB7VHJhbnNpdGlvbk1hbmFnZXJbXX0gdHJhbnNpdGlvbnNcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gbG9jYWxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhdXNlX2NoaWxkcmVuKGVmZmVjdCwgdHJhbnNpdGlvbnMsIGxvY2FsKSB7XG5cdGlmICgoZWZmZWN0LmYgJiBJTkVSVCkgIT09IDApIHJldHVybjtcblx0ZWZmZWN0LmYgXj0gSU5FUlQ7XG5cblx0aWYgKGVmZmVjdC50cmFuc2l0aW9ucyAhPT0gbnVsbCkge1xuXHRcdGZvciAoY29uc3QgdHJhbnNpdGlvbiBvZiBlZmZlY3QudHJhbnNpdGlvbnMpIHtcblx0XHRcdGlmICh0cmFuc2l0aW9uLmlzX2dsb2JhbCB8fCBsb2NhbCkge1xuXHRcdFx0XHR0cmFuc2l0aW9ucy5wdXNoKHRyYW5zaXRpb24pO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHZhciBjaGlsZCA9IGVmZmVjdC5maXJzdDtcblxuXHR3aGlsZSAoY2hpbGQgIT09IG51bGwpIHtcblx0XHR2YXIgc2libGluZyA9IGNoaWxkLm5leHQ7XG5cdFx0dmFyIHRyYW5zcGFyZW50ID0gKGNoaWxkLmYgJiBFRkZFQ1RfVFJBTlNQQVJFTlQpICE9PSAwIHx8IChjaGlsZC5mICYgQlJBTkNIX0VGRkVDVCkgIT09IDA7XG5cdFx0Ly8gVE9ETyB3ZSBkb24ndCBuZWVkIHRvIGNhbGwgcGF1c2VfY2hpbGRyZW4gcmVjdXJzaXZlbHkgd2l0aCBhIGxpbmtlZCBsaXN0IGluIHBsYWNlXG5cdFx0Ly8gaXQncyBzbGlnaHRseSBtb3JlIGludm9sdmVkIHRob3VnaCBhcyB3ZSBoYXZlIHRvIGFjY291bnQgZm9yIGB0cmFuc3BhcmVudGAgY2hhbmdpbmdcblx0XHQvLyB0aHJvdWdoIHRoZSB0cmVlLlxuXHRcdHBhdXNlX2NoaWxkcmVuKGNoaWxkLCB0cmFuc2l0aW9ucywgdHJhbnNwYXJlbnQgPyBsb2NhbCA6IGZhbHNlKTtcblx0XHRjaGlsZCA9IHNpYmxpbmc7XG5cdH1cbn1cblxuLyoqXG4gKiBUaGUgb3Bwb3NpdGUgb2YgYHBhdXNlX2VmZmVjdGAuIFdlIGNhbGwgdGhpcyBpZiAoZm9yIGV4YW1wbGUpXG4gKiBgeGAgYmVjb21lcyBmYWxzeSB0aGVuIHRydXRoeTogYHsjaWYgeH0uLi57L2lmfWBcbiAqIEBwYXJhbSB7RWZmZWN0fSBlZmZlY3RcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlc3VtZV9lZmZlY3QoZWZmZWN0KSB7XG5cdHJlc3VtZV9jaGlsZHJlbihlZmZlY3QsIHRydWUpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7RWZmZWN0fSBlZmZlY3RcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gbG9jYWxcbiAqL1xuZnVuY3Rpb24gcmVzdW1lX2NoaWxkcmVuKGVmZmVjdCwgbG9jYWwpIHtcblx0aWYgKChlZmZlY3QuZiAmIElORVJUKSA9PT0gMCkgcmV0dXJuO1xuXG5cdC8vIElmIGEgZGVwZW5kZW5jeSBvZiB0aGlzIGVmZmVjdCBjaGFuZ2VkIHdoaWxlIGl0IHdhcyBwYXVzZWQsXG5cdC8vIGFwcGx5IHRoZSBjaGFuZ2Ugbm93XG5cdGlmIChjaGVja19kaXJ0aW5lc3MoZWZmZWN0KSkge1xuXHRcdHVwZGF0ZV9lZmZlY3QoZWZmZWN0KTtcblx0fVxuXG5cdC8vIEVuc3VyZSB3ZSB0b2dnbGUgdGhlIGZsYWcgYWZ0ZXIgcG9zc2libHkgdXBkYXRpbmcgdGhlIGVmZmVjdCBzbyB0aGF0XG5cdC8vIGVhY2ggYmxvY2sgbG9naWMgY2FuIGNvcnJlY3RseSBvcGVyYXRlIG9uIGluZXJ0IGl0ZW1zXG5cdGVmZmVjdC5mIF49IElORVJUO1xuXG5cdHZhciBjaGlsZCA9IGVmZmVjdC5maXJzdDtcblxuXHR3aGlsZSAoY2hpbGQgIT09IG51bGwpIHtcblx0XHR2YXIgc2libGluZyA9IGNoaWxkLm5leHQ7XG5cdFx0dmFyIHRyYW5zcGFyZW50ID0gKGNoaWxkLmYgJiBFRkZFQ1RfVFJBTlNQQVJFTlQpICE9PSAwIHx8IChjaGlsZC5mICYgQlJBTkNIX0VGRkVDVCkgIT09IDA7XG5cdFx0Ly8gVE9ETyB3ZSBkb24ndCBuZWVkIHRvIGNhbGwgcmVzdW1lX2NoaWxkcmVuIHJlY3Vyc2l2ZWx5IHdpdGggYSBsaW5rZWQgbGlzdCBpbiBwbGFjZVxuXHRcdC8vIGl0J3Mgc2xpZ2h0bHkgbW9yZSBpbnZvbHZlZCB0aG91Z2ggYXMgd2UgaGF2ZSB0byBhY2NvdW50IGZvciBgdHJhbnNwYXJlbnRgIGNoYW5naW5nXG5cdFx0Ly8gdGhyb3VnaCB0aGUgdHJlZS5cblx0XHRyZXN1bWVfY2hpbGRyZW4oY2hpbGQsIHRyYW5zcGFyZW50ID8gbG9jYWwgOiBmYWxzZSk7XG5cdFx0Y2hpbGQgPSBzaWJsaW5nO1xuXHR9XG5cblx0aWYgKGVmZmVjdC50cmFuc2l0aW9ucyAhPT0gbnVsbCkge1xuXHRcdGZvciAoY29uc3QgdHJhbnNpdGlvbiBvZiBlZmZlY3QudHJhbnNpdGlvbnMpIHtcblx0XHRcdGlmICh0cmFuc2l0aW9uLmlzX2dsb2JhbCB8fCBsb2NhbCkge1xuXHRcdFx0XHR0cmFuc2l0aW9uLmluKCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59XG4iLCIvKiogQGltcG9ydCB7IENvbXBvbmVudENvbnRleHQsIERlcml2ZWQsIEVmZmVjdCwgUmVhY3Rpb24sIFNpZ25hbCwgU291cmNlLCBWYWx1ZSB9IGZyb20gJyNjbGllbnQnICovXG5pbXBvcnQgeyBERVYgfSBmcm9tICdlc20tZW52JztcbmltcG9ydCB7IGRlZmluZV9wcm9wZXJ0eSwgZ2V0X2Rlc2NyaXB0b3JzLCBnZXRfcHJvdG90eXBlX29mIH0gZnJvbSAnLi4vc2hhcmVkL3V0aWxzLmpzJztcbmltcG9ydCB7XG5cdGRlc3Ryb3lfYmxvY2tfZWZmZWN0X2NoaWxkcmVuLFxuXHRkZXN0cm95X2VmZmVjdF9jaGlsZHJlbixcblx0ZGVzdHJveV9lZmZlY3RfZGVyaXZlZHMsXG5cdGVmZmVjdCxcblx0ZXhlY3V0ZV9lZmZlY3RfdGVhcmRvd24sXG5cdHVubGlua19lZmZlY3Rcbn0gZnJvbSAnLi9yZWFjdGl2aXR5L2VmZmVjdHMuanMnO1xuaW1wb3J0IHtcblx0RUZGRUNULFxuXHRSRU5ERVJfRUZGRUNULFxuXHRESVJUWSxcblx0TUFZQkVfRElSVFksXG5cdENMRUFOLFxuXHRERVJJVkVELFxuXHRVTk9XTkVELFxuXHRERVNUUk9ZRUQsXG5cdElORVJULFxuXHRCUkFOQ0hfRUZGRUNULFxuXHRTVEFURV9TWU1CT0wsXG5cdEJMT0NLX0VGRkVDVCxcblx0Uk9PVF9FRkZFQ1QsXG5cdExFR0FDWV9ERVJJVkVEX1BST1AsXG5cdERJU0NPTk5FQ1RFRCxcblx0Qk9VTkRBUllfRUZGRUNUXG59IGZyb20gJy4vY29uc3RhbnRzLmpzJztcbmltcG9ydCB7IGZsdXNoX3Rhc2tzIH0gZnJvbSAnLi9kb20vdGFzay5qcyc7XG5pbXBvcnQgeyBhZGRfb3duZXIgfSBmcm9tICcuL2Rldi9vd25lcnNoaXAuanMnO1xuaW1wb3J0IHsgaW50ZXJuYWxfc2V0LCBzZXQsIHNvdXJjZSB9IGZyb20gJy4vcmVhY3Rpdml0eS9zb3VyY2VzLmpzJztcbmltcG9ydCB7IGRlc3Ryb3lfZGVyaXZlZCwgZXhlY3V0ZV9kZXJpdmVkLCB1cGRhdGVfZGVyaXZlZCB9IGZyb20gJy4vcmVhY3Rpdml0eS9kZXJpdmVkcy5qcyc7XG5pbXBvcnQgKiBhcyBlIGZyb20gJy4vZXJyb3JzLmpzJztcbmltcG9ydCB7IGxpZmVjeWNsZV9vdXRzaWRlX2NvbXBvbmVudCB9IGZyb20gJy4uL3NoYXJlZC9lcnJvcnMuanMnO1xuaW1wb3J0IHsgRklMRU5BTUUgfSBmcm9tICcuLi8uLi9jb25zdGFudHMuanMnO1xuaW1wb3J0IHsgbGVnYWN5X21vZGVfZmxhZywgdHJhY2luZ19tb2RlX2ZsYWcgfSBmcm9tICcuLi9mbGFncy9pbmRleC5qcyc7XG5pbXBvcnQgeyB0cmFjaW5nX2V4cHJlc3Npb25zLCBnZXRfc3RhY2sgfSBmcm9tICcuL2Rldi90cmFjaW5nLmpzJztcblxuY29uc3QgRkxVU0hfTUlDUk9UQVNLID0gMDtcbmNvbnN0IEZMVVNIX1NZTkMgPSAxO1xuLy8gVXNlZCBmb3IgREVWIHRpbWUgZXJyb3IgaGFuZGxpbmdcbi8qKiBAcGFyYW0ge1dlYWtTZXQ8RXJyb3I+fSB2YWx1ZSAqL1xuY29uc3QgaGFuZGxlZF9lcnJvcnMgPSBuZXcgV2Vha1NldCgpO1xuZXhwb3J0IGxldCBpc190aHJvd2luZ19lcnJvciA9IGZhbHNlO1xuXG4vLyBVc2VkIGZvciBjb250cm9sbGluZyB0aGUgZmx1c2ggb2YgZWZmZWN0cy5cbmxldCBzY2hlZHVsZXJfbW9kZSA9IEZMVVNIX01JQ1JPVEFTSztcbi8vIFVzZWQgZm9yIGhhbmRsaW5nIHNjaGVkdWxpbmdcbmxldCBpc19taWNyb190YXNrX3F1ZXVlZCA9IGZhbHNlO1xuXG4vKiogQHR5cGUge0VmZmVjdCB8IG51bGx9ICovXG5sZXQgbGFzdF9zY2hlZHVsZWRfZWZmZWN0ID0gbnVsbDtcblxuZXhwb3J0IGxldCBpc19mbHVzaGluZ19lZmZlY3QgPSBmYWxzZTtcbmV4cG9ydCBsZXQgaXNfZGVzdHJveWluZ19lZmZlY3QgPSBmYWxzZTtcblxuLyoqIEBwYXJhbSB7Ym9vbGVhbn0gdmFsdWUgKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRfaXNfZmx1c2hpbmdfZWZmZWN0KHZhbHVlKSB7XG5cdGlzX2ZsdXNoaW5nX2VmZmVjdCA9IHZhbHVlO1xufVxuXG4vKiogQHBhcmFtIHtib29sZWFufSB2YWx1ZSAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldF9pc19kZXN0cm95aW5nX2VmZmVjdCh2YWx1ZSkge1xuXHRpc19kZXN0cm95aW5nX2VmZmVjdCA9IHZhbHVlO1xufVxuXG4vLyBIYW5kbGUgZWZmZWN0IHF1ZXVlc1xuXG4vKiogQHR5cGUge0VmZmVjdFtdfSAqL1xubGV0IHF1ZXVlZF9yb290X2VmZmVjdHMgPSBbXTtcblxubGV0IGZsdXNoX2NvdW50ID0gMDtcbi8qKiBAdHlwZSB7RWZmZWN0W119IFN0YWNrIG9mIGVmZmVjdHMsIGRldiBvbmx5ICovXG5sZXQgZGV2X2VmZmVjdF9zdGFjayA9IFtdO1xuLy8gSGFuZGxlIHNpZ25hbCByZWFjdGl2aXR5IHRyZWUgZGVwZW5kZW5jaWVzIGFuZCByZWFjdGlvbnNcblxuLyoqIEB0eXBlIHtudWxsIHwgUmVhY3Rpb259ICovXG5leHBvcnQgbGV0IGFjdGl2ZV9yZWFjdGlvbiA9IG51bGw7XG5cbi8qKiBAcGFyYW0ge251bGwgfCBSZWFjdGlvbn0gcmVhY3Rpb24gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRfYWN0aXZlX3JlYWN0aW9uKHJlYWN0aW9uKSB7XG5cdGFjdGl2ZV9yZWFjdGlvbiA9IHJlYWN0aW9uO1xufVxuXG4vKiogQHR5cGUge251bGwgfCBFZmZlY3R9ICovXG5leHBvcnQgbGV0IGFjdGl2ZV9lZmZlY3QgPSBudWxsO1xuXG4vKiogQHBhcmFtIHtudWxsIHwgRWZmZWN0fSBlZmZlY3QgKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRfYWN0aXZlX2VmZmVjdChlZmZlY3QpIHtcblx0YWN0aXZlX2VmZmVjdCA9IGVmZmVjdDtcbn1cblxuLyoqXG4gKiBXaGVuIHNvdXJjZXMgYXJlIGNyZWF0ZWQgd2l0aGluIGEgZGVyaXZlZCwgd2UgcmVjb3JkIHRoZW0gc28gdGhhdCB3ZSBjYW4gc2FmZWx5IGFsbG93XG4gKiBsb2NhbCBtdXRhdGlvbnMgdG8gdGhlc2Ugc291cmNlcyB3aXRob3V0IHRoZSBzaWRlLWVmZmVjdCBlcnJvciBiZWluZyBpbnZva2VkIHVubmVjZXNzYXJpbHkuXG4gKiBAdHlwZSB7bnVsbCB8IFNvdXJjZVtdfVxuICovXG5leHBvcnQgbGV0IGRlcml2ZWRfc291cmNlcyA9IG51bGw7XG5cbi8qKlxuICogQHBhcmFtIHtTb3VyY2VbXSB8IG51bGx9IHNvdXJjZXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldF9kZXJpdmVkX3NvdXJjZXMoc291cmNlcykge1xuXHRkZXJpdmVkX3NvdXJjZXMgPSBzb3VyY2VzO1xufVxuXG4vKipcbiAqIFRoZSBkZXBlbmRlbmNpZXMgb2YgdGhlIHJlYWN0aW9uIHRoYXQgaXMgY3VycmVudGx5IGJlaW5nIGV4ZWN1dGVkLiBJbiBtYW55IGNhc2VzLFxuICogdGhlIGRlcGVuZGVuY2llcyBhcmUgdW5jaGFuZ2VkIGJldHdlZW4gcnVucywgYW5kIHNvIHRoaXMgd2lsbCBiZSBgbnVsbGAgdW5sZXNzXG4gKiBhbmQgdW50aWwgYSBuZXcgZGVwZW5kZW5jeSBpcyBhY2Nlc3NlZCDigJQgd2UgdHJhY2sgdGhpcyB2aWEgYHNraXBwZWRfZGVwc2BcbiAqIEB0eXBlIHtudWxsIHwgVmFsdWVbXX1cbiAqL1xuZXhwb3J0IGxldCBuZXdfZGVwcyA9IG51bGw7XG5cbmxldCBza2lwcGVkX2RlcHMgPSAwO1xuXG4vKipcbiAqIFRyYWNrcyB3cml0ZXMgdGhhdCB0aGUgZWZmZWN0IGl0J3MgZXhlY3V0ZWQgaW4gZG9lc24ndCBsaXN0ZW4gdG8geWV0LFxuICogc28gdGhhdCB0aGUgZGVwZW5kZW5jeSBjYW4gYmUgYWRkZWQgdG8gdGhlIGVmZmVjdCBsYXRlciBvbiBpZiBpdCB0aGVuIHJlYWRzIGl0XG4gKiBAdHlwZSB7bnVsbCB8IFNvdXJjZVtdfVxuICovXG5leHBvcnQgbGV0IHVudHJhY2tlZF93cml0ZXMgPSBudWxsO1xuXG4vKiogQHBhcmFtIHtudWxsIHwgU291cmNlW119IHZhbHVlICovXG5leHBvcnQgZnVuY3Rpb24gc2V0X3VudHJhY2tlZF93cml0ZXModmFsdWUpIHtcblx0dW50cmFja2VkX3dyaXRlcyA9IHZhbHVlO1xufVxuXG4vKiogQHR5cGUge251bWJlcn0gVXNlZCBieSBzb3VyY2VzIGFuZCBkZXJpdmVkcyBmb3IgaGFuZGxpbmcgdXBkYXRlcyB0byB1bm93bmVkIGRlcml2ZWRzIGl0IHN0YXJ0cyBmcm9tIDEgdG8gZGlmZmVyZW50aWF0ZSBiZXR3ZWVuIGEgY3JlYXRlZCBlZmZlY3QgYW5kIGEgcnVuIG9uZSBmb3IgdHJhY2luZyAqL1xubGV0IGN1cnJlbnRfdmVyc2lvbiA9IDE7XG5cbi8vIElmIHdlIGFyZSB3b3JraW5nIHdpdGggYSBnZXQoKSBjaGFpbiB0aGF0IGhhcyBubyBhY3RpdmUgY29udGFpbmVyLFxuLy8gdG8gcHJldmVudCBtZW1vcnkgbGVha3MsIHdlIHNraXAgYWRkaW5nIHRoZSByZWFjdGlvbi5cbmV4cG9ydCBsZXQgc2tpcF9yZWFjdGlvbiA9IGZhbHNlO1xuLy8gSGFuZGxlIGNvbGxlY3RpbmcgYWxsIHNpZ25hbHMgd2hpY2ggYXJlIHJlYWQgZHVyaW5nIGEgc3BlY2lmaWMgdGltZSBmcmFtZVxuLyoqIEB0eXBlIHtTZXQ8VmFsdWU+IHwgbnVsbH0gKi9cbmV4cG9ydCBsZXQgY2FwdHVyZWRfc2lnbmFscyA9IG51bGw7XG5cbi8qKiBAcGFyYW0ge1NldDxWYWx1ZT4gfCBudWxsfSB2YWx1ZSAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldF9jYXB0dXJlZF9zaWduYWxzKHZhbHVlKSB7XG5cdGNhcHR1cmVkX3NpZ25hbHMgPSB2YWx1ZTtcbn1cblxuLy8gSGFuZGxpbmcgcnVudGltZSBjb21wb25lbnQgY29udGV4dFxuLyoqIEB0eXBlIHtDb21wb25lbnRDb250ZXh0IHwgbnVsbH0gKi9cbmV4cG9ydCBsZXQgY29tcG9uZW50X2NvbnRleHQgPSBudWxsO1xuXG4vKiogQHBhcmFtIHtDb21wb25lbnRDb250ZXh0IHwgbnVsbH0gY29udGV4dCAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldF9jb21wb25lbnRfY29udGV4dChjb250ZXh0KSB7XG5cdGNvbXBvbmVudF9jb250ZXh0ID0gY29udGV4dDtcbn1cblxuLyoqXG4gKiBUaGUgY3VycmVudCBjb21wb25lbnQgZnVuY3Rpb24uIERpZmZlcmVudCBmcm9tIGN1cnJlbnQgY29tcG9uZW50IGNvbnRleHQ6XG4gKiBgYGBodG1sXG4gKiA8IS0tIEFwcC5zdmVsdGUgLS0+XG4gKiA8Rm9vPlxuICogICA8QmFyIC8+IDwhLS0gY29udGV4dCA9PSBGb28uc3ZlbHRlLCBmdW5jdGlvbiA9PSBBcHAuc3ZlbHRlIC0tPlxuICogPC9Gb28+XG4gKiBgYGBcbiAqIEB0eXBlIHtDb21wb25lbnRDb250ZXh0WydmdW5jdGlvbiddfVxuICovXG5leHBvcnQgbGV0IGRldl9jdXJyZW50X2NvbXBvbmVudF9mdW5jdGlvbiA9IG51bGw7XG5cbi8qKiBAcGFyYW0ge0NvbXBvbmVudENvbnRleHRbJ2Z1bmN0aW9uJ119IGZuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0X2Rldl9jdXJyZW50X2NvbXBvbmVudF9mdW5jdGlvbihmbikge1xuXHRkZXZfY3VycmVudF9jb21wb25lbnRfZnVuY3Rpb24gPSBmbjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluY3JlbWVudF92ZXJzaW9uKCkge1xuXHRyZXR1cm4gKytjdXJyZW50X3ZlcnNpb247XG59XG5cbi8qKiBAcmV0dXJucyB7Ym9vbGVhbn0gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc19ydW5lcygpIHtcblx0cmV0dXJuICFsZWdhY3lfbW9kZV9mbGFnIHx8IChjb21wb25lbnRfY29udGV4dCAhPT0gbnVsbCAmJiBjb21wb25lbnRfY29udGV4dC5sID09PSBudWxsKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgYSBkZXJpdmVkIG9yIGVmZmVjdCBpcyBkaXJ0eS5cbiAqIElmIGl0IGlzIE1BWUJFX0RJUlRZLCB3aWxsIHNldCB0aGUgc3RhdHVzIHRvIENMRUFOXG4gKiBAcGFyYW0ge1JlYWN0aW9ufSByZWFjdGlvblxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjaGVja19kaXJ0aW5lc3MocmVhY3Rpb24pIHtcblx0dmFyIGZsYWdzID0gcmVhY3Rpb24uZjtcblxuXHRpZiAoKGZsYWdzICYgRElSVFkpICE9PSAwKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHRpZiAoKGZsYWdzICYgTUFZQkVfRElSVFkpICE9PSAwKSB7XG5cdFx0dmFyIGRlcGVuZGVuY2llcyA9IHJlYWN0aW9uLmRlcHM7XG5cdFx0dmFyIGlzX3Vub3duZWQgPSAoZmxhZ3MgJiBVTk9XTkVEKSAhPT0gMDtcblxuXHRcdGlmIChkZXBlbmRlbmNpZXMgIT09IG51bGwpIHtcblx0XHRcdHZhciBpO1xuXG5cdFx0XHRpZiAoKGZsYWdzICYgRElTQ09OTkVDVEVEKSAhPT0gMCkge1xuXHRcdFx0XHRmb3IgKGkgPSAwOyBpIDwgZGVwZW5kZW5jaWVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdFx0KGRlcGVuZGVuY2llc1tpXS5yZWFjdGlvbnMgPz89IFtdKS5wdXNoKHJlYWN0aW9uKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJlYWN0aW9uLmYgXj0gRElTQ09OTkVDVEVEO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKGkgPSAwOyBpIDwgZGVwZW5kZW5jaWVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdHZhciBkZXBlbmRlbmN5ID0gZGVwZW5kZW5jaWVzW2ldO1xuXG5cdFx0XHRcdGlmIChjaGVja19kaXJ0aW5lc3MoLyoqIEB0eXBlIHtEZXJpdmVkfSAqLyAoZGVwZW5kZW5jeSkpKSB7XG5cdFx0XHRcdFx0dXBkYXRlX2Rlcml2ZWQoLyoqIEB0eXBlIHtEZXJpdmVkfSAqLyAoZGVwZW5kZW5jeSkpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSWYgd2UgYXJlIHdvcmtpbmcgd2l0aCBhbiB1bm93bmVkIHNpZ25hbCBhcyBwYXJ0IG9mIGFuIGVmZmVjdCAoZHVlIHRvICFza2lwX3JlYWN0aW9uKVxuXHRcdFx0XHQvLyBhbmQgdGhlIHZlcnNpb24gaGFzbid0IGNoYW5nZWQsIHdlIHN0aWxsIG5lZWQgdG8gY2hlY2sgdGhhdCB0aGlzIHJlYWN0aW9uXG5cdFx0XHRcdC8vIGlzIGxpbmtlZCB0byB0aGUgZGVwZW5kZW5jeSBzb3VyY2Ug4oCTIG90aGVyd2lzZSBmdXR1cmUgdXBkYXRlcyB3aWxsIG5vdCBiZSBjYXVnaHQuXG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHRpc191bm93bmVkICYmXG5cdFx0XHRcdFx0YWN0aXZlX2VmZmVjdCAhPT0gbnVsbCAmJlxuXHRcdFx0XHRcdCFza2lwX3JlYWN0aW9uICYmXG5cdFx0XHRcdFx0IWRlcGVuZGVuY3k/LnJlYWN0aW9ucz8uaW5jbHVkZXMocmVhY3Rpb24pXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdChkZXBlbmRlbmN5LnJlYWN0aW9ucyA/Pz0gW10pLnB1c2gocmVhY3Rpb24pO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKGRlcGVuZGVuY3kudmVyc2lvbiA+IHJlYWN0aW9uLnZlcnNpb24pIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFVub3duZWQgc2lnbmFscyBzaG91bGQgbmV2ZXIgYmUgbWFya2VkIGFzIGNsZWFuIHVubGVzcyB0aGV5XG5cdFx0Ly8gYXJlIHVzZWQgd2l0aGluIGFuIGFjdGl2ZV9lZmZlY3Qgd2l0aG91dCBza2lwX3JlYWN0aW9uXG5cdFx0aWYgKCFpc191bm93bmVkIHx8IChhY3RpdmVfZWZmZWN0ICE9PSBudWxsICYmICFza2lwX3JlYWN0aW9uKSkge1xuXHRcdFx0c2V0X3NpZ25hbF9zdGF0dXMocmVhY3Rpb24sIENMRUFOKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogQHBhcmFtIHt1bmtub3dufSBlcnJvclxuICogQHBhcmFtIHtFZmZlY3R9IGVmZmVjdFxuICovXG5mdW5jdGlvbiBwcm9wYWdhdGVfZXJyb3IoZXJyb3IsIGVmZmVjdCkge1xuXHQvKiogQHR5cGUge0VmZmVjdCB8IG51bGx9ICovXG5cdHZhciBjdXJyZW50ID0gZWZmZWN0O1xuXG5cdHdoaWxlIChjdXJyZW50ICE9PSBudWxsKSB7XG5cdFx0aWYgKChjdXJyZW50LmYgJiBCT1VOREFSWV9FRkZFQ1QpICE9PSAwKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHQvLyBAdHMtZXhwZWN0LWVycm9yXG5cdFx0XHRcdGN1cnJlbnQuZm4oZXJyb3IpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9IGNhdGNoIHtcblx0XHRcdFx0Ly8gUmVtb3ZlIGJvdW5kYXJ5IGZsYWcgZnJvbSBlZmZlY3Rcblx0XHRcdFx0Y3VycmVudC5mIF49IEJPVU5EQVJZX0VGRkVDVDtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRjdXJyZW50ID0gY3VycmVudC5wYXJlbnQ7XG5cdH1cblxuXHRpc190aHJvd2luZ19lcnJvciA9IGZhbHNlO1xuXHR0aHJvdyBlcnJvcjtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0VmZmVjdH0gZWZmZWN0XG4gKi9cbmZ1bmN0aW9uIHNob3VsZF9yZXRocm93X2Vycm9yKGVmZmVjdCkge1xuXHRyZXR1cm4gKFxuXHRcdChlZmZlY3QuZiAmIERFU1RST1lFRCkgPT09IDAgJiZcblx0XHQoZWZmZWN0LnBhcmVudCA9PT0gbnVsbCB8fCAoZWZmZWN0LnBhcmVudC5mICYgQk9VTkRBUllfRUZGRUNUKSA9PT0gMClcblx0KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlc2V0X2lzX3Rocm93aW5nX2Vycm9yKCkge1xuXHRpc190aHJvd2luZ19lcnJvciA9IGZhbHNlO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7dW5rbm93bn0gZXJyb3JcbiAqIEBwYXJhbSB7RWZmZWN0fSBlZmZlY3RcbiAqIEBwYXJhbSB7RWZmZWN0IHwgbnVsbH0gcHJldmlvdXNfZWZmZWN0XG4gKiBAcGFyYW0ge0NvbXBvbmVudENvbnRleHQgfCBudWxsfSBjb21wb25lbnRfY29udGV4dFxuICovXG5leHBvcnQgZnVuY3Rpb24gaGFuZGxlX2Vycm9yKGVycm9yLCBlZmZlY3QsIHByZXZpb3VzX2VmZmVjdCwgY29tcG9uZW50X2NvbnRleHQpIHtcblx0aWYgKGlzX3Rocm93aW5nX2Vycm9yKSB7XG5cdFx0aWYgKHByZXZpb3VzX2VmZmVjdCA9PT0gbnVsbCkge1xuXHRcdFx0aXNfdGhyb3dpbmdfZXJyb3IgPSBmYWxzZTtcblx0XHR9XG5cblx0XHRpZiAoc2hvdWxkX3JldGhyb3dfZXJyb3IoZWZmZWN0KSkge1xuXHRcdFx0dGhyb3cgZXJyb3I7XG5cdFx0fVxuXG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0aWYgKHByZXZpb3VzX2VmZmVjdCAhPT0gbnVsbCkge1xuXHRcdGlzX3Rocm93aW5nX2Vycm9yID0gdHJ1ZTtcblx0fVxuXG5cdGlmIChcblx0XHQhREVWIHx8XG5cdFx0Y29tcG9uZW50X2NvbnRleHQgPT09IG51bGwgfHxcblx0XHQhKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHx8XG5cdFx0aGFuZGxlZF9lcnJvcnMuaGFzKGVycm9yKVxuXHQpIHtcblx0XHRwcm9wYWdhdGVfZXJyb3IoZXJyb3IsIGVmZmVjdCk7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0aGFuZGxlZF9lcnJvcnMuYWRkKGVycm9yKTtcblxuXHRjb25zdCBjb21wb25lbnRfc3RhY2sgPSBbXTtcblxuXHRjb25zdCBlZmZlY3RfbmFtZSA9IGVmZmVjdC5mbj8ubmFtZTtcblxuXHRpZiAoZWZmZWN0X25hbWUpIHtcblx0XHRjb21wb25lbnRfc3RhY2sucHVzaChlZmZlY3RfbmFtZSk7XG5cdH1cblxuXHQvKiogQHR5cGUge0NvbXBvbmVudENvbnRleHQgfCBudWxsfSAqL1xuXHRsZXQgY3VycmVudF9jb250ZXh0ID0gY29tcG9uZW50X2NvbnRleHQ7XG5cblx0d2hpbGUgKGN1cnJlbnRfY29udGV4dCAhPT0gbnVsbCkge1xuXHRcdGlmIChERVYpIHtcblx0XHRcdC8qKiBAdHlwZSB7c3RyaW5nfSAqL1xuXHRcdFx0dmFyIGZpbGVuYW1lID0gY3VycmVudF9jb250ZXh0LmZ1bmN0aW9uPy5bRklMRU5BTUVdO1xuXG5cdFx0XHRpZiAoZmlsZW5hbWUpIHtcblx0XHRcdFx0Y29uc3QgZmlsZSA9IGZpbGVuYW1lLnNwbGl0KCcvJykucG9wKCk7XG5cdFx0XHRcdGNvbXBvbmVudF9zdGFjay5wdXNoKGZpbGUpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGN1cnJlbnRfY29udGV4dCA9IGN1cnJlbnRfY29udGV4dC5wO1xuXHR9XG5cblx0Y29uc3QgaW5kZW50ID0gL0ZpcmVmb3gvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkgPyAnICAnIDogJ1xcdCc7XG5cdGRlZmluZV9wcm9wZXJ0eShlcnJvciwgJ21lc3NhZ2UnLCB7XG5cdFx0dmFsdWU6IGVycm9yLm1lc3NhZ2UgKyBgXFxuJHtjb21wb25lbnRfc3RhY2subWFwKChuYW1lKSA9PiBgXFxuJHtpbmRlbnR9aW4gJHtuYW1lfWApLmpvaW4oJycpfVxcbmBcblx0fSk7XG5cdGRlZmluZV9wcm9wZXJ0eShlcnJvciwgJ2NvbXBvbmVudF9zdGFjaycsIHtcblx0XHR2YWx1ZTogY29tcG9uZW50X3N0YWNrXG5cdH0pO1xuXG5cdGNvbnN0IHN0YWNrID0gZXJyb3Iuc3RhY2s7XG5cblx0Ly8gRmlsdGVyIG91dCBpbnRlcm5hbCBmaWxlcyBmcm9tIGNhbGxzdGFja1xuXHRpZiAoc3RhY2spIHtcblx0XHRjb25zdCBsaW5lcyA9IHN0YWNrLnNwbGl0KCdcXG4nKTtcblx0XHRjb25zdCBuZXdfbGluZXMgPSBbXTtcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRjb25zdCBsaW5lID0gbGluZXNbaV07XG5cdFx0XHRpZiAobGluZS5pbmNsdWRlcygnc3ZlbHRlL3NyYy9pbnRlcm5hbCcpKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXHRcdFx0bmV3X2xpbmVzLnB1c2gobGluZSk7XG5cdFx0fVxuXHRcdGRlZmluZV9wcm9wZXJ0eShlcnJvciwgJ3N0YWNrJywge1xuXHRcdFx0dmFsdWU6IG5ld19saW5lcy5qb2luKCdcXG4nKVxuXHRcdH0pO1xuXHR9XG5cblx0cHJvcGFnYXRlX2Vycm9yKGVycm9yLCBlZmZlY3QpO1xuXG5cdGlmIChzaG91bGRfcmV0aHJvd19lcnJvcihlZmZlY3QpKSB7XG5cdFx0dGhyb3cgZXJyb3I7XG5cdH1cbn1cblxuLyoqXG4gKiBAdGVtcGxhdGUgVlxuICogQHBhcmFtIHtSZWFjdGlvbn0gcmVhY3Rpb25cbiAqIEByZXR1cm5zIHtWfVxuICovXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlX3JlYWN0aW9uKHJlYWN0aW9uKSB7XG5cdHZhciBwcmV2aW91c19kZXBzID0gbmV3X2RlcHM7XG5cdHZhciBwcmV2aW91c19za2lwcGVkX2RlcHMgPSBza2lwcGVkX2RlcHM7XG5cdHZhciBwcmV2aW91c191bnRyYWNrZWRfd3JpdGVzID0gdW50cmFja2VkX3dyaXRlcztcblx0dmFyIHByZXZpb3VzX3JlYWN0aW9uID0gYWN0aXZlX3JlYWN0aW9uO1xuXHR2YXIgcHJldmlvdXNfc2tpcF9yZWFjdGlvbiA9IHNraXBfcmVhY3Rpb247XG5cdHZhciBwcmV2X2Rlcml2ZWRfc291cmNlcyA9IGRlcml2ZWRfc291cmNlcztcblx0dmFyIHByZXZpb3VzX2NvbXBvbmVudF9jb250ZXh0ID0gY29tcG9uZW50X2NvbnRleHQ7XG5cdHZhciBmbGFncyA9IHJlYWN0aW9uLmY7XG5cblx0bmV3X2RlcHMgPSAvKiogQHR5cGUge251bGwgfCBWYWx1ZVtdfSAqLyAobnVsbCk7XG5cdHNraXBwZWRfZGVwcyA9IDA7XG5cdHVudHJhY2tlZF93cml0ZXMgPSBudWxsO1xuXHRhY3RpdmVfcmVhY3Rpb24gPSAoZmxhZ3MgJiAoQlJBTkNIX0VGRkVDVCB8IFJPT1RfRUZGRUNUKSkgPT09IDAgPyByZWFjdGlvbiA6IG51bGw7XG5cdHNraXBfcmVhY3Rpb24gPSAhaXNfZmx1c2hpbmdfZWZmZWN0ICYmIChmbGFncyAmIFVOT1dORUQpICE9PSAwO1xuXHRkZXJpdmVkX3NvdXJjZXMgPSBudWxsO1xuXHRjb21wb25lbnRfY29udGV4dCA9IHJlYWN0aW9uLmN0eDtcblxuXHR0cnkge1xuXHRcdHZhciByZXN1bHQgPSAvKiogQHR5cGUge0Z1bmN0aW9ufSAqLyAoMCwgcmVhY3Rpb24uZm4pKCk7XG5cdFx0dmFyIGRlcHMgPSByZWFjdGlvbi5kZXBzO1xuXG5cdFx0aWYgKG5ld19kZXBzICE9PSBudWxsKSB7XG5cdFx0XHR2YXIgaTtcblxuXHRcdFx0cmVtb3ZlX3JlYWN0aW9ucyhyZWFjdGlvbiwgc2tpcHBlZF9kZXBzKTtcblxuXHRcdFx0aWYgKGRlcHMgIT09IG51bGwgJiYgc2tpcHBlZF9kZXBzID4gMCkge1xuXHRcdFx0XHRkZXBzLmxlbmd0aCA9IHNraXBwZWRfZGVwcyArIG5ld19kZXBzLmxlbmd0aDtcblx0XHRcdFx0Zm9yIChpID0gMDsgaSA8IG5ld19kZXBzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdFx0ZGVwc1tza2lwcGVkX2RlcHMgKyBpXSA9IG5ld19kZXBzW2ldO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZWFjdGlvbi5kZXBzID0gZGVwcyA9IG5ld19kZXBzO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIXNraXBfcmVhY3Rpb24pIHtcblx0XHRcdFx0Zm9yIChpID0gc2tpcHBlZF9kZXBzOyBpIDwgZGVwcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdChkZXBzW2ldLnJlYWN0aW9ucyA/Pz0gW10pLnB1c2gocmVhY3Rpb24pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmIChkZXBzICE9PSBudWxsICYmIHNraXBwZWRfZGVwcyA8IGRlcHMubGVuZ3RoKSB7XG5cdFx0XHRyZW1vdmVfcmVhY3Rpb25zKHJlYWN0aW9uLCBza2lwcGVkX2RlcHMpO1xuXHRcdFx0ZGVwcy5sZW5ndGggPSBza2lwcGVkX2RlcHM7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fSBmaW5hbGx5IHtcblx0XHRuZXdfZGVwcyA9IHByZXZpb3VzX2RlcHM7XG5cdFx0c2tpcHBlZF9kZXBzID0gcHJldmlvdXNfc2tpcHBlZF9kZXBzO1xuXHRcdHVudHJhY2tlZF93cml0ZXMgPSBwcmV2aW91c191bnRyYWNrZWRfd3JpdGVzO1xuXHRcdGFjdGl2ZV9yZWFjdGlvbiA9IHByZXZpb3VzX3JlYWN0aW9uO1xuXHRcdHNraXBfcmVhY3Rpb24gPSBwcmV2aW91c19za2lwX3JlYWN0aW9uO1xuXHRcdGRlcml2ZWRfc291cmNlcyA9IHByZXZfZGVyaXZlZF9zb3VyY2VzO1xuXHRcdGNvbXBvbmVudF9jb250ZXh0ID0gcHJldmlvdXNfY29tcG9uZW50X2NvbnRleHQ7XG5cdH1cbn1cblxuLyoqXG4gKiBAdGVtcGxhdGUgVlxuICogQHBhcmFtIHtSZWFjdGlvbn0gc2lnbmFsXG4gKiBAcGFyYW0ge1ZhbHVlPFY+fSBkZXBlbmRlbmN5XG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gcmVtb3ZlX3JlYWN0aW9uKHNpZ25hbCwgZGVwZW5kZW5jeSkge1xuXHRsZXQgcmVhY3Rpb25zID0gZGVwZW5kZW5jeS5yZWFjdGlvbnM7XG5cdGlmIChyZWFjdGlvbnMgIT09IG51bGwpIHtcblx0XHR2YXIgaW5kZXggPSByZWFjdGlvbnMuaW5kZXhPZihzaWduYWwpO1xuXHRcdGlmIChpbmRleCAhPT0gLTEpIHtcblx0XHRcdHZhciBuZXdfbGVuZ3RoID0gcmVhY3Rpb25zLmxlbmd0aCAtIDE7XG5cdFx0XHRpZiAobmV3X2xlbmd0aCA9PT0gMCkge1xuXHRcdFx0XHRyZWFjdGlvbnMgPSBkZXBlbmRlbmN5LnJlYWN0aW9ucyA9IG51bGw7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyBTd2FwIHdpdGggbGFzdCBlbGVtZW50IGFuZCB0aGVuIHJlbW92ZS5cblx0XHRcdFx0cmVhY3Rpb25zW2luZGV4XSA9IHJlYWN0aW9uc1tuZXdfbGVuZ3RoXTtcblx0XHRcdFx0cmVhY3Rpb25zLnBvcCgpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHQvLyBJZiB0aGUgZGVyaXZlZCBoYXMgbm8gcmVhY3Rpb25zLCB0aGVuIHdlIGNhbiBkaXNjb25uZWN0IGl0IGZyb20gdGhlIGdyYXBoLFxuXHQvLyBhbGxvd2luZyBpdCB0byBlaXRoZXIgcmVjb25uZWN0IGluIHRoZSBmdXR1cmUsIG9yIGJlIEdDJ2QgYnkgdGhlIFZNLlxuXHRpZiAoXG5cdFx0cmVhY3Rpb25zID09PSBudWxsICYmXG5cdFx0KGRlcGVuZGVuY3kuZiAmIERFUklWRUQpICE9PSAwICYmXG5cdFx0Ly8gRGVzdHJveWluZyBhIGNoaWxkIGVmZmVjdCB3aGlsZSB1cGRhdGluZyBhIHBhcmVudCBlZmZlY3QgY2FuIGNhdXNlIGEgZGVwZW5kZW5jeSB0byBhcHBlYXJcblx0XHQvLyB0byBiZSB1bnVzZWQsIHdoZW4gaW4gZmFjdCBpdCBpcyB1c2VkIGJ5IHRoZSBjdXJyZW50bHktdXBkYXRpbmcgcGFyZW50LiBDaGVja2luZyBgbmV3X2RlcHNgXG5cdFx0Ly8gYWxsb3dzIHVzIHRvIHNraXAgdGhlIGV4cGVuc2l2ZSB3b3JrIG9mIGRpc2Nvbm5lY3RpbmcgYW5kIGltbWVkaWF0ZWx5IHJlY29ubmVjdGluZyBpdFxuXHRcdChuZXdfZGVwcyA9PT0gbnVsbCB8fCAhbmV3X2RlcHMuaW5jbHVkZXMoZGVwZW5kZW5jeSkpXG5cdCkge1xuXHRcdHNldF9zaWduYWxfc3RhdHVzKGRlcGVuZGVuY3ksIE1BWUJFX0RJUlRZKTtcblx0XHQvLyBJZiB3ZSBhcmUgd29ya2luZyB3aXRoIGEgZGVyaXZlZCB0aGF0IGlzIG93bmVkIGJ5IGFuIGVmZmVjdCwgdGhlbiBtYXJrIGl0IGFzIGJlaW5nXG5cdFx0Ly8gZGlzY29ubmVjdGVkLlxuXHRcdGlmICgoZGVwZW5kZW5jeS5mICYgKFVOT1dORUQgfCBESVNDT05ORUNURUQpKSA9PT0gMCkge1xuXHRcdFx0ZGVwZW5kZW5jeS5mIF49IERJU0NPTk5FQ1RFRDtcblx0XHR9XG5cdFx0cmVtb3ZlX3JlYWN0aW9ucygvKiogQHR5cGUge0Rlcml2ZWR9ICoqLyAoZGVwZW5kZW5jeSksIDApO1xuXHR9XG59XG5cbi8qKlxuICogQHBhcmFtIHtSZWFjdGlvbn0gc2lnbmFsXG4gKiBAcGFyYW0ge251bWJlcn0gc3RhcnRfaW5kZXhcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlX3JlYWN0aW9ucyhzaWduYWwsIHN0YXJ0X2luZGV4KSB7XG5cdHZhciBkZXBlbmRlbmNpZXMgPSBzaWduYWwuZGVwcztcblx0aWYgKGRlcGVuZGVuY2llcyA9PT0gbnVsbCkgcmV0dXJuO1xuXG5cdGZvciAodmFyIGkgPSBzdGFydF9pbmRleDsgaSA8IGRlcGVuZGVuY2llcy5sZW5ndGg7IGkrKykge1xuXHRcdHJlbW92ZV9yZWFjdGlvbihzaWduYWwsIGRlcGVuZGVuY2llc1tpXSk7XG5cdH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge0VmZmVjdH0gZWZmZWN0XG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZV9lZmZlY3QoZWZmZWN0KSB7XG5cdHZhciBmbGFncyA9IGVmZmVjdC5mO1xuXG5cdGlmICgoZmxhZ3MgJiBERVNUUk9ZRUQpICE9PSAwKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0c2V0X3NpZ25hbF9zdGF0dXMoZWZmZWN0LCBDTEVBTik7XG5cblx0dmFyIHByZXZpb3VzX2VmZmVjdCA9IGFjdGl2ZV9lZmZlY3Q7XG5cdHZhciBwcmV2aW91c19jb21wb25lbnRfY29udGV4dCA9IGNvbXBvbmVudF9jb250ZXh0O1xuXG5cdGFjdGl2ZV9lZmZlY3QgPSBlZmZlY3Q7XG5cblx0aWYgKERFVikge1xuXHRcdHZhciBwcmV2aW91c19jb21wb25lbnRfZm4gPSBkZXZfY3VycmVudF9jb21wb25lbnRfZnVuY3Rpb247XG5cdFx0ZGV2X2N1cnJlbnRfY29tcG9uZW50X2Z1bmN0aW9uID0gZWZmZWN0LmNvbXBvbmVudF9mdW5jdGlvbjtcblx0fVxuXG5cdHRyeSB7XG5cdFx0aWYgKChmbGFncyAmIEJMT0NLX0VGRkVDVCkgIT09IDApIHtcblx0XHRcdGRlc3Ryb3lfYmxvY2tfZWZmZWN0X2NoaWxkcmVuKGVmZmVjdCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRlc3Ryb3lfZWZmZWN0X2NoaWxkcmVuKGVmZmVjdCk7XG5cdFx0fVxuXHRcdGRlc3Ryb3lfZWZmZWN0X2Rlcml2ZWRzKGVmZmVjdCk7XG5cblx0XHRleGVjdXRlX2VmZmVjdF90ZWFyZG93bihlZmZlY3QpO1xuXHRcdHZhciB0ZWFyZG93biA9IHVwZGF0ZV9yZWFjdGlvbihlZmZlY3QpO1xuXHRcdGVmZmVjdC50ZWFyZG93biA9IHR5cGVvZiB0ZWFyZG93biA9PT0gJ2Z1bmN0aW9uJyA/IHRlYXJkb3duIDogbnVsbDtcblx0XHRlZmZlY3QudmVyc2lvbiA9IGN1cnJlbnRfdmVyc2lvbjtcblxuXHRcdGlmIChERVYpIHtcblx0XHRcdGRldl9lZmZlY3Rfc3RhY2sucHVzaChlZmZlY3QpO1xuXHRcdH1cblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRoYW5kbGVfZXJyb3IoZXJyb3IsIGVmZmVjdCwgcHJldmlvdXNfZWZmZWN0LCBwcmV2aW91c19jb21wb25lbnRfY29udGV4dCB8fCBlZmZlY3QuY3R4KTtcblx0fSBmaW5hbGx5IHtcblx0XHRhY3RpdmVfZWZmZWN0ID0gcHJldmlvdXNfZWZmZWN0O1xuXG5cdFx0aWYgKERFVikge1xuXHRcdFx0ZGV2X2N1cnJlbnRfY29tcG9uZW50X2Z1bmN0aW9uID0gcHJldmlvdXNfY29tcG9uZW50X2ZuO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBsb2dfZWZmZWN0X3N0YWNrKCkge1xuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuXHRjb25zb2xlLmVycm9yKFxuXHRcdCdMYXN0IHRlbiBlZmZlY3RzIHdlcmU6ICcsXG5cdFx0ZGV2X2VmZmVjdF9zdGFjay5zbGljZSgtMTApLm1hcCgoZCkgPT4gZC5mbilcblx0KTtcblx0ZGV2X2VmZmVjdF9zdGFjayA9IFtdO1xufVxuXG5mdW5jdGlvbiBpbmZpbml0ZV9sb29wX2d1YXJkKCkge1xuXHRpZiAoZmx1c2hfY291bnQgPiAxMDAwKSB7XG5cdFx0Zmx1c2hfY291bnQgPSAwO1xuXHRcdHRyeSB7XG5cdFx0XHRlLmVmZmVjdF91cGRhdGVfZGVwdGhfZXhjZWVkZWQoKTtcblx0XHR9IGNhdGNoIChlcnJvcikge1xuXHRcdFx0aWYgKERFVikge1xuXHRcdFx0XHQvLyBzdGFjayBpcyBnYXJiYWdlLCBpZ25vcmUuIEluc3RlYWQgYWRkIGEgY29uc29sZS5lcnJvciBtZXNzYWdlLlxuXHRcdFx0XHRkZWZpbmVfcHJvcGVydHkoZXJyb3IsICdzdGFjaycsIHtcblx0XHRcdFx0XHR2YWx1ZTogJydcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0XHQvLyBUcnkgYW5kIGhhbmRsZSB0aGUgZXJyb3Igc28gaXQgY2FuIGJlIGNhdWdodCBhdCBhIGJvdW5kYXJ5LCB0aGF0J3Ncblx0XHRcdC8vIGlmIHRoZXJlJ3MgYW4gZWZmZWN0IGF2YWlsYWJsZSBmcm9tIHdoZW4gaXQgd2FzIGxhc3Qgc2NoZWR1bGVkXG5cdFx0XHRpZiAobGFzdF9zY2hlZHVsZWRfZWZmZWN0ICE9PSBudWxsKSB7XG5cdFx0XHRcdGlmIChERVYpIHtcblx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0aGFuZGxlX2Vycm9yKGVycm9yLCBsYXN0X3NjaGVkdWxlZF9lZmZlY3QsIG51bGwsIG51bGwpO1xuXHRcdFx0XHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdFx0XHRcdC8vIE9ubHkgbG9nIHRoZSBlZmZlY3Qgc3RhY2sgaWYgdGhlIGVycm9yIGlzIHJlLXRocm93blxuXHRcdFx0XHRcdFx0bG9nX2VmZmVjdF9zdGFjaygpO1xuXHRcdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0aGFuZGxlX2Vycm9yKGVycm9yLCBsYXN0X3NjaGVkdWxlZF9lZmZlY3QsIG51bGwsIG51bGwpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpZiAoREVWKSB7XG5cdFx0XHRcdFx0bG9nX2VmZmVjdF9zdGFjaygpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRocm93IGVycm9yO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRmbHVzaF9jb3VudCsrO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7QXJyYXk8RWZmZWN0Pn0gcm9vdF9lZmZlY3RzXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gZmx1c2hfcXVldWVkX3Jvb3RfZWZmZWN0cyhyb290X2VmZmVjdHMpIHtcblx0dmFyIGxlbmd0aCA9IHJvb3RfZWZmZWN0cy5sZW5ndGg7XG5cdGlmIChsZW5ndGggPT09IDApIHtcblx0XHRyZXR1cm47XG5cdH1cblx0aW5maW5pdGVfbG9vcF9ndWFyZCgpO1xuXG5cdHZhciBwcmV2aW91c2x5X2ZsdXNoaW5nX2VmZmVjdCA9IGlzX2ZsdXNoaW5nX2VmZmVjdDtcblx0aXNfZmx1c2hpbmdfZWZmZWN0ID0gdHJ1ZTtcblxuXHR0cnkge1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBlZmZlY3QgPSByb290X2VmZmVjdHNbaV07XG5cblx0XHRcdGlmICgoZWZmZWN0LmYgJiBDTEVBTikgPT09IDApIHtcblx0XHRcdFx0ZWZmZWN0LmYgXj0gQ0xFQU47XG5cdFx0XHR9XG5cblx0XHRcdC8qKiBAdHlwZSB7RWZmZWN0W119ICovXG5cdFx0XHR2YXIgY29sbGVjdGVkX2VmZmVjdHMgPSBbXTtcblxuXHRcdFx0cHJvY2Vzc19lZmZlY3RzKGVmZmVjdCwgY29sbGVjdGVkX2VmZmVjdHMpO1xuXHRcdFx0Zmx1c2hfcXVldWVkX2VmZmVjdHMoY29sbGVjdGVkX2VmZmVjdHMpO1xuXHRcdH1cblx0fSBmaW5hbGx5IHtcblx0XHRpc19mbHVzaGluZ19lZmZlY3QgPSBwcmV2aW91c2x5X2ZsdXNoaW5nX2VmZmVjdDtcblx0fVxufVxuXG4vKipcbiAqIEBwYXJhbSB7QXJyYXk8RWZmZWN0Pn0gZWZmZWN0c1xuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIGZsdXNoX3F1ZXVlZF9lZmZlY3RzKGVmZmVjdHMpIHtcblx0dmFyIGxlbmd0aCA9IGVmZmVjdHMubGVuZ3RoO1xuXHRpZiAobGVuZ3RoID09PSAwKSByZXR1cm47XG5cblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuXHRcdHZhciBlZmZlY3QgPSBlZmZlY3RzW2ldO1xuXG5cdFx0aWYgKChlZmZlY3QuZiAmIChERVNUUk9ZRUQgfCBJTkVSVCkpID09PSAwKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRpZiAoY2hlY2tfZGlydGluZXNzKGVmZmVjdCkpIHtcblx0XHRcdFx0XHR1cGRhdGVfZWZmZWN0KGVmZmVjdCk7XG5cblx0XHRcdFx0XHQvLyBFZmZlY3RzIHdpdGggbm8gZGVwZW5kZW5jaWVzIG9yIHRlYXJkb3duIGRvIG5vdCBnZXQgYWRkZWQgdG8gdGhlIGVmZmVjdCB0cmVlLlxuXHRcdFx0XHRcdC8vIERlZmVycmVkIGVmZmVjdHMgKGUuZy4gYCRlZmZlY3QoLi4uKWApIF9hcmVfIGFkZGVkIHRvIHRoZSB0cmVlIGJlY2F1c2Ugd2Vcblx0XHRcdFx0XHQvLyBkb24ndCBrbm93IGlmIHdlIG5lZWQgdG8ga2VlcCB0aGVtIHVudGlsIHRoZXkgYXJlIGV4ZWN1dGVkLiBEb2luZyB0aGUgY2hlY2tcblx0XHRcdFx0XHQvLyBoZXJlIChyYXRoZXIgdGhhbiBpbiBgdXBkYXRlX2VmZmVjdGApIGFsbG93cyB1cyB0byBza2lwIHRoZSB3b3JrIGZvclxuXHRcdFx0XHRcdC8vIGltbWVkaWF0ZSBlZmZlY3RzLlxuXHRcdFx0XHRcdGlmIChlZmZlY3QuZGVwcyA9PT0gbnVsbCAmJiBlZmZlY3QuZmlyc3QgPT09IG51bGwgJiYgZWZmZWN0Lm5vZGVzX3N0YXJ0ID09PSBudWxsKSB7XG5cdFx0XHRcdFx0XHRpZiAoZWZmZWN0LnRlYXJkb3duID09PSBudWxsKSB7XG5cdFx0XHRcdFx0XHRcdC8vIHJlbW92ZSB0aGlzIGVmZmVjdCBmcm9tIHRoZSBncmFwaFxuXHRcdFx0XHRcdFx0XHR1bmxpbmtfZWZmZWN0KGVmZmVjdCk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHQvLyBrZWVwIHRoZSBlZmZlY3QgaW4gdGhlIGdyYXBoLCBidXQgZnJlZSB1cCBzb21lIG1lbW9yeVxuXHRcdFx0XHRcdFx0XHRlZmZlY3QuZm4gPSBudWxsO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdFx0aGFuZGxlX2Vycm9yKGVycm9yLCBlZmZlY3QsIG51bGwsIGVmZmVjdC5jdHgpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBwcm9jZXNzX2RlZmVycmVkKCkge1xuXHRpc19taWNyb190YXNrX3F1ZXVlZCA9IGZhbHNlO1xuXHRpZiAoZmx1c2hfY291bnQgPiAxMDAxKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cdGNvbnN0IHByZXZpb3VzX3F1ZXVlZF9yb290X2VmZmVjdHMgPSBxdWV1ZWRfcm9vdF9lZmZlY3RzO1xuXHRxdWV1ZWRfcm9vdF9lZmZlY3RzID0gW107XG5cdGZsdXNoX3F1ZXVlZF9yb290X2VmZmVjdHMocHJldmlvdXNfcXVldWVkX3Jvb3RfZWZmZWN0cyk7XG5cblx0aWYgKCFpc19taWNyb190YXNrX3F1ZXVlZCkge1xuXHRcdGZsdXNoX2NvdW50ID0gMDtcblx0XHRsYXN0X3NjaGVkdWxlZF9lZmZlY3QgPSBudWxsO1xuXHRcdGlmIChERVYpIHtcblx0XHRcdGRldl9lZmZlY3Rfc3RhY2sgPSBbXTtcblx0XHR9XG5cdH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge0VmZmVjdH0gc2lnbmFsXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNjaGVkdWxlX2VmZmVjdChzaWduYWwpIHtcblx0aWYgKHNjaGVkdWxlcl9tb2RlID09PSBGTFVTSF9NSUNST1RBU0spIHtcblx0XHRpZiAoIWlzX21pY3JvX3Rhc2tfcXVldWVkKSB7XG5cdFx0XHRpc19taWNyb190YXNrX3F1ZXVlZCA9IHRydWU7XG5cdFx0XHRxdWV1ZU1pY3JvdGFzayhwcm9jZXNzX2RlZmVycmVkKTtcblx0XHR9XG5cdH1cblxuXHRsYXN0X3NjaGVkdWxlZF9lZmZlY3QgPSBzaWduYWw7XG5cblx0dmFyIGVmZmVjdCA9IHNpZ25hbDtcblxuXHR3aGlsZSAoZWZmZWN0LnBhcmVudCAhPT0gbnVsbCkge1xuXHRcdGVmZmVjdCA9IGVmZmVjdC5wYXJlbnQ7XG5cdFx0dmFyIGZsYWdzID0gZWZmZWN0LmY7XG5cblx0XHRpZiAoKGZsYWdzICYgKFJPT1RfRUZGRUNUIHwgQlJBTkNIX0VGRkVDVCkpICE9PSAwKSB7XG5cdFx0XHRpZiAoKGZsYWdzICYgQ0xFQU4pID09PSAwKSByZXR1cm47XG5cdFx0XHRlZmZlY3QuZiBePSBDTEVBTjtcblx0XHR9XG5cdH1cblxuXHRxdWV1ZWRfcm9vdF9lZmZlY3RzLnB1c2goZWZmZWN0KTtcbn1cblxuLyoqXG4gKlxuICogVGhpcyBmdW5jdGlvbiBib3RoIHJ1bnMgcmVuZGVyIGVmZmVjdHMgYW5kIGNvbGxlY3RzIHVzZXIgZWZmZWN0cyBpbiB0b3BvbG9naWNhbCBvcmRlclxuICogZnJvbSB0aGUgc3RhcnRpbmcgZWZmZWN0IHBhc3NlZCBpbi4gRWZmZWN0cyB3aWxsIGJlIGNvbGxlY3RlZCB3aGVuIHRoZXkgbWF0Y2ggdGhlIGZpbHRlcmVkXG4gKiBiaXR3aXNlIGZsYWcgcGFzc2VkIGluIG9ubHkuIFRoZSBjb2xsZWN0ZWQgZWZmZWN0cyBhcnJheSB3aWxsIGJlIHBvcHVsYXRlZCB3aXRoIGFsbCB0aGUgdXNlclxuICogZWZmZWN0cyB0byBiZSBmbHVzaGVkLlxuICpcbiAqIEBwYXJhbSB7RWZmZWN0fSBlZmZlY3RcbiAqIEBwYXJhbSB7RWZmZWN0W119IGNvbGxlY3RlZF9lZmZlY3RzXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gcHJvY2Vzc19lZmZlY3RzKGVmZmVjdCwgY29sbGVjdGVkX2VmZmVjdHMpIHtcblx0dmFyIGN1cnJlbnRfZWZmZWN0ID0gZWZmZWN0LmZpcnN0O1xuXHR2YXIgZWZmZWN0cyA9IFtdO1xuXG5cdG1haW5fbG9vcDogd2hpbGUgKGN1cnJlbnRfZWZmZWN0ICE9PSBudWxsKSB7XG5cdFx0dmFyIGZsYWdzID0gY3VycmVudF9lZmZlY3QuZjtcblx0XHR2YXIgaXNfYnJhbmNoID0gKGZsYWdzICYgQlJBTkNIX0VGRkVDVCkgIT09IDA7XG5cdFx0dmFyIGlzX3NraXBwYWJsZV9icmFuY2ggPSBpc19icmFuY2ggJiYgKGZsYWdzICYgQ0xFQU4pICE9PSAwO1xuXHRcdHZhciBzaWJsaW5nID0gY3VycmVudF9lZmZlY3QubmV4dDtcblxuXHRcdGlmICghaXNfc2tpcHBhYmxlX2JyYW5jaCAmJiAoZmxhZ3MgJiBJTkVSVCkgPT09IDApIHtcblx0XHRcdGlmICgoZmxhZ3MgJiBSRU5ERVJfRUZGRUNUKSAhPT0gMCkge1xuXHRcdFx0XHRpZiAoaXNfYnJhbmNoKSB7XG5cdFx0XHRcdFx0Y3VycmVudF9lZmZlY3QuZiBePSBDTEVBTjtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0aWYgKGNoZWNrX2RpcnRpbmVzcyhjdXJyZW50X2VmZmVjdCkpIHtcblx0XHRcdFx0XHRcdFx0dXBkYXRlX2VmZmVjdChjdXJyZW50X2VmZmVjdCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdFx0XHRcdGhhbmRsZV9lcnJvcihlcnJvciwgY3VycmVudF9lZmZlY3QsIG51bGwsIGN1cnJlbnRfZWZmZWN0LmN0eCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0dmFyIGNoaWxkID0gY3VycmVudF9lZmZlY3QuZmlyc3Q7XG5cblx0XHRcdFx0aWYgKGNoaWxkICE9PSBudWxsKSB7XG5cdFx0XHRcdFx0Y3VycmVudF9lZmZlY3QgPSBjaGlsZDtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIGlmICgoZmxhZ3MgJiBFRkZFQ1QpICE9PSAwKSB7XG5cdFx0XHRcdGVmZmVjdHMucHVzaChjdXJyZW50X2VmZmVjdCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKHNpYmxpbmcgPT09IG51bGwpIHtcblx0XHRcdGxldCBwYXJlbnQgPSBjdXJyZW50X2VmZmVjdC5wYXJlbnQ7XG5cblx0XHRcdHdoaWxlIChwYXJlbnQgIT09IG51bGwpIHtcblx0XHRcdFx0aWYgKGVmZmVjdCA9PT0gcGFyZW50KSB7XG5cdFx0XHRcdFx0YnJlYWsgbWFpbl9sb29wO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHZhciBwYXJlbnRfc2libGluZyA9IHBhcmVudC5uZXh0O1xuXHRcdFx0XHRpZiAocGFyZW50X3NpYmxpbmcgIT09IG51bGwpIHtcblx0XHRcdFx0XHRjdXJyZW50X2VmZmVjdCA9IHBhcmVudF9zaWJsaW5nO1xuXHRcdFx0XHRcdGNvbnRpbnVlIG1haW5fbG9vcDtcblx0XHRcdFx0fVxuXHRcdFx0XHRwYXJlbnQgPSBwYXJlbnQucGFyZW50O1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGN1cnJlbnRfZWZmZWN0ID0gc2libGluZztcblx0fVxuXG5cdC8vIFdlIG1pZ2h0IGJlIGRlYWxpbmcgd2l0aCBtYW55IGVmZmVjdHMgaGVyZSwgZmFyIG1vcmUgdGhhbiBjYW4gYmUgc3ByZWFkIGludG9cblx0Ly8gYW4gYXJyYXkgcHVzaCBjYWxsIChjYWxsc3RhY2sgb3ZlcmZsb3cpLiBTbyBsZXQncyBkZWFsIHdpdGggZWFjaCBlZmZlY3QgaW4gYSBsb29wLlxuXHRmb3IgKHZhciBpID0gMDsgaSA8IGVmZmVjdHMubGVuZ3RoOyBpKyspIHtcblx0XHRjaGlsZCA9IGVmZmVjdHNbaV07XG5cdFx0Y29sbGVjdGVkX2VmZmVjdHMucHVzaChjaGlsZCk7XG5cdFx0cHJvY2Vzc19lZmZlY3RzKGNoaWxkLCBjb2xsZWN0ZWRfZWZmZWN0cyk7XG5cdH1cbn1cblxuLyoqXG4gKiBJbnRlcm5hbCB2ZXJzaW9uIG9mIGBmbHVzaFN5bmNgIHdpdGggdGhlIG9wdGlvbiB0byBub3QgZmx1c2ggcHJldmlvdXMgZWZmZWN0cy5cbiAqIFJldHVybnMgdGhlIHJlc3VsdCBvZiB0aGUgcGFzc2VkIGZ1bmN0aW9uLCBpZiBnaXZlbi5cbiAqIEBwYXJhbSB7KCkgPT4gYW55fSBbZm5dXG4gKiBAcmV0dXJucyB7YW55fVxuICovXG5leHBvcnQgZnVuY3Rpb24gZmx1c2hfc3luYyhmbikge1xuXHR2YXIgcHJldmlvdXNfc2NoZWR1bGVyX21vZGUgPSBzY2hlZHVsZXJfbW9kZTtcblx0dmFyIHByZXZpb3VzX3F1ZXVlZF9yb290X2VmZmVjdHMgPSBxdWV1ZWRfcm9vdF9lZmZlY3RzO1xuXG5cdHRyeSB7XG5cdFx0aW5maW5pdGVfbG9vcF9ndWFyZCgpO1xuXG5cdFx0LyoqIEB0eXBlIHtFZmZlY3RbXX0gKi9cblx0XHRjb25zdCByb290X2VmZmVjdHMgPSBbXTtcblxuXHRcdHNjaGVkdWxlcl9tb2RlID0gRkxVU0hfU1lOQztcblx0XHRxdWV1ZWRfcm9vdF9lZmZlY3RzID0gcm9vdF9lZmZlY3RzO1xuXHRcdGlzX21pY3JvX3Rhc2tfcXVldWVkID0gZmFsc2U7XG5cblx0XHRmbHVzaF9xdWV1ZWRfcm9vdF9lZmZlY3RzKHByZXZpb3VzX3F1ZXVlZF9yb290X2VmZmVjdHMpO1xuXG5cdFx0dmFyIHJlc3VsdCA9IGZuPy4oKTtcblxuXHRcdGZsdXNoX3Rhc2tzKCk7XG5cdFx0aWYgKHF1ZXVlZF9yb290X2VmZmVjdHMubGVuZ3RoID4gMCB8fCByb290X2VmZmVjdHMubGVuZ3RoID4gMCkge1xuXHRcdFx0Zmx1c2hfc3luYygpO1xuXHRcdH1cblxuXHRcdGZsdXNoX2NvdW50ID0gMDtcblx0XHRsYXN0X3NjaGVkdWxlZF9lZmZlY3QgPSBudWxsO1xuXHRcdGlmIChERVYpIHtcblx0XHRcdGRldl9lZmZlY3Rfc3RhY2sgPSBbXTtcblx0XHR9XG5cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9IGZpbmFsbHkge1xuXHRcdHNjaGVkdWxlcl9tb2RlID0gcHJldmlvdXNfc2NoZWR1bGVyX21vZGU7XG5cdFx0cXVldWVkX3Jvb3RfZWZmZWN0cyA9IHByZXZpb3VzX3F1ZXVlZF9yb290X2VmZmVjdHM7XG5cdH1cbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIG9uY2UgYW55IHBlbmRpbmcgc3RhdGUgY2hhbmdlcyBoYXZlIGJlZW4gYXBwbGllZC5cbiAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fVxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdGljaygpIHtcblx0YXdhaXQgUHJvbWlzZS5yZXNvbHZlKCk7XG5cdC8vIEJ5IGNhbGxpbmcgZmx1c2hfc3luYyB3ZSBndWFyYW50ZWUgdGhhdCBhbnkgcGVuZGluZyBzdGF0ZSBjaGFuZ2VzIGFyZSBhcHBsaWVkIGFmdGVyIG9uZSB0aWNrLlxuXHQvLyBUT0RPIGxvb2sgaW50byB3aGV0aGVyIHdlIGNhbiBtYWtlIGZsdXNoaW5nIHN1YnNlcXVlbnQgdXBkYXRlcyBzeW5jaHJvbm91c2x5IGluIHRoZSBmdXR1cmUuXG5cdGZsdXNoX3N5bmMoKTtcbn1cblxuLyoqXG4gKiBAdGVtcGxhdGUgVlxuICogQHBhcmFtIHtWYWx1ZTxWPn0gc2lnbmFsXG4gKiBAcmV0dXJucyB7Vn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldChzaWduYWwpIHtcblx0dmFyIGZsYWdzID0gc2lnbmFsLmY7XG5cdHZhciBpc19kZXJpdmVkID0gKGZsYWdzICYgREVSSVZFRCkgIT09IDA7XG5cblx0Ly8gSWYgdGhlIGRlcml2ZWQgaXMgZGVzdHJveWVkLCBqdXN0IGV4ZWN1dGUgaXQgYWdhaW4gd2l0aG91dCByZXRhaW5pbmdcblx0Ly8gaXRzIG1lbW9pc2F0aW9uIHByb3BlcnRpZXMgYXMgdGhlIGRlcml2ZWQgaXMgc3RhbGVcblx0aWYgKGlzX2Rlcml2ZWQgJiYgKGZsYWdzICYgREVTVFJPWUVEKSAhPT0gMCkge1xuXHRcdHZhciB2YWx1ZSA9IGV4ZWN1dGVfZGVyaXZlZCgvKiogQHR5cGUge0Rlcml2ZWR9ICovIChzaWduYWwpKTtcblx0XHQvLyBFbnN1cmUgdGhlIGRlcml2ZWQgcmVtYWlucyBkZXN0cm95ZWRcblx0XHRkZXN0cm95X2Rlcml2ZWQoLyoqIEB0eXBlIHtEZXJpdmVkfSAqLyAoc2lnbmFsKSk7XG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9XG5cblx0aWYgKGNhcHR1cmVkX3NpZ25hbHMgIT09IG51bGwpIHtcblx0XHRjYXB0dXJlZF9zaWduYWxzLmFkZChzaWduYWwpO1xuXHR9XG5cblx0Ly8gUmVnaXN0ZXIgdGhlIGRlcGVuZGVuY3kgb24gdGhlIGN1cnJlbnQgcmVhY3Rpb24gc2lnbmFsLlxuXHRpZiAoYWN0aXZlX3JlYWN0aW9uICE9PSBudWxsKSB7XG5cdFx0aWYgKGRlcml2ZWRfc291cmNlcyAhPT0gbnVsbCAmJiBkZXJpdmVkX3NvdXJjZXMuaW5jbHVkZXMoc2lnbmFsKSkge1xuXHRcdFx0ZS5zdGF0ZV91bnNhZmVfbG9jYWxfcmVhZCgpO1xuXHRcdH1cblx0XHR2YXIgZGVwcyA9IGFjdGl2ZV9yZWFjdGlvbi5kZXBzO1xuXG5cdFx0Ly8gSWYgdGhlIHNpZ25hbCBpcyBhY2Nlc3NpbmcgdGhlIHNhbWUgZGVwZW5kZW5jaWVzIGluIHRoZSBzYW1lXG5cdFx0Ly8gb3JkZXIgYXMgaXQgZGlkIGxhc3QgdGltZSwgaW5jcmVtZW50IGBza2lwcGVkX2RlcHNgXG5cdFx0Ly8gcmF0aGVyIHRoYW4gdXBkYXRpbmcgYG5ld19kZXBzYCwgd2hpY2ggY3JlYXRlcyBHQyBjb3N0XG5cdFx0aWYgKG5ld19kZXBzID09PSBudWxsICYmIGRlcHMgIT09IG51bGwgJiYgZGVwc1tza2lwcGVkX2RlcHNdID09PSBzaWduYWwpIHtcblx0XHRcdHNraXBwZWRfZGVwcysrO1xuXHRcdH0gZWxzZSBpZiAobmV3X2RlcHMgPT09IG51bGwpIHtcblx0XHRcdG5ld19kZXBzID0gW3NpZ25hbF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdG5ld19kZXBzLnB1c2goc2lnbmFsKTtcblx0XHR9XG5cblx0XHRpZiAoXG5cdFx0XHR1bnRyYWNrZWRfd3JpdGVzICE9PSBudWxsICYmXG5cdFx0XHRhY3RpdmVfZWZmZWN0ICE9PSBudWxsICYmXG5cdFx0XHQoYWN0aXZlX2VmZmVjdC5mICYgQ0xFQU4pICE9PSAwICYmXG5cdFx0XHQoYWN0aXZlX2VmZmVjdC5mICYgQlJBTkNIX0VGRkVDVCkgPT09IDAgJiZcblx0XHRcdHVudHJhY2tlZF93cml0ZXMuaW5jbHVkZXMoc2lnbmFsKVxuXHRcdCkge1xuXHRcdFx0c2V0X3NpZ25hbF9zdGF0dXMoYWN0aXZlX2VmZmVjdCwgRElSVFkpO1xuXHRcdFx0c2NoZWR1bGVfZWZmZWN0KGFjdGl2ZV9lZmZlY3QpO1xuXHRcdH1cblx0fSBlbHNlIGlmIChpc19kZXJpdmVkICYmIC8qKiBAdHlwZSB7RGVyaXZlZH0gKi8gKHNpZ25hbCkuZGVwcyA9PT0gbnVsbCkge1xuXHRcdHZhciBkZXJpdmVkID0gLyoqIEB0eXBlIHtEZXJpdmVkfSAqLyAoc2lnbmFsKTtcblx0XHR2YXIgcGFyZW50ID0gZGVyaXZlZC5wYXJlbnQ7XG5cdFx0dmFyIHRhcmdldCA9IGRlcml2ZWQ7XG5cblx0XHR3aGlsZSAocGFyZW50ICE9PSBudWxsKSB7XG5cdFx0XHQvLyBBdHRhY2ggdGhlIGRlcml2ZWQgdG8gdGhlIG5lYXJlc3QgcGFyZW50IGVmZmVjdCwgaWYgdGhlcmUgYXJlIGRlcml2ZWRzXG5cdFx0XHQvLyBpbiBiZXR3ZWVuIHRoZW4gd2UgYWxzbyBuZWVkIHRvIGF0dGFjaCB0aGVtIHRvb1xuXHRcdFx0aWYgKChwYXJlbnQuZiAmIERFUklWRUQpICE9PSAwKSB7XG5cdFx0XHRcdHZhciBwYXJlbnRfZGVyaXZlZCA9IC8qKiBAdHlwZSB7RGVyaXZlZH0gKi8gKHBhcmVudCk7XG5cblx0XHRcdFx0dGFyZ2V0ID0gcGFyZW50X2Rlcml2ZWQ7XG5cdFx0XHRcdHBhcmVudCA9IHBhcmVudF9kZXJpdmVkLnBhcmVudDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZhciBwYXJlbnRfZWZmZWN0ID0gLyoqIEB0eXBlIHtFZmZlY3R9ICovIChwYXJlbnQpO1xuXG5cdFx0XHRcdGlmICghcGFyZW50X2VmZmVjdC5kZXJpdmVkcz8uaW5jbHVkZXModGFyZ2V0KSkge1xuXHRcdFx0XHRcdChwYXJlbnRfZWZmZWN0LmRlcml2ZWRzID8/PSBbXSkucHVzaCh0YXJnZXQpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmIChpc19kZXJpdmVkKSB7XG5cdFx0ZGVyaXZlZCA9IC8qKiBAdHlwZSB7RGVyaXZlZH0gKi8gKHNpZ25hbCk7XG5cblx0XHRpZiAoY2hlY2tfZGlydGluZXNzKGRlcml2ZWQpKSB7XG5cdFx0XHR1cGRhdGVfZGVyaXZlZChkZXJpdmVkKTtcblx0XHR9XG5cdH1cblxuXHRpZiAoXG5cdFx0REVWICYmXG5cdFx0dHJhY2luZ19tb2RlX2ZsYWcgJiZcblx0XHR0cmFjaW5nX2V4cHJlc3Npb25zICE9PSBudWxsICYmXG5cdFx0YWN0aXZlX3JlYWN0aW9uICE9PSBudWxsICYmXG5cdFx0dHJhY2luZ19leHByZXNzaW9ucy5yZWFjdGlvbiA9PT0gYWN0aXZlX3JlYWN0aW9uXG5cdCkge1xuXHRcdC8vIFVzZWQgd2hlbiBtYXBwaW5nIHN0YXRlIGJldHdlZW4gc3BlY2lhbCBibG9ja3MgbGlrZSBgZWFjaGBcblx0XHRpZiAoc2lnbmFsLmRlYnVnKSB7XG5cdFx0XHRzaWduYWwuZGVidWcoKTtcblx0XHR9IGVsc2UgaWYgKHNpZ25hbC5jcmVhdGVkKSB7XG5cdFx0XHR2YXIgZW50cnkgPSB0cmFjaW5nX2V4cHJlc3Npb25zLmVudHJpZXMuZ2V0KHNpZ25hbCk7XG5cblx0XHRcdGlmIChlbnRyeSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdGVudHJ5ID0geyByZWFkOiBbXSB9O1xuXHRcdFx0XHR0cmFjaW5nX2V4cHJlc3Npb25zLmVudHJpZXMuc2V0KHNpZ25hbCwgZW50cnkpO1xuXHRcdFx0fVxuXG5cdFx0XHRlbnRyeS5yZWFkLnB1c2goZ2V0X3N0YWNrKCdUcmFjZWRBdCcpKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gc2lnbmFsLnY7XG59XG5cbi8qKlxuICogTGlrZSBgZ2V0YCwgYnV0IGNoZWNrcyBmb3IgYHVuZGVmaW5lZGAuIFVzZWQgZm9yIGB2YXJgIGRlY2xhcmF0aW9ucyBiZWNhdXNlIHRoZXkgY2FuIGJlIGFjY2Vzc2VkIGJlZm9yZSBiZWluZyBkZWNsYXJlZFxuICogQHRlbXBsYXRlIFZcbiAqIEBwYXJhbSB7VmFsdWU8Vj4gfCB1bmRlZmluZWR9IHNpZ25hbFxuICogQHJldHVybnMge1YgfCB1bmRlZmluZWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzYWZlX2dldChzaWduYWwpIHtcblx0cmV0dXJuIHNpZ25hbCAmJiBnZXQoc2lnbmFsKTtcbn1cblxuLyoqXG4gKiBDYXB0dXJlIGFuIGFycmF5IG9mIGFsbCB0aGUgc2lnbmFscyB0aGF0IGFyZSByZWFkIHdoZW4gYGZuYCBpcyBjYWxsZWRcbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAcGFyYW0geygpID0+IFR9IGZuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjYXB0dXJlX3NpZ25hbHMoZm4pIHtcblx0dmFyIHByZXZpb3VzX2NhcHR1cmVkX3NpZ25hbHMgPSBjYXB0dXJlZF9zaWduYWxzO1xuXHRjYXB0dXJlZF9zaWduYWxzID0gbmV3IFNldCgpO1xuXG5cdHZhciBjYXB0dXJlZCA9IGNhcHR1cmVkX3NpZ25hbHM7XG5cdHZhciBzaWduYWw7XG5cblx0dHJ5IHtcblx0XHR1bnRyYWNrKGZuKTtcblx0XHRpZiAocHJldmlvdXNfY2FwdHVyZWRfc2lnbmFscyAhPT0gbnVsbCkge1xuXHRcdFx0Zm9yIChzaWduYWwgb2YgY2FwdHVyZWRfc2lnbmFscykge1xuXHRcdFx0XHRwcmV2aW91c19jYXB0dXJlZF9zaWduYWxzLmFkZChzaWduYWwpO1xuXHRcdFx0fVxuXHRcdH1cblx0fSBmaW5hbGx5IHtcblx0XHRjYXB0dXJlZF9zaWduYWxzID0gcHJldmlvdXNfY2FwdHVyZWRfc2lnbmFscztcblx0fVxuXG5cdHJldHVybiBjYXB0dXJlZDtcbn1cblxuLyoqXG4gKiBJbnZva2VzIGEgZnVuY3Rpb24gYW5kIGNhcHR1cmVzIGFsbCBzaWduYWxzIHRoYXQgYXJlIHJlYWQgZHVyaW5nIHRoZSBpbnZvY2F0aW9uLFxuICogdGhlbiBpbnZhbGlkYXRlcyB0aGVtLlxuICogQHBhcmFtIHsoKSA9PiBhbnl9IGZuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbnZhbGlkYXRlX2lubmVyX3NpZ25hbHMoZm4pIHtcblx0dmFyIGNhcHR1cmVkID0gY2FwdHVyZV9zaWduYWxzKCgpID0+IHVudHJhY2soZm4pKTtcblxuXHRmb3IgKHZhciBzaWduYWwgb2YgY2FwdHVyZWQpIHtcblx0XHQvLyBHbyBvbmUgbGV2ZWwgdXAgYmVjYXVzZSBkZXJpdmVkIHNpZ25hbHMgY3JlYXRlZCBhcyBwYXJ0IG9mIHByb3BzIGluIGxlZ2FjeSBtb2RlXG5cdFx0aWYgKChzaWduYWwuZiAmIExFR0FDWV9ERVJJVkVEX1BST1ApICE9PSAwKSB7XG5cdFx0XHRmb3IgKGNvbnN0IGRlcCBvZiAvKiogQHR5cGUge0Rlcml2ZWR9ICovIChzaWduYWwpLmRlcHMgfHwgW10pIHtcblx0XHRcdFx0aWYgKChkZXAuZiAmIERFUklWRUQpID09PSAwKSB7XG5cdFx0XHRcdFx0Ly8gVXNlIGludGVybmFsX3NldCBpbnN0ZWFkIG9mIHNldCBoZXJlIGFuZCBiZWxvdyB0byBhdm9pZCBtdXRhdGlvbiB2YWxpZGF0aW9uXG5cdFx0XHRcdFx0aW50ZXJuYWxfc2V0KGRlcCwgZGVwLnYpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGludGVybmFsX3NldChzaWduYWwsIHNpZ25hbC52KTtcblx0XHR9XG5cdH1cbn1cblxuLyoqXG4gKiBXaGVuIHVzZWQgaW5zaWRlIGEgW2AkZGVyaXZlZGBdKGh0dHBzOi8vc3ZlbHRlLmRldi9kb2NzL3N2ZWx0ZS8kZGVyaXZlZCkgb3IgW2AkZWZmZWN0YF0oaHR0cHM6Ly9zdmVsdGUuZGV2L2RvY3Mvc3ZlbHRlLyRlZmZlY3QpLFxuICogYW55IHN0YXRlIHJlYWQgaW5zaWRlIGBmbmAgd2lsbCBub3QgYmUgdHJlYXRlZCBhcyBhIGRlcGVuZGVuY3kuXG4gKlxuICogYGBgdHNcbiAqICRlZmZlY3QoKCkgPT4ge1xuICogICAvLyB0aGlzIHdpbGwgcnVuIHdoZW4gYGRhdGFgIGNoYW5nZXMsIGJ1dCBub3Qgd2hlbiBgdGltZWAgY2hhbmdlc1xuICogICBzYXZlKGRhdGEsIHtcbiAqICAgICB0aW1lc3RhbXA6IHVudHJhY2soKCkgPT4gdGltZSlcbiAqICAgfSk7XG4gKiB9KTtcbiAqIGBgYFxuICogQHRlbXBsYXRlIFRcbiAqIEBwYXJhbSB7KCkgPT4gVH0gZm5cbiAqIEByZXR1cm5zIHtUfVxuICovXG5leHBvcnQgZnVuY3Rpb24gdW50cmFjayhmbikge1xuXHRjb25zdCBwcmV2aW91c19yZWFjdGlvbiA9IGFjdGl2ZV9yZWFjdGlvbjtcblx0dHJ5IHtcblx0XHRhY3RpdmVfcmVhY3Rpb24gPSBudWxsO1xuXHRcdHJldHVybiBmbigpO1xuXHR9IGZpbmFsbHkge1xuXHRcdGFjdGl2ZV9yZWFjdGlvbiA9IHByZXZpb3VzX3JlYWN0aW9uO1xuXHR9XG59XG5cbmNvbnN0IFNUQVRVU19NQVNLID0gfihESVJUWSB8IE1BWUJFX0RJUlRZIHwgQ0xFQU4pO1xuXG4vKipcbiAqIEBwYXJhbSB7U2lnbmFsfSBzaWduYWxcbiAqIEBwYXJhbSB7bnVtYmVyfSBzdGF0dXNcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0X3NpZ25hbF9zdGF0dXMoc2lnbmFsLCBzdGF0dXMpIHtcblx0c2lnbmFsLmYgPSAoc2lnbmFsLmYgJiBTVEFUVVNfTUFTSykgfCBzdGF0dXM7XG59XG5cbi8qKlxuICogUmV0cmlldmVzIHRoZSBjb250ZXh0IHRoYXQgYmVsb25ncyB0byB0aGUgY2xvc2VzdCBwYXJlbnQgY29tcG9uZW50IHdpdGggdGhlIHNwZWNpZmllZCBga2V5YC5cbiAqIE11c3QgYmUgY2FsbGVkIGR1cmluZyBjb21wb25lbnQgaW5pdGlhbGlzYXRpb24uXG4gKlxuICogQHRlbXBsYXRlIFRcbiAqIEBwYXJhbSB7YW55fSBrZXlcbiAqIEByZXR1cm5zIHtUfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29udGV4dChrZXkpIHtcblx0Y29uc3QgY29udGV4dF9tYXAgPSBnZXRfb3JfaW5pdF9jb250ZXh0X21hcCgnZ2V0Q29udGV4dCcpO1xuXHRjb25zdCByZXN1bHQgPSAvKiogQHR5cGUge1R9ICovIChjb250ZXh0X21hcC5nZXQoa2V5KSk7XG5cblx0aWYgKERFVikge1xuXHRcdGNvbnN0IGZuID0gLyoqIEB0eXBlIHtDb21wb25lbnRDb250ZXh0fSAqLyAoY29tcG9uZW50X2NvbnRleHQpLmZ1bmN0aW9uO1xuXHRcdGlmIChmbikge1xuXHRcdFx0YWRkX293bmVyKHJlc3VsdCwgZm4sIHRydWUpO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogQXNzb2NpYXRlcyBhbiBhcmJpdHJhcnkgYGNvbnRleHRgIG9iamVjdCB3aXRoIHRoZSBjdXJyZW50IGNvbXBvbmVudCBhbmQgdGhlIHNwZWNpZmllZCBga2V5YFxuICogYW5kIHJldHVybnMgdGhhdCBvYmplY3QuIFRoZSBjb250ZXh0IGlzIHRoZW4gYXZhaWxhYmxlIHRvIGNoaWxkcmVuIG9mIHRoZSBjb21wb25lbnRcbiAqIChpbmNsdWRpbmcgc2xvdHRlZCBjb250ZW50KSB3aXRoIGBnZXRDb250ZXh0YC5cbiAqXG4gKiBMaWtlIGxpZmVjeWNsZSBmdW5jdGlvbnMsIHRoaXMgbXVzdCBiZSBjYWxsZWQgZHVyaW5nIGNvbXBvbmVudCBpbml0aWFsaXNhdGlvbi5cbiAqXG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHthbnl9IGtleVxuICogQHBhcmFtIHtUfSBjb250ZXh0XG4gKiBAcmV0dXJucyB7VH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldENvbnRleHQoa2V5LCBjb250ZXh0KSB7XG5cdGNvbnN0IGNvbnRleHRfbWFwID0gZ2V0X29yX2luaXRfY29udGV4dF9tYXAoJ3NldENvbnRleHQnKTtcblx0Y29udGV4dF9tYXAuc2V0KGtleSwgY29udGV4dCk7XG5cdHJldHVybiBjb250ZXh0O1xufVxuXG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIGEgZ2l2ZW4gYGtleWAgaGFzIGJlZW4gc2V0IGluIHRoZSBjb250ZXh0IG9mIGEgcGFyZW50IGNvbXBvbmVudC5cbiAqIE11c3QgYmUgY2FsbGVkIGR1cmluZyBjb21wb25lbnQgaW5pdGlhbGlzYXRpb24uXG4gKlxuICogQHBhcmFtIHthbnl9IGtleVxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBoYXNDb250ZXh0KGtleSkge1xuXHRjb25zdCBjb250ZXh0X21hcCA9IGdldF9vcl9pbml0X2NvbnRleHRfbWFwKCdoYXNDb250ZXh0Jyk7XG5cdHJldHVybiBjb250ZXh0X21hcC5oYXMoa2V5KTtcbn1cblxuLyoqXG4gKiBSZXRyaWV2ZXMgdGhlIHdob2xlIGNvbnRleHQgbWFwIHRoYXQgYmVsb25ncyB0byB0aGUgY2xvc2VzdCBwYXJlbnQgY29tcG9uZW50LlxuICogTXVzdCBiZSBjYWxsZWQgZHVyaW5nIGNvbXBvbmVudCBpbml0aWFsaXNhdGlvbi4gVXNlZnVsLCBmb3IgZXhhbXBsZSwgaWYgeW91XG4gKiBwcm9ncmFtbWF0aWNhbGx5IGNyZWF0ZSBhIGNvbXBvbmVudCBhbmQgd2FudCB0byBwYXNzIHRoZSBleGlzdGluZyBjb250ZXh0IHRvIGl0LlxuICpcbiAqIEB0ZW1wbGF0ZSB7TWFwPGFueSwgYW55Pn0gW1Q9TWFwPGFueSwgYW55Pl1cbiAqIEByZXR1cm5zIHtUfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0QWxsQ29udGV4dHMoKSB7XG5cdGNvbnN0IGNvbnRleHRfbWFwID0gZ2V0X29yX2luaXRfY29udGV4dF9tYXAoJ2dldEFsbENvbnRleHRzJyk7XG5cblx0aWYgKERFVikge1xuXHRcdGNvbnN0IGZuID0gY29tcG9uZW50X2NvbnRleHQ/LmZ1bmN0aW9uO1xuXHRcdGlmIChmbikge1xuXHRcdFx0Zm9yIChjb25zdCB2YWx1ZSBvZiBjb250ZXh0X21hcC52YWx1ZXMoKSkge1xuXHRcdFx0XHRhZGRfb3duZXIodmFsdWUsIGZuLCB0cnVlKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gLyoqIEB0eXBlIHtUfSAqLyAoY29udGV4dF9tYXApO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKiBAcmV0dXJucyB7TWFwPHVua25vd24sIHVua25vd24+fVxuICovXG5mdW5jdGlvbiBnZXRfb3JfaW5pdF9jb250ZXh0X21hcChuYW1lKSB7XG5cdGlmIChjb21wb25lbnRfY29udGV4dCA9PT0gbnVsbCkge1xuXHRcdGxpZmVjeWNsZV9vdXRzaWRlX2NvbXBvbmVudChuYW1lKTtcblx0fVxuXG5cdHJldHVybiAoY29tcG9uZW50X2NvbnRleHQuYyA/Pz0gbmV3IE1hcChnZXRfcGFyZW50X2NvbnRleHQoY29tcG9uZW50X2NvbnRleHQpIHx8IHVuZGVmaW5lZCkpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7Q29tcG9uZW50Q29udGV4dH0gY29tcG9uZW50X2NvbnRleHRcbiAqIEByZXR1cm5zIHtNYXA8dW5rbm93biwgdW5rbm93bj4gfCBudWxsfVxuICovXG5mdW5jdGlvbiBnZXRfcGFyZW50X2NvbnRleHQoY29tcG9uZW50X2NvbnRleHQpIHtcblx0bGV0IHBhcmVudCA9IGNvbXBvbmVudF9jb250ZXh0LnA7XG5cdHdoaWxlIChwYXJlbnQgIT09IG51bGwpIHtcblx0XHRjb25zdCBjb250ZXh0X21hcCA9IHBhcmVudC5jO1xuXHRcdGlmIChjb250ZXh0X21hcCAhPT0gbnVsbCkge1xuXHRcdFx0cmV0dXJuIGNvbnRleHRfbWFwO1xuXHRcdH1cblx0XHRwYXJlbnQgPSBwYXJlbnQucDtcblx0fVxuXHRyZXR1cm4gbnVsbDtcbn1cblxuLyoqXG4gKiBAdGVtcGxhdGUge251bWJlciB8IGJpZ2ludH0gVFxuICogQHBhcmFtIHtWYWx1ZTxUPn0gc2lnbmFsXG4gKiBAcGFyYW0gezEgfCAtMX0gW2RdXG4gKiBAcmV0dXJucyB7VH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZShzaWduYWwsIGQgPSAxKSB7XG5cdHZhciB2YWx1ZSA9IGdldChzaWduYWwpO1xuXHR2YXIgcmVzdWx0ID0gZCA9PT0gMSA/IHZhbHVlKysgOiB2YWx1ZS0tO1xuXG5cdHNldChzaWduYWwsIHZhbHVlKTtcblxuXHQvLyBAdHMtZXhwZWN0LWVycm9yXG5cdHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogQHRlbXBsYXRlIHtudW1iZXIgfCBiaWdpbnR9IFRcbiAqIEBwYXJhbSB7VmFsdWU8VD59IHNpZ25hbFxuICogQHBhcmFtIHsxIHwgLTF9IFtkXVxuICogQHJldHVybnMge1R9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVfcHJlKHNpZ25hbCwgZCA9IDEpIHtcblx0dmFyIHZhbHVlID0gZ2V0KHNpZ25hbCk7XG5cblx0Ly8gQHRzLWV4cGVjdC1lcnJvclxuXHRyZXR1cm4gc2V0KHNpZ25hbCwgZCA9PT0gMSA/ICsrdmFsdWUgOiAtLXZhbHVlKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1JlY29yZDxzdHJpbmcsIHVua25vd24+fSBvYmpcbiAqIEBwYXJhbSB7c3RyaW5nW119IGtleXNcbiAqIEByZXR1cm5zIHtSZWNvcmQ8c3RyaW5nLCB1bmtub3duPn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGV4Y2x1ZGVfZnJvbV9vYmplY3Qob2JqLCBrZXlzKSB7XG5cdC8qKiBAdHlwZSB7UmVjb3JkPHN0cmluZywgdW5rbm93bj59ICovXG5cdHZhciByZXN1bHQgPSB7fTtcblxuXHRmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG5cdFx0aWYgKCFrZXlzLmluY2x1ZGVzKGtleSkpIHtcblx0XHRcdHJlc3VsdFtrZXldID0gb2JqW2tleV07XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1JlY29yZDxzdHJpbmcsIHVua25vd24+fSBwcm9wc1xuICogQHBhcmFtIHthbnl9IHJ1bmVzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbZm5dXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHB1c2gocHJvcHMsIHJ1bmVzID0gZmFsc2UsIGZuKSB7XG5cdGNvbXBvbmVudF9jb250ZXh0ID0ge1xuXHRcdHA6IGNvbXBvbmVudF9jb250ZXh0LFxuXHRcdGM6IG51bGwsXG5cdFx0ZTogbnVsbCxcblx0XHRtOiBmYWxzZSxcblx0XHRzOiBwcm9wcyxcblx0XHR4OiBudWxsLFxuXHRcdGw6IG51bGxcblx0fTtcblxuXHRpZiAobGVnYWN5X21vZGVfZmxhZyAmJiAhcnVuZXMpIHtcblx0XHRjb21wb25lbnRfY29udGV4dC5sID0ge1xuXHRcdFx0czogbnVsbCxcblx0XHRcdHU6IG51bGwsXG5cdFx0XHRyMTogW10sXG5cdFx0XHRyMjogc291cmNlKGZhbHNlKVxuXHRcdH07XG5cdH1cblxuXHRpZiAoREVWKSB7XG5cdFx0Ly8gY29tcG9uZW50IGZ1bmN0aW9uXG5cdFx0Y29tcG9uZW50X2NvbnRleHQuZnVuY3Rpb24gPSBmbjtcblx0XHRkZXZfY3VycmVudF9jb21wb25lbnRfZnVuY3Rpb24gPSBmbjtcblx0fVxufVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSB7UmVjb3JkPHN0cmluZywgYW55Pn0gVFxuICogQHBhcmFtIHtUfSBbY29tcG9uZW50XVxuICogQHJldHVybnMge1R9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwb3AoY29tcG9uZW50KSB7XG5cdGNvbnN0IGNvbnRleHRfc3RhY2tfaXRlbSA9IGNvbXBvbmVudF9jb250ZXh0O1xuXHRpZiAoY29udGV4dF9zdGFja19pdGVtICE9PSBudWxsKSB7XG5cdFx0aWYgKGNvbXBvbmVudCAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRjb250ZXh0X3N0YWNrX2l0ZW0ueCA9IGNvbXBvbmVudDtcblx0XHR9XG5cdFx0Y29uc3QgY29tcG9uZW50X2VmZmVjdHMgPSBjb250ZXh0X3N0YWNrX2l0ZW0uZTtcblx0XHRpZiAoY29tcG9uZW50X2VmZmVjdHMgIT09IG51bGwpIHtcblx0XHRcdHZhciBwcmV2aW91c19lZmZlY3QgPSBhY3RpdmVfZWZmZWN0O1xuXHRcdFx0dmFyIHByZXZpb3VzX3JlYWN0aW9uID0gYWN0aXZlX3JlYWN0aW9uO1xuXHRcdFx0Y29udGV4dF9zdGFja19pdGVtLmUgPSBudWxsO1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBjb21wb25lbnRfZWZmZWN0cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdHZhciBjb21wb25lbnRfZWZmZWN0ID0gY29tcG9uZW50X2VmZmVjdHNbaV07XG5cdFx0XHRcdFx0c2V0X2FjdGl2ZV9lZmZlY3QoY29tcG9uZW50X2VmZmVjdC5lZmZlY3QpO1xuXHRcdFx0XHRcdHNldF9hY3RpdmVfcmVhY3Rpb24oY29tcG9uZW50X2VmZmVjdC5yZWFjdGlvbik7XG5cdFx0XHRcdFx0ZWZmZWN0KGNvbXBvbmVudF9lZmZlY3QuZm4pO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGZpbmFsbHkge1xuXHRcdFx0XHRzZXRfYWN0aXZlX2VmZmVjdChwcmV2aW91c19lZmZlY3QpO1xuXHRcdFx0XHRzZXRfYWN0aXZlX3JlYWN0aW9uKHByZXZpb3VzX3JlYWN0aW9uKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0Y29tcG9uZW50X2NvbnRleHQgPSBjb250ZXh0X3N0YWNrX2l0ZW0ucDtcblx0XHRpZiAoREVWKSB7XG5cdFx0XHRkZXZfY3VycmVudF9jb21wb25lbnRfZnVuY3Rpb24gPSBjb250ZXh0X3N0YWNrX2l0ZW0ucD8uZnVuY3Rpb24gPz8gbnVsbDtcblx0XHR9XG5cdFx0Y29udGV4dF9zdGFja19pdGVtLm0gPSB0cnVlO1xuXHR9XG5cdC8vIE1pY3JvLW9wdGltaXphdGlvbjogRG9uJ3Qgc2V0IC5hIGFib3ZlIHRvIHRoZSBlbXB0eSBvYmplY3Rcblx0Ly8gc28gaXQgY2FuIGJlIGdhcmJhZ2UtY29sbGVjdGVkIHdoZW4gdGhlIHJldHVybiBoZXJlIGlzIHVudXNlZFxuXHRyZXR1cm4gY29tcG9uZW50IHx8IC8qKiBAdHlwZSB7VH0gKi8gKHt9KTtcbn1cblxuLyoqXG4gKiBQb3NzaWJseSB0cmF2ZXJzZSBhbiBvYmplY3QgYW5kIHJlYWQgYWxsIGl0cyBwcm9wZXJ0aWVzIHNvIHRoYXQgdGhleSdyZSBhbGwgcmVhY3RpdmUgaW4gY2FzZSB0aGlzIGlzIGAkc3RhdGVgLlxuICogRG9lcyBvbmx5IGNoZWNrIGZpcnN0IGxldmVsIG9mIGFuIG9iamVjdCBmb3IgcGVyZm9ybWFuY2UgcmVhc29ucyAoaGV1cmlzdGljIHNob3VsZCBiZSBnb29kIGZvciA5OSUgb2YgYWxsIGNhc2VzKS5cbiAqIEBwYXJhbSB7YW55fSB2YWx1ZVxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWVwX3JlYWRfc3RhdGUodmFsdWUpIHtcblx0aWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcgfHwgIXZhbHVlIHx8IHZhbHVlIGluc3RhbmNlb2YgRXZlbnRUYXJnZXQpIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRpZiAoU1RBVEVfU1lNQk9MIGluIHZhbHVlKSB7XG5cdFx0ZGVlcF9yZWFkKHZhbHVlKTtcblx0fSBlbHNlIGlmICghQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcblx0XHRmb3IgKGxldCBrZXkgaW4gdmFsdWUpIHtcblx0XHRcdGNvbnN0IHByb3AgPSB2YWx1ZVtrZXldO1xuXHRcdFx0aWYgKHR5cGVvZiBwcm9wID09PSAnb2JqZWN0JyAmJiBwcm9wICYmIFNUQVRFX1NZTUJPTCBpbiBwcm9wKSB7XG5cdFx0XHRcdGRlZXBfcmVhZChwcm9wKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn1cblxuLyoqXG4gKiBEZWVwbHkgdHJhdmVyc2UgYW4gb2JqZWN0IGFuZCByZWFkIGFsbCBpdHMgcHJvcGVydGllc1xuICogc28gdGhhdCB0aGV5J3JlIGFsbCByZWFjdGl2ZSBpbiBjYXNlIHRoaXMgaXMgYCRzdGF0ZWBcbiAqIEBwYXJhbSB7YW55fSB2YWx1ZVxuICogQHBhcmFtIHtTZXQ8YW55Pn0gdmlzaXRlZFxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWVwX3JlYWQodmFsdWUsIHZpc2l0ZWQgPSBuZXcgU2V0KCkpIHtcblx0aWYgKFxuXHRcdHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiZcblx0XHR2YWx1ZSAhPT0gbnVsbCAmJlxuXHRcdC8vIFdlIGRvbid0IHdhbnQgdG8gdHJhdmVyc2UgRE9NIGVsZW1lbnRzXG5cdFx0ISh2YWx1ZSBpbnN0YW5jZW9mIEV2ZW50VGFyZ2V0KSAmJlxuXHRcdCF2aXNpdGVkLmhhcyh2YWx1ZSlcblx0KSB7XG5cdFx0dmlzaXRlZC5hZGQodmFsdWUpO1xuXHRcdC8vIFdoZW4gd29ya2luZyB3aXRoIGEgcG9zc2libGUgU3ZlbHRlRGF0ZSwgdGhpc1xuXHRcdC8vIHdpbGwgZW5zdXJlIHdlIGNhcHR1cmUgY2hhbmdlcyB0byBpdC5cblx0XHRpZiAodmFsdWUgaW5zdGFuY2VvZiBEYXRlKSB7XG5cdFx0XHR2YWx1ZS5nZXRUaW1lKCk7XG5cdFx0fVxuXHRcdGZvciAobGV0IGtleSBpbiB2YWx1ZSkge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0ZGVlcF9yZWFkKHZhbHVlW2tleV0sIHZpc2l0ZWQpO1xuXHRcdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0XHQvLyBjb250aW51ZVxuXHRcdFx0fVxuXHRcdH1cblx0XHRjb25zdCBwcm90byA9IGdldF9wcm90b3R5cGVfb2YodmFsdWUpO1xuXHRcdGlmIChcblx0XHRcdHByb3RvICE9PSBPYmplY3QucHJvdG90eXBlICYmXG5cdFx0XHRwcm90byAhPT0gQXJyYXkucHJvdG90eXBlICYmXG5cdFx0XHRwcm90byAhPT0gTWFwLnByb3RvdHlwZSAmJlxuXHRcdFx0cHJvdG8gIT09IFNldC5wcm90b3R5cGUgJiZcblx0XHRcdHByb3RvICE9PSBEYXRlLnByb3RvdHlwZVxuXHRcdCkge1xuXHRcdFx0Y29uc3QgZGVzY3JpcHRvcnMgPSBnZXRfZGVzY3JpcHRvcnMocHJvdG8pO1xuXHRcdFx0Zm9yIChsZXQga2V5IGluIGRlc2NyaXB0b3JzKSB7XG5cdFx0XHRcdGNvbnN0IGdldCA9IGRlc2NyaXB0b3JzW2tleV0uZ2V0O1xuXHRcdFx0XHRpZiAoZ2V0KSB7XG5cdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdGdldC5jYWxsKHZhbHVlKTtcblx0XHRcdFx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRcdFx0XHQvLyBjb250aW51ZVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuXG5pZiAoREVWKSB7XG5cdC8qKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gcnVuZVxuXHQgKi9cblx0ZnVuY3Rpb24gdGhyb3dfcnVuZV9lcnJvcihydW5lKSB7XG5cdFx0aWYgKCEocnVuZSBpbiBnbG9iYWxUaGlzKSkge1xuXHRcdFx0Ly8gVE9ETyBpZiBwZW9wbGUgc3RhcnQgYWRqdXN0aW5nIHRoZSBcInRoaXMgY2FuIGNvbnRhaW4gcnVuZXNcIiBjb25maWcgdGhyb3VnaCB2LXAtcyBtb3JlLCBhZGp1c3QgdGhpcyBtZXNzYWdlXG5cdFx0XHQvKiogQHR5cGUge2FueX0gKi9cblx0XHRcdGxldCB2YWx1ZTsgLy8gbGV0J3MgaG9wZSBub29uZSBtb2RpZmllcyB0aGlzIGdsb2JhbCwgYnV0IGJlbHRzIGFuZCBicmFjZXNcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShnbG9iYWxUaGlzLCBydW5lLCB7XG5cdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGdldHRlci1yZXR1cm5cblx0XHRcdFx0Z2V0OiAoKSA9PiB7XG5cdFx0XHRcdFx0aWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRlLnJ1bmVfb3V0c2lkZV9zdmVsdGUocnVuZSk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHNldDogKHYpID0+IHtcblx0XHRcdFx0XHR2YWx1ZSA9IHY7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH1cblx0fVxuXG5cdHRocm93X3J1bmVfZXJyb3IoJyRzdGF0ZScpO1xuXHR0aHJvd19ydW5lX2Vycm9yKCckZWZmZWN0Jyk7XG5cdHRocm93X3J1bmVfZXJyb3IoJyRkZXJpdmVkJyk7XG5cdHRocm93X3J1bmVfZXJyb3IoJyRpbnNwZWN0Jyk7XG5cdHRocm93X3J1bmVfZXJyb3IoJyRwcm9wcycpO1xuXHR0aHJvd19ydW5lX2Vycm9yKCckYmluZGFibGUnKTtcbn1cbiIsImNvbnN0IHJlZ2V4X3JldHVybl9jaGFyYWN0ZXJzID0gL1xcci9nO1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBoYXNoKHN0cikge1xuXHRzdHIgPSBzdHIucmVwbGFjZShyZWdleF9yZXR1cm5fY2hhcmFjdGVycywgJycpO1xuXHRsZXQgaGFzaCA9IDUzODE7XG5cdGxldCBpID0gc3RyLmxlbmd0aDtcblxuXHR3aGlsZSAoaS0tKSBoYXNoID0gKChoYXNoIDw8IDUpIC0gaGFzaCkgXiBzdHIuY2hhckNvZGVBdChpKTtcblx0cmV0dXJuIChoYXNoID4+PiAwKS50b1N0cmluZygzNik7XG59XG5cbmNvbnN0IFZPSURfRUxFTUVOVF9OQU1FUyA9IFtcblx0J2FyZWEnLFxuXHQnYmFzZScsXG5cdCdicicsXG5cdCdjb2wnLFxuXHQnY29tbWFuZCcsXG5cdCdlbWJlZCcsXG5cdCdocicsXG5cdCdpbWcnLFxuXHQnaW5wdXQnLFxuXHQna2V5Z2VuJyxcblx0J2xpbmsnLFxuXHQnbWV0YScsXG5cdCdwYXJhbScsXG5cdCdzb3VyY2UnLFxuXHQndHJhY2snLFxuXHQnd2JyJ1xuXTtcblxuLyoqXG4gKiBSZXR1cm5zIGB0cnVlYCBpZiBgbmFtZWAgaXMgb2YgYSB2b2lkIGVsZW1lbnRcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc192b2lkKG5hbWUpIHtcblx0cmV0dXJuIFZPSURfRUxFTUVOVF9OQU1FUy5pbmNsdWRlcyhuYW1lKSB8fCBuYW1lLnRvTG93ZXJDYXNlKCkgPT09ICchZG9jdHlwZSc7XG59XG5cbmNvbnN0IFJFU0VSVkVEX1dPUkRTID0gW1xuXHQnYXJndW1lbnRzJyxcblx0J2F3YWl0Jyxcblx0J2JyZWFrJyxcblx0J2Nhc2UnLFxuXHQnY2F0Y2gnLFxuXHQnY2xhc3MnLFxuXHQnY29uc3QnLFxuXHQnY29udGludWUnLFxuXHQnZGVidWdnZXInLFxuXHQnZGVmYXVsdCcsXG5cdCdkZWxldGUnLFxuXHQnZG8nLFxuXHQnZWxzZScsXG5cdCdlbnVtJyxcblx0J2V2YWwnLFxuXHQnZXhwb3J0Jyxcblx0J2V4dGVuZHMnLFxuXHQnZmFsc2UnLFxuXHQnZmluYWxseScsXG5cdCdmb3InLFxuXHQnZnVuY3Rpb24nLFxuXHQnaWYnLFxuXHQnaW1wbGVtZW50cycsXG5cdCdpbXBvcnQnLFxuXHQnaW4nLFxuXHQnaW5zdGFuY2VvZicsXG5cdCdpbnRlcmZhY2UnLFxuXHQnbGV0Jyxcblx0J25ldycsXG5cdCdudWxsJyxcblx0J3BhY2thZ2UnLFxuXHQncHJpdmF0ZScsXG5cdCdwcm90ZWN0ZWQnLFxuXHQncHVibGljJyxcblx0J3JldHVybicsXG5cdCdzdGF0aWMnLFxuXHQnc3VwZXInLFxuXHQnc3dpdGNoJyxcblx0J3RoaXMnLFxuXHQndGhyb3cnLFxuXHQndHJ1ZScsXG5cdCd0cnknLFxuXHQndHlwZW9mJyxcblx0J3ZhcicsXG5cdCd2b2lkJyxcblx0J3doaWxlJyxcblx0J3dpdGgnLFxuXHQneWllbGQnXG5dO1xuXG4vKipcbiAqIFJldHVybnMgYHRydWVgIGlmIGB3b3JkYCBpcyBhIHJlc2VydmVkIEphdmFTY3JpcHQga2V5d29yZFxuICogQHBhcmFtIHtzdHJpbmd9IHdvcmRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzX3Jlc2VydmVkKHdvcmQpIHtcblx0cmV0dXJuIFJFU0VSVkVEX1dPUkRTLmluY2x1ZGVzKHdvcmQpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc19jYXB0dXJlX2V2ZW50KG5hbWUpIHtcblx0cmV0dXJuIG5hbWUuZW5kc1dpdGgoJ2NhcHR1cmUnKSAmJiBuYW1lICE9PSAnZ290cG9pbnRlcmNhcHR1cmUnICYmIG5hbWUgIT09ICdsb3N0cG9pbnRlcmNhcHR1cmUnO1xufVxuXG4vKiogTGlzdCBvZiBFbGVtZW50IGV2ZW50cyB0aGF0IHdpbGwgYmUgZGVsZWdhdGVkICovXG5jb25zdCBERUxFR0FURURfRVZFTlRTID0gW1xuXHQnYmVmb3JlaW5wdXQnLFxuXHQnY2xpY2snLFxuXHQnY2hhbmdlJyxcblx0J2RibGNsaWNrJyxcblx0J2NvbnRleHRtZW51Jyxcblx0J2ZvY3VzaW4nLFxuXHQnZm9jdXNvdXQnLFxuXHQnaW5wdXQnLFxuXHQna2V5ZG93bicsXG5cdCdrZXl1cCcsXG5cdCdtb3VzZWRvd24nLFxuXHQnbW91c2Vtb3ZlJyxcblx0J21vdXNlb3V0Jyxcblx0J21vdXNlb3ZlcicsXG5cdCdtb3VzZXVwJyxcblx0J3BvaW50ZXJkb3duJyxcblx0J3BvaW50ZXJtb3ZlJyxcblx0J3BvaW50ZXJvdXQnLFxuXHQncG9pbnRlcm92ZXInLFxuXHQncG9pbnRlcnVwJyxcblx0J3RvdWNoZW5kJyxcblx0J3RvdWNobW92ZScsXG5cdCd0b3VjaHN0YXJ0J1xuXTtcblxuLyoqXG4gKiBSZXR1cm5zIGB0cnVlYCBpZiBgZXZlbnRfbmFtZWAgaXMgYSBkZWxlZ2F0ZWQgZXZlbnRcbiAqIEBwYXJhbSB7c3RyaW5nfSBldmVudF9uYW1lXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc19kZWxlZ2F0ZWQoZXZlbnRfbmFtZSkge1xuXHRyZXR1cm4gREVMRUdBVEVEX0VWRU5UUy5pbmNsdWRlcyhldmVudF9uYW1lKTtcbn1cblxuLyoqXG4gKiBBdHRyaWJ1dGVzIHRoYXQgYXJlIGJvb2xlYW4sIGkuZS4gdGhleSBhcmUgcHJlc2VudCBvciBub3QgcHJlc2VudC5cbiAqL1xuY29uc3QgRE9NX0JPT0xFQU5fQVRUUklCVVRFUyA9IFtcblx0J2FsbG93ZnVsbHNjcmVlbicsXG5cdCdhc3luYycsXG5cdCdhdXRvZm9jdXMnLFxuXHQnYXV0b3BsYXknLFxuXHQnY2hlY2tlZCcsXG5cdCdjb250cm9scycsXG5cdCdkZWZhdWx0Jyxcblx0J2Rpc2FibGVkJyxcblx0J2Zvcm1ub3ZhbGlkYXRlJyxcblx0J2hpZGRlbicsXG5cdCdpbmRldGVybWluYXRlJyxcblx0J2lzbWFwJyxcblx0J2xvb3AnLFxuXHQnbXVsdGlwbGUnLFxuXHQnbXV0ZWQnLFxuXHQnbm9tb2R1bGUnLFxuXHQnbm92YWxpZGF0ZScsXG5cdCdvcGVuJyxcblx0J3BsYXlzaW5saW5lJyxcblx0J3JlYWRvbmx5Jyxcblx0J3JlcXVpcmVkJyxcblx0J3JldmVyc2VkJyxcblx0J3NlYW1sZXNzJyxcblx0J3NlbGVjdGVkJyxcblx0J3dlYmtpdGRpcmVjdG9yeSdcbl07XG5cbi8qKlxuICogUmV0dXJucyBgdHJ1ZWAgaWYgYG5hbWVgIGlzIGEgYm9vbGVhbiBhdHRyaWJ1dGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc19ib29sZWFuX2F0dHJpYnV0ZShuYW1lKSB7XG5cdHJldHVybiBET01fQk9PTEVBTl9BVFRSSUJVVEVTLmluY2x1ZGVzKG5hbWUpO1xufVxuXG4vKipcbiAqIEB0eXBlIHtSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+fVxuICogTGlzdCBvZiBhdHRyaWJ1dGUgbmFtZXMgdGhhdCBzaG91bGQgYmUgYWxpYXNlZCB0byB0aGVpciBwcm9wZXJ0eSBuYW1lc1xuICogYmVjYXVzZSB0aGV5IGJlaGF2ZSBkaWZmZXJlbnRseSBiZXR3ZWVuIHNldHRpbmcgdGhlbSBhcyBhbiBhdHRyaWJ1dGUgYW5kXG4gKiBzZXR0aW5nIHRoZW0gYXMgYSBwcm9wZXJ0eS5cbiAqL1xuY29uc3QgQVRUUklCVVRFX0FMSUFTRVMgPSB7XG5cdC8vIG5vIGBjbGFzczogJ2NsYXNzTmFtZSdgIGJlY2F1c2Ugd2UgaGFuZGxlIHRoYXQgc2VwYXJhdGVseVxuXHRmb3Jtbm92YWxpZGF0ZTogJ2Zvcm1Ob1ZhbGlkYXRlJyxcblx0aXNtYXA6ICdpc01hcCcsXG5cdG5vbW9kdWxlOiAnbm9Nb2R1bGUnLFxuXHRwbGF5c2lubGluZTogJ3BsYXlzSW5saW5lJyxcblx0cmVhZG9ubHk6ICdyZWFkT25seScsXG5cdGRlZmF1bHR2YWx1ZTogJ2RlZmF1bHRWYWx1ZScsXG5cdGRlZmF1bHRjaGVja2VkOiAnZGVmYXVsdENoZWNrZWQnLFxuXHRzcmNvYmplY3Q6ICdzcmNPYmplY3QnXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBub3JtYWxpemVfYXR0cmlidXRlKG5hbWUpIHtcblx0bmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblx0cmV0dXJuIEFUVFJJQlVURV9BTElBU0VTW25hbWVdID8/IG5hbWU7XG59XG5cbmNvbnN0IERPTV9QUk9QRVJUSUVTID0gW1xuXHQuLi5ET01fQk9PTEVBTl9BVFRSSUJVVEVTLFxuXHQnZm9ybU5vVmFsaWRhdGUnLFxuXHQnaXNNYXAnLFxuXHQnbm9Nb2R1bGUnLFxuXHQncGxheXNJbmxpbmUnLFxuXHQncmVhZE9ubHknLFxuXHQndmFsdWUnLFxuXHQnaW5lcnQnLFxuXHQndm9sdW1lJyxcblx0J2RlZmF1bHRWYWx1ZScsXG5cdCdkZWZhdWx0Q2hlY2tlZCcsXG5cdCdzcmNPYmplY3QnXG5dO1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc19kb21fcHJvcGVydHkobmFtZSkge1xuXHRyZXR1cm4gRE9NX1BST1BFUlRJRVMuaW5jbHVkZXMobmFtZSk7XG59XG5cbmNvbnN0IE5PTl9TVEFUSUNfUFJPUEVSVElFUyA9IFsnYXV0b2ZvY3VzJywgJ211dGVkJywgJ2RlZmF1bHRWYWx1ZScsICdkZWZhdWx0Q2hlY2tlZCddO1xuXG4vKipcbiAqIFJldHVybnMgYHRydWVgIGlmIHRoZSBnaXZlbiBhdHRyaWJ1dGUgY2Fubm90IGJlIHNldCB0aHJvdWdoIHRoZSB0ZW1wbGF0ZVxuICogc3RyaW5nLCBpLmUuIG5lZWRzIHNvbWUga2luZCBvZiBKYXZhU2NyaXB0IGhhbmRsaW5nIHRvIHdvcmsuXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICovXG5leHBvcnQgZnVuY3Rpb24gY2Fubm90X2JlX3NldF9zdGF0aWNhbGx5KG5hbWUpIHtcblx0cmV0dXJuIE5PTl9TVEFUSUNfUFJPUEVSVElFUy5pbmNsdWRlcyhuYW1lKTtcbn1cblxuLyoqXG4gKiBTdWJzZXQgb2YgZGVsZWdhdGVkIGV2ZW50cyB3aGljaCBzaG91bGQgYmUgcGFzc2l2ZSBieSBkZWZhdWx0LlxuICogVGhlc2UgdHdvIGFyZSBhbHJlYWR5IHBhc3NpdmUgdmlhIGJyb3dzZXIgZGVmYXVsdHMgb24gd2luZG93LCBkb2N1bWVudCBhbmQgYm9keS5cbiAqIEJ1dCBzaW5jZVxuICogLSB3ZSdyZSBkZWxlZ2F0aW5nIHRoZW1cbiAqIC0gdGhleSBoYXBwZW4gb2Z0ZW5cbiAqIC0gdGhleSBhcHBseSB0byBtb2JpbGUgd2hpY2ggaXMgZ2VuZXJhbGx5IGxlc3MgcGVyZm9ybWFudFxuICogd2UncmUgbWFya2luZyB0aGVtIGFzIHBhc3NpdmUgYnkgZGVmYXVsdCBmb3Igb3RoZXIgZWxlbWVudHMsIHRvby5cbiAqL1xuY29uc3QgUEFTU0lWRV9FVkVOVFMgPSBbJ3RvdWNoc3RhcnQnLCAndG91Y2htb3ZlJ107XG5cbi8qKlxuICogUmV0dXJucyBgdHJ1ZWAgaWYgYG5hbWVgIGlzIGEgcGFzc2l2ZSBldmVudFxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzX3Bhc3NpdmVfZXZlbnQobmFtZSkge1xuXHRyZXR1cm4gUEFTU0lWRV9FVkVOVFMuaW5jbHVkZXMobmFtZSk7XG59XG5cbmNvbnN0IENPTlRFTlRfRURJVEFCTEVfQklORElOR1MgPSBbJ3RleHRDb250ZW50JywgJ2lubmVySFRNTCcsICdpbm5lclRleHQnXTtcblxuLyoqIEBwYXJhbSB7c3RyaW5nfSBuYW1lICovXG5leHBvcnQgZnVuY3Rpb24gaXNfY29udGVudF9lZGl0YWJsZV9iaW5kaW5nKG5hbWUpIHtcblx0cmV0dXJuIENPTlRFTlRfRURJVEFCTEVfQklORElOR1MuaW5jbHVkZXMobmFtZSk7XG59XG5cbmNvbnN0IExPQURfRVJST1JfRUxFTUVOVFMgPSBbXG5cdCdib2R5Jyxcblx0J2VtYmVkJyxcblx0J2lmcmFtZScsXG5cdCdpbWcnLFxuXHQnbGluaycsXG5cdCdvYmplY3QnLFxuXHQnc2NyaXB0Jyxcblx0J3N0eWxlJyxcblx0J3RyYWNrJ1xuXTtcblxuLyoqXG4gKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZWxlbWVudCBlbWl0cyBgbG9hZGAgYW5kIGBlcnJvcmAgZXZlbnRzXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNfbG9hZF9lcnJvcl9lbGVtZW50KG5hbWUpIHtcblx0cmV0dXJuIExPQURfRVJST1JfRUxFTUVOVFMuaW5jbHVkZXMobmFtZSk7XG59XG5cbmNvbnN0IFNWR19FTEVNRU5UUyA9IFtcblx0J2FsdEdseXBoJyxcblx0J2FsdEdseXBoRGVmJyxcblx0J2FsdEdseXBoSXRlbScsXG5cdCdhbmltYXRlJyxcblx0J2FuaW1hdGVDb2xvcicsXG5cdCdhbmltYXRlTW90aW9uJyxcblx0J2FuaW1hdGVUcmFuc2Zvcm0nLFxuXHQnY2lyY2xlJyxcblx0J2NsaXBQYXRoJyxcblx0J2NvbG9yLXByb2ZpbGUnLFxuXHQnY3Vyc29yJyxcblx0J2RlZnMnLFxuXHQnZGVzYycsXG5cdCdkaXNjYXJkJyxcblx0J2VsbGlwc2UnLFxuXHQnZmVCbGVuZCcsXG5cdCdmZUNvbG9yTWF0cml4Jyxcblx0J2ZlQ29tcG9uZW50VHJhbnNmZXInLFxuXHQnZmVDb21wb3NpdGUnLFxuXHQnZmVDb252b2x2ZU1hdHJpeCcsXG5cdCdmZURpZmZ1c2VMaWdodGluZycsXG5cdCdmZURpc3BsYWNlbWVudE1hcCcsXG5cdCdmZURpc3RhbnRMaWdodCcsXG5cdCdmZURyb3BTaGFkb3cnLFxuXHQnZmVGbG9vZCcsXG5cdCdmZUZ1bmNBJyxcblx0J2ZlRnVuY0InLFxuXHQnZmVGdW5jRycsXG5cdCdmZUZ1bmNSJyxcblx0J2ZlR2F1c3NpYW5CbHVyJyxcblx0J2ZlSW1hZ2UnLFxuXHQnZmVNZXJnZScsXG5cdCdmZU1lcmdlTm9kZScsXG5cdCdmZU1vcnBob2xvZ3knLFxuXHQnZmVPZmZzZXQnLFxuXHQnZmVQb2ludExpZ2h0Jyxcblx0J2ZlU3BlY3VsYXJMaWdodGluZycsXG5cdCdmZVNwb3RMaWdodCcsXG5cdCdmZVRpbGUnLFxuXHQnZmVUdXJidWxlbmNlJyxcblx0J2ZpbHRlcicsXG5cdCdmb250Jyxcblx0J2ZvbnQtZmFjZScsXG5cdCdmb250LWZhY2UtZm9ybWF0Jyxcblx0J2ZvbnQtZmFjZS1uYW1lJyxcblx0J2ZvbnQtZmFjZS1zcmMnLFxuXHQnZm9udC1mYWNlLXVyaScsXG5cdCdmb3JlaWduT2JqZWN0Jyxcblx0J2cnLFxuXHQnZ2x5cGgnLFxuXHQnZ2x5cGhSZWYnLFxuXHQnaGF0Y2gnLFxuXHQnaGF0Y2hwYXRoJyxcblx0J2hrZXJuJyxcblx0J2ltYWdlJyxcblx0J2xpbmUnLFxuXHQnbGluZWFyR3JhZGllbnQnLFxuXHQnbWFya2VyJyxcblx0J21hc2snLFxuXHQnbWVzaCcsXG5cdCdtZXNoZ3JhZGllbnQnLFxuXHQnbWVzaHBhdGNoJyxcblx0J21lc2hyb3cnLFxuXHQnbWV0YWRhdGEnLFxuXHQnbWlzc2luZy1nbHlwaCcsXG5cdCdtcGF0aCcsXG5cdCdwYXRoJyxcblx0J3BhdHRlcm4nLFxuXHQncG9seWdvbicsXG5cdCdwb2x5bGluZScsXG5cdCdyYWRpYWxHcmFkaWVudCcsXG5cdCdyZWN0Jyxcblx0J3NldCcsXG5cdCdzb2xpZGNvbG9yJyxcblx0J3N0b3AnLFxuXHQnc3ZnJyxcblx0J3N3aXRjaCcsXG5cdCdzeW1ib2wnLFxuXHQndGV4dCcsXG5cdCd0ZXh0UGF0aCcsXG5cdCd0cmVmJyxcblx0J3RzcGFuJyxcblx0J3Vua25vd24nLFxuXHQndXNlJyxcblx0J3ZpZXcnLFxuXHQndmtlcm4nXG5dO1xuXG4vKiogQHBhcmFtIHtzdHJpbmd9IG5hbWUgKi9cbmV4cG9ydCBmdW5jdGlvbiBpc19zdmcobmFtZSkge1xuXHRyZXR1cm4gU1ZHX0VMRU1FTlRTLmluY2x1ZGVzKG5hbWUpO1xufVxuXG5jb25zdCBNQVRITUxfRUxFTUVOVFMgPSBbXG5cdCdhbm5vdGF0aW9uJyxcblx0J2Fubm90YXRpb24teG1sJyxcblx0J21hY3Rpb24nLFxuXHQnbWF0aCcsXG5cdCdtZXJyb3InLFxuXHQnbWZyYWMnLFxuXHQnbWknLFxuXHQnbW11bHRpc2NyaXB0cycsXG5cdCdtbicsXG5cdCdtbycsXG5cdCdtb3ZlcicsXG5cdCdtcGFkZGVkJyxcblx0J21waGFudG9tJyxcblx0J21wcmVzY3JpcHRzJyxcblx0J21yb290Jyxcblx0J21yb3cnLFxuXHQnbXMnLFxuXHQnbXNwYWNlJyxcblx0J21zcXJ0Jyxcblx0J21zdHlsZScsXG5cdCdtc3ViJyxcblx0J21zdWJzdXAnLFxuXHQnbXN1cCcsXG5cdCdtdGFibGUnLFxuXHQnbXRkJyxcblx0J210ZXh0Jyxcblx0J210cicsXG5cdCdtdW5kZXInLFxuXHQnbXVuZGVyb3ZlcicsXG5cdCdzZW1hbnRpY3MnXG5dO1xuXG4vKiogQHBhcmFtIHtzdHJpbmd9IG5hbWUgKi9cbmV4cG9ydCBmdW5jdGlvbiBpc19tYXRobWwobmFtZSkge1xuXHRyZXR1cm4gTUFUSE1MX0VMRU1FTlRTLmluY2x1ZGVzKG5hbWUpO1xufVxuXG5jb25zdCBSVU5FUyA9IC8qKiBAdHlwZSB7Y29uc3R9ICovIChbXG5cdCckc3RhdGUnLFxuXHQnJHN0YXRlLnJhdycsXG5cdCckc3RhdGUuc25hcHNob3QnLFxuXHQnJHByb3BzJyxcblx0JyRiaW5kYWJsZScsXG5cdCckZGVyaXZlZCcsXG5cdCckZGVyaXZlZC5ieScsXG5cdCckZWZmZWN0Jyxcblx0JyRlZmZlY3QucHJlJyxcblx0JyRlZmZlY3QudHJhY2tpbmcnLFxuXHQnJGVmZmVjdC5yb290Jyxcblx0JyRpbnNwZWN0Jyxcblx0JyRpbnNwZWN0KCkud2l0aCcsXG5cdCckaW5zcGVjdC50cmFjZScsXG5cdCckaG9zdCdcbl0pO1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKiBAcmV0dXJucyB7bmFtZSBpcyBSVU5FU1tudW1iZXJdfVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNfcnVuZShuYW1lKSB7XG5cdHJldHVybiBSVU5FUy5pbmNsdWRlcygvKiogQHR5cGUge1JVTkVTW251bWJlcl19ICovIChuYW1lKSk7XG59XG5cbi8qKiBMaXN0IG9mIGVsZW1lbnRzIHRoYXQgcmVxdWlyZSByYXcgY29udGVudHMgYW5kIHNob3VsZCBub3QgaGF2ZSBTU1IgY29tbWVudHMgcHV0IGluIHRoZW0gKi9cbmNvbnN0IFJBV19URVhUX0VMRU1FTlRTID0gLyoqIEB0eXBlIHtjb25zdH0gKi8gKFsndGV4dGFyZWEnLCAnc2NyaXB0JywgJ3N0eWxlJywgJ3RpdGxlJ10pO1xuXG4vKiogQHBhcmFtIHtzdHJpbmd9IG5hbWUgKi9cbmV4cG9ydCBmdW5jdGlvbiBpc19yYXdfdGV4dF9lbGVtZW50KG5hbWUpIHtcblx0cmV0dXJuIFJBV19URVhUX0VMRU1FTlRTLmluY2x1ZGVzKC8qKiBAdHlwZSB7UkFXX1RFWFRfRUxFTUVOVFNbbnVtYmVyXX0gKi8gKG5hbWUpKTtcbn1cblxuLyoqXG4gKiBQcmV2ZW50IGRldnRvb2xzIHRyeWluZyB0byBtYWtlIGBsb2NhdGlvbmAgYSBjbGlja2FibGUgbGluayBieSBpbnNlcnRpbmcgYSB6ZXJvLXdpZHRoIHNwYWNlXG4gKiBAcGFyYW0ge3N0cmluZyB8IHVuZGVmaW5lZH0gbG9jYXRpb25cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNhbml0aXplX2xvY2F0aW9uKGxvY2F0aW9uKSB7XG5cdHJldHVybiBsb2NhdGlvbj8ucmVwbGFjZSgvXFwvL2csICcvXFx1MjAwYicpO1xufVxuIiwiLyoqIEBpbXBvcnQgeyBMb2NhdGlvbiB9IGZyb20gJ2xvY2F0ZS1jaGFyYWN0ZXInICovXG5pbXBvcnQgeyB0ZWFyZG93biB9IGZyb20gJy4uLy4uL3JlYWN0aXZpdHkvZWZmZWN0cy5qcyc7XG5pbXBvcnQgeyBkZWZpbmVfcHJvcGVydHksIGlzX2FycmF5IH0gZnJvbSAnLi4vLi4vLi4vc2hhcmVkL3V0aWxzLmpzJztcbmltcG9ydCB7IGh5ZHJhdGluZyB9IGZyb20gJy4uL2h5ZHJhdGlvbi5qcyc7XG5pbXBvcnQgeyBxdWV1ZV9taWNyb190YXNrIH0gZnJvbSAnLi4vdGFzay5qcyc7XG5pbXBvcnQgeyBGSUxFTkFNRSB9IGZyb20gJy4uLy4uLy4uLy4uL2NvbnN0YW50cy5qcyc7XG5pbXBvcnQgKiBhcyB3IGZyb20gJy4uLy4uL3dhcm5pbmdzLmpzJztcbmltcG9ydCB7XG5cdGFjdGl2ZV9lZmZlY3QsXG5cdGFjdGl2ZV9yZWFjdGlvbixcblx0c2V0X2FjdGl2ZV9lZmZlY3QsXG5cdHNldF9hY3RpdmVfcmVhY3Rpb25cbn0gZnJvbSAnLi4vLi4vcnVudGltZS5qcyc7XG5pbXBvcnQgeyB3aXRob3V0X3JlYWN0aXZlX2NvbnRleHQgfSBmcm9tICcuL2JpbmRpbmdzL3NoYXJlZC5qcyc7XG5cbi8qKiBAdHlwZSB7U2V0PHN0cmluZz59ICovXG5leHBvcnQgY29uc3QgYWxsX3JlZ2lzdGVyZWRfZXZlbnRzID0gbmV3IFNldCgpO1xuXG4vKiogQHR5cGUge1NldDwoZXZlbnRzOiBBcnJheTxzdHJpbmc+KSA9PiB2b2lkPn0gKi9cbmV4cG9ydCBjb25zdCByb290X2V2ZW50X2hhbmRsZXMgPSBuZXcgU2V0KCk7XG5cbi8qKlxuICogU1NSIGFkZHMgb25sb2FkIGFuZCBvbmVycm9yIGF0dHJpYnV0ZXMgdG8gY2F0Y2ggdGhvc2UgZXZlbnRzIGJlZm9yZSB0aGUgaHlkcmF0aW9uLlxuICogVGhpcyBmdW5jdGlvbiBkZXRlY3RzIHRob3NlIGNhc2VzLCByZW1vdmVzIHRoZSBhdHRyaWJ1dGVzIGFuZCByZXBsYXlzIHRoZSBldmVudHMuXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBkb21cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlcGxheV9ldmVudHMoZG9tKSB7XG5cdGlmICghaHlkcmF0aW5nKSByZXR1cm47XG5cblx0aWYgKGRvbS5vbmxvYWQpIHtcblx0XHRkb20ucmVtb3ZlQXR0cmlidXRlKCdvbmxvYWQnKTtcblx0fVxuXHRpZiAoZG9tLm9uZXJyb3IpIHtcblx0XHRkb20ucmVtb3ZlQXR0cmlidXRlKCdvbmVycm9yJyk7XG5cdH1cblx0Ly8gQHRzLWV4cGVjdC1lcnJvclxuXHRjb25zdCBldmVudCA9IGRvbS5fX2U7XG5cdGlmIChldmVudCAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0Ly8gQHRzLWV4cGVjdC1lcnJvclxuXHRcdGRvbS5fX2UgPSB1bmRlZmluZWQ7XG5cdFx0cXVldWVNaWNyb3Rhc2soKCkgPT4ge1xuXHRcdFx0aWYgKGRvbS5pc0Nvbm5lY3RlZCkge1xuXHRcdFx0XHRkb20uZGlzcGF0Y2hFdmVudChldmVudCk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRfbmFtZVxuICogQHBhcmFtIHtFdmVudFRhcmdldH0gZG9tXG4gKiBAcGFyYW0ge0V2ZW50TGlzdGVuZXJ9IGhhbmRsZXJcbiAqIEBwYXJhbSB7QWRkRXZlbnRMaXN0ZW5lck9wdGlvbnN9IG9wdGlvbnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZV9ldmVudChldmVudF9uYW1lLCBkb20sIGhhbmRsZXIsIG9wdGlvbnMpIHtcblx0LyoqXG5cdCAqIEB0aGlzIHtFdmVudFRhcmdldH1cblx0ICovXG5cdGZ1bmN0aW9uIHRhcmdldF9oYW5kbGVyKC8qKiBAdHlwZSB7RXZlbnR9ICovIGV2ZW50KSB7XG5cdFx0aWYgKCFvcHRpb25zLmNhcHR1cmUpIHtcblx0XHRcdC8vIE9ubHkgY2FsbCBpbiB0aGUgYnViYmxlIHBoYXNlLCBlbHNlIGRlbGVnYXRlZCBldmVudHMgd291bGQgYmUgY2FsbGVkIGJlZm9yZSB0aGUgY2FwdHVyaW5nIGV2ZW50c1xuXHRcdFx0aGFuZGxlX2V2ZW50X3Byb3BhZ2F0aW9uLmNhbGwoZG9tLCBldmVudCk7XG5cdFx0fVxuXHRcdGlmICghZXZlbnQuY2FuY2VsQnViYmxlKSB7XG5cdFx0XHRyZXR1cm4gd2l0aG91dF9yZWFjdGl2ZV9jb250ZXh0KCgpID0+IHtcblx0XHRcdFx0cmV0dXJuIGhhbmRsZXIuY2FsbCh0aGlzLCBldmVudCk7XG5cdFx0XHR9KTtcblx0XHR9XG5cdH1cblxuXHQvLyBDaHJvbWUgaGFzIGEgYnVnIHdoZXJlIHBvaW50ZXIgZXZlbnRzIGRvbid0IHdvcmsgd2hlbiBhdHRhY2hlZCB0byBhIERPTSBlbGVtZW50IHRoYXQgaGFzIGJlZW4gY2xvbmVkXG5cdC8vIHdpdGggY2xvbmVOb2RlKCkgYW5kIHRoZSBET00gZWxlbWVudCBpcyBkaXNjb25uZWN0ZWQgZnJvbSB0aGUgZG9jdW1lbnQuIFRvIGVuc3VyZSB0aGUgZXZlbnQgd29ya3MsIHdlXG5cdC8vIGRlZmVyIHRoZSBhdHRhY2htZW50IHRpbGwgYWZ0ZXIgaXQncyBiZWVuIGFwcGVuZGVkIHRvIHRoZSBkb2N1bWVudC4gVE9ETzogcmVtb3ZlIHRoaXMgb25jZSBDaHJvbWUgZml4ZXNcblx0Ly8gdGhpcyBidWcuIFRoZSBzYW1lIGFwcGxpZXMgdG8gd2hlZWwgZXZlbnRzIGFuZCB0b3VjaCBldmVudHMuXG5cdGlmIChcblx0XHRldmVudF9uYW1lLnN0YXJ0c1dpdGgoJ3BvaW50ZXInKSB8fFxuXHRcdGV2ZW50X25hbWUuc3RhcnRzV2l0aCgndG91Y2gnKSB8fFxuXHRcdGV2ZW50X25hbWUgPT09ICd3aGVlbCdcblx0KSB7XG5cdFx0cXVldWVfbWljcm9fdGFzaygoKSA9PiB7XG5cdFx0XHRkb20uYWRkRXZlbnRMaXN0ZW5lcihldmVudF9uYW1lLCB0YXJnZXRfaGFuZGxlciwgb3B0aW9ucyk7XG5cdFx0fSk7XG5cdH0gZWxzZSB7XG5cdFx0ZG9tLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRfbmFtZSwgdGFyZ2V0X2hhbmRsZXIsIG9wdGlvbnMpO1xuXHR9XG5cblx0cmV0dXJuIHRhcmdldF9oYW5kbGVyO1xufVxuXG4vKipcbiAqIEF0dGFjaGVzIGFuIGV2ZW50IGhhbmRsZXIgdG8gYW4gZWxlbWVudCBhbmQgcmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgcmVtb3ZlcyB0aGUgaGFuZGxlci4gVXNpbmcgdGhpc1xuICogcmF0aGVyIHRoYW4gYGFkZEV2ZW50TGlzdGVuZXJgIHdpbGwgcHJlc2VydmUgdGhlIGNvcnJlY3Qgb3JkZXIgcmVsYXRpdmUgdG8gaGFuZGxlcnMgYWRkZWQgZGVjbGFyYXRpdmVseVxuICogKHdpdGggYXR0cmlidXRlcyBsaWtlIGBvbmNsaWNrYCksIHdoaWNoIHVzZSBldmVudCBkZWxlZ2F0aW9uIGZvciBwZXJmb3JtYW5jZSByZWFzb25zXG4gKlxuICogQHBhcmFtIHtFdmVudFRhcmdldH0gZWxlbWVudFxuICogQHBhcmFtIHtzdHJpbmd9IHR5cGVcbiAqIEBwYXJhbSB7RXZlbnRMaXN0ZW5lcn0gaGFuZGxlclxuICogQHBhcmFtIHtBZGRFdmVudExpc3RlbmVyT3B0aW9uc30gW29wdGlvbnNdXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBvbihlbGVtZW50LCB0eXBlLCBoYW5kbGVyLCBvcHRpb25zID0ge30pIHtcblx0dmFyIHRhcmdldF9oYW5kbGVyID0gY3JlYXRlX2V2ZW50KHR5cGUsIGVsZW1lbnQsIGhhbmRsZXIsIG9wdGlvbnMpO1xuXG5cdHJldHVybiAoKSA9PiB7XG5cdFx0ZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIHRhcmdldF9oYW5kbGVyLCBvcHRpb25zKTtcblx0fTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRfbmFtZVxuICogQHBhcmFtIHtFbGVtZW50fSBkb21cbiAqIEBwYXJhbSB7RXZlbnRMaXN0ZW5lcn0gaGFuZGxlclxuICogQHBhcmFtIHtib29sZWFufSBjYXB0dXJlXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtwYXNzaXZlXVxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBldmVudChldmVudF9uYW1lLCBkb20sIGhhbmRsZXIsIGNhcHR1cmUsIHBhc3NpdmUpIHtcblx0dmFyIG9wdGlvbnMgPSB7IGNhcHR1cmUsIHBhc3NpdmUgfTtcblx0dmFyIHRhcmdldF9oYW5kbGVyID0gY3JlYXRlX2V2ZW50KGV2ZW50X25hbWUsIGRvbSwgaGFuZGxlciwgb3B0aW9ucyk7XG5cblx0Ly8gQHRzLWlnbm9yZVxuXHRpZiAoZG9tID09PSBkb2N1bWVudC5ib2R5IHx8IGRvbSA9PT0gd2luZG93IHx8IGRvbSA9PT0gZG9jdW1lbnQpIHtcblx0XHR0ZWFyZG93bigoKSA9PiB7XG5cdFx0XHRkb20ucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudF9uYW1lLCB0YXJnZXRfaGFuZGxlciwgb3B0aW9ucyk7XG5cdFx0fSk7XG5cdH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge0FycmF5PHN0cmluZz59IGV2ZW50c1xuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWxlZ2F0ZShldmVudHMpIHtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBldmVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRhbGxfcmVnaXN0ZXJlZF9ldmVudHMuYWRkKGV2ZW50c1tpXSk7XG5cdH1cblxuXHRmb3IgKHZhciBmbiBvZiByb290X2V2ZW50X2hhbmRsZXMpIHtcblx0XHRmbihldmVudHMpO1xuXHR9XG59XG5cbi8qKlxuICogQHRoaXMge0V2ZW50VGFyZ2V0fVxuICogQHBhcmFtIHtFdmVudH0gZXZlbnRcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5leHBvcnQgZnVuY3Rpb24gaGFuZGxlX2V2ZW50X3Byb3BhZ2F0aW9uKGV2ZW50KSB7XG5cdHZhciBoYW5kbGVyX2VsZW1lbnQgPSB0aGlzO1xuXHR2YXIgb3duZXJfZG9jdW1lbnQgPSAvKiogQHR5cGUge05vZGV9ICovIChoYW5kbGVyX2VsZW1lbnQpLm93bmVyRG9jdW1lbnQ7XG5cdHZhciBldmVudF9uYW1lID0gZXZlbnQudHlwZTtcblx0dmFyIHBhdGggPSBldmVudC5jb21wb3NlZFBhdGg/LigpIHx8IFtdO1xuXHR2YXIgY3VycmVudF90YXJnZXQgPSAvKiogQHR5cGUge251bGwgfCBFbGVtZW50fSAqLyAocGF0aFswXSB8fCBldmVudC50YXJnZXQpO1xuXG5cdC8vIGNvbXBvc2VkUGF0aCBjb250YWlucyBsaXN0IG9mIG5vZGVzIHRoZSBldmVudCBoYXMgcHJvcGFnYXRlZCB0aHJvdWdoLlxuXHQvLyBXZSBjaGVjayBfX3Jvb3QgdG8gc2tpcCBhbGwgbm9kZXMgYmVsb3cgaXQgaW4gY2FzZSB0aGlzIGlzIGFcblx0Ly8gcGFyZW50IG9mIHRoZSBfX3Jvb3Qgbm9kZSwgd2hpY2ggaW5kaWNhdGVzIHRoYXQgdGhlcmUncyBuZXN0ZWRcblx0Ly8gbW91bnRlZCBhcHBzLiBJbiB0aGlzIGNhc2Ugd2UgZG9uJ3Qgd2FudCB0byB0cmlnZ2VyIGV2ZW50cyBtdWx0aXBsZSB0aW1lcy5cblx0dmFyIHBhdGhfaWR4ID0gMDtcblxuXHQvLyBAdHMtZXhwZWN0LWVycm9yIGlzIGFkZGVkIGJlbG93XG5cdHZhciBoYW5kbGVkX2F0ID0gZXZlbnQuX19yb290O1xuXG5cdGlmIChoYW5kbGVkX2F0KSB7XG5cdFx0dmFyIGF0X2lkeCA9IHBhdGguaW5kZXhPZihoYW5kbGVkX2F0KTtcblx0XHRpZiAoXG5cdFx0XHRhdF9pZHggIT09IC0xICYmXG5cdFx0XHQoaGFuZGxlcl9lbGVtZW50ID09PSBkb2N1bWVudCB8fCBoYW5kbGVyX2VsZW1lbnQgPT09IC8qKiBAdHlwZSB7YW55fSAqLyAod2luZG93KSlcblx0XHQpIHtcblx0XHRcdC8vIFRoaXMgaXMgdGhlIGZhbGxiYWNrIGRvY3VtZW50IGxpc3RlbmVyIG9yIGEgd2luZG93IGxpc3RlbmVyLCBidXQgdGhlIGV2ZW50IHdhcyBhbHJlYWR5IGhhbmRsZWRcblx0XHRcdC8vIC0+IGlnbm9yZSwgYnV0IHNldCBoYW5kbGVfYXQgdG8gZG9jdW1lbnQvd2luZG93IHNvIHRoYXQgd2UncmUgcmVzZXR0aW5nIHRoZSBldmVudFxuXHRcdFx0Ly8gY2hhaW4gaW4gY2FzZSBzb21lb25lIG1hbnVhbGx5IGRpc3BhdGNoZXMgdGhlIHNhbWUgZXZlbnQgb2JqZWN0IGFnYWluLlxuXHRcdFx0Ly8gQHRzLWV4cGVjdC1lcnJvclxuXHRcdFx0ZXZlbnQuX19yb290ID0gaGFuZGxlcl9lbGVtZW50O1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFdlJ3JlIGRlbGliZXJhdGVseSBub3Qgc2tpcHBpbmcgaWYgdGhlIGluZGV4IGlzIGhpZ2hlciwgYmVjYXVzZVxuXHRcdC8vIHNvbWVvbmUgY291bGQgY3JlYXRlIGFuIGV2ZW50IHByb2dyYW1tYXRpY2FsbHkgYW5kIGVtaXQgaXQgbXVsdGlwbGUgdGltZXMsXG5cdFx0Ly8gaW4gd2hpY2ggY2FzZSB3ZSB3YW50IHRvIGhhbmRsZSB0aGUgd2hvbGUgcHJvcGFnYXRpb24gY2hhaW4gcHJvcGVybHkgZWFjaCB0aW1lLlxuXHRcdC8vICh0aGlzIHdpbGwgb25seSBiZSBhIGZhbHNlIG5lZ2F0aXZlIGlmIHRoZSBldmVudCBpcyBkaXNwYXRjaGVkIG11bHRpcGxlIHRpbWVzIGFuZFxuXHRcdC8vIHRoZSBmYWxsYmFjayBkb2N1bWVudCBsaXN0ZW5lciBpc24ndCByZWFjaGVkIGluIGJldHdlZW4sIGJ1dCB0aGF0J3Mgc3VwZXIgcmFyZSlcblx0XHR2YXIgaGFuZGxlcl9pZHggPSBwYXRoLmluZGV4T2YoaGFuZGxlcl9lbGVtZW50KTtcblx0XHRpZiAoaGFuZGxlcl9pZHggPT09IC0xKSB7XG5cdFx0XHQvLyBoYW5kbGVfaWR4IGNhbiB0aGVvcmV0aWNhbGx5IGJlIC0xIChoYXBwZW5lZCBpbiBzb21lIEpTRE9NIHRlc3Rpbmcgc2NlbmFyaW9zIHdpdGggYW4gZXZlbnQgbGlzdGVuZXIgb24gdGhlIHdpbmRvdyBvYmplY3QpXG5cdFx0XHQvLyBzbyBndWFyZCBhZ2FpbnN0IHRoYXQsIHRvbywgYW5kIGFzc3VtZSB0aGF0IGV2ZXJ5dGhpbmcgd2FzIGhhbmRsZWQgYXQgdGhpcyBwb2ludC5cblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoYXRfaWR4IDw9IGhhbmRsZXJfaWR4KSB7XG5cdFx0XHRwYXRoX2lkeCA9IGF0X2lkeDtcblx0XHR9XG5cdH1cblxuXHRjdXJyZW50X3RhcmdldCA9IC8qKiBAdHlwZSB7RWxlbWVudH0gKi8gKHBhdGhbcGF0aF9pZHhdIHx8IGV2ZW50LnRhcmdldCk7XG5cdC8vIHRoZXJlIGNhbiBvbmx5IGJlIG9uZSBkZWxlZ2F0ZWQgZXZlbnQgcGVyIGVsZW1lbnQsIGFuZCB3ZSBlaXRoZXIgYWxyZWFkeSBoYW5kbGVkIHRoZSBjdXJyZW50IHRhcmdldCxcblx0Ly8gb3IgdGhpcyBpcyB0aGUgdmVyeSBmaXJzdCB0YXJnZXQgaW4gdGhlIGNoYWluIHdoaWNoIGhhcyBhIG5vbi1kZWxlZ2F0ZWQgbGlzdGVuZXIsIGluIHdoaWNoIGNhc2UgaXQncyBzYWZlXG5cdC8vIHRvIGhhbmRsZSBhIHBvc3NpYmxlIGRlbGVnYXRlZCBldmVudCBvbiBpdCBsYXRlciAodGhyb3VnaCB0aGUgcm9vdCBkZWxlZ2F0aW9uIGxpc3RlbmVyIGZvciBleGFtcGxlKS5cblx0aWYgKGN1cnJlbnRfdGFyZ2V0ID09PSBoYW5kbGVyX2VsZW1lbnQpIHJldHVybjtcblxuXHQvLyBQcm94eSBjdXJyZW50VGFyZ2V0IHRvIGNvcnJlY3QgdGFyZ2V0XG5cdGRlZmluZV9wcm9wZXJ0eShldmVudCwgJ2N1cnJlbnRUYXJnZXQnLCB7XG5cdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdGdldCgpIHtcblx0XHRcdHJldHVybiBjdXJyZW50X3RhcmdldCB8fCBvd25lcl9kb2N1bWVudDtcblx0XHR9XG5cdH0pO1xuXG5cdC8vIFRoaXMgc3RhcnRlZCBiZWNhdXNlIG9mIENocm9taXVtIGlzc3VlIGh0dHBzOi8vY2hyb21lc3RhdHVzLmNvbS9mZWF0dXJlLzUxMjg2OTY4MjM1NDU4NTYsXG5cdC8vIHdoZXJlIHJlbW92YWwgb3IgbW92aW5nIG9mIG9mIHRoZSBET00gY2FuIGNhdXNlIHN5bmMgYGJsdXJgIGV2ZW50cyB0byBmaXJlLCB3aGljaCBjYW4gY2F1c2UgbG9naWNcblx0Ly8gdG8gcnVuIGluc2lkZSB0aGUgY3VycmVudCBgYWN0aXZlX3JlYWN0aW9uYCwgd2hpY2ggaXNuJ3Qgd2hhdCB3ZSB3YW50IGF0IGFsbC4gSG93ZXZlciwgb24gcmVmbGVjdGlvbixcblx0Ly8gaXQncyBwcm9iYWJseSBiZXN0IHRoYXQgYWxsIGV2ZW50IGhhbmRsZWQgYnkgU3ZlbHRlIGhhdmUgdGhpcyBiZWhhdmlvdXIsIGFzIHdlIGRvbid0IHJlYWxseSB3YW50XG5cdC8vIGFuIGV2ZW50IGhhbmRsZXIgdG8gcnVuIGluIHRoZSBjb250ZXh0IG9mIGFub3RoZXIgcmVhY3Rpb24gb3IgZWZmZWN0LlxuXHR2YXIgcHJldmlvdXNfcmVhY3Rpb24gPSBhY3RpdmVfcmVhY3Rpb247XG5cdHZhciBwcmV2aW91c19lZmZlY3QgPSBhY3RpdmVfZWZmZWN0O1xuXHRzZXRfYWN0aXZlX3JlYWN0aW9uKG51bGwpO1xuXHRzZXRfYWN0aXZlX2VmZmVjdChudWxsKTtcblxuXHR0cnkge1xuXHRcdC8qKlxuXHRcdCAqIEB0eXBlIHt1bmtub3dufVxuXHRcdCAqL1xuXHRcdHZhciB0aHJvd19lcnJvcjtcblx0XHQvKipcblx0XHQgKiBAdHlwZSB7dW5rbm93bltdfVxuXHRcdCAqL1xuXHRcdHZhciBvdGhlcl9lcnJvcnMgPSBbXTtcblxuXHRcdHdoaWxlIChjdXJyZW50X3RhcmdldCAhPT0gbnVsbCkge1xuXHRcdFx0LyoqIEB0eXBlIHtudWxsIHwgRWxlbWVudH0gKi9cblx0XHRcdHZhciBwYXJlbnRfZWxlbWVudCA9XG5cdFx0XHRcdGN1cnJlbnRfdGFyZ2V0LmFzc2lnbmVkU2xvdCB8fFxuXHRcdFx0XHRjdXJyZW50X3RhcmdldC5wYXJlbnROb2RlIHx8XG5cdFx0XHRcdC8qKiBAdHlwZSB7YW55fSAqLyAoY3VycmVudF90YXJnZXQpLmhvc3QgfHxcblx0XHRcdFx0bnVsbDtcblxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0Ly8gQHRzLWV4cGVjdC1lcnJvclxuXHRcdFx0XHR2YXIgZGVsZWdhdGVkID0gY3VycmVudF90YXJnZXRbJ19fJyArIGV2ZW50X25hbWVdO1xuXG5cdFx0XHRcdGlmIChkZWxlZ2F0ZWQgIT09IHVuZGVmaW5lZCAmJiAhKC8qKiBAdHlwZSB7YW55fSAqLyAoY3VycmVudF90YXJnZXQpLmRpc2FibGVkKSkge1xuXHRcdFx0XHRcdGlmIChpc19hcnJheShkZWxlZ2F0ZWQpKSB7XG5cdFx0XHRcdFx0XHR2YXIgW2ZuLCAuLi5kYXRhXSA9IGRlbGVnYXRlZDtcblx0XHRcdFx0XHRcdGZuLmFwcGx5KGN1cnJlbnRfdGFyZ2V0LCBbZXZlbnQsIC4uLmRhdGFdKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0ZGVsZWdhdGVkLmNhbGwoY3VycmVudF90YXJnZXQsIGV2ZW50KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHRcdGlmICh0aHJvd19lcnJvcikge1xuXHRcdFx0XHRcdG90aGVyX2Vycm9ycy5wdXNoKGVycm9yKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0aHJvd19lcnJvciA9IGVycm9yO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoZXZlbnQuY2FuY2VsQnViYmxlIHx8IHBhcmVudF9lbGVtZW50ID09PSBoYW5kbGVyX2VsZW1lbnQgfHwgcGFyZW50X2VsZW1lbnQgPT09IG51bGwpIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRjdXJyZW50X3RhcmdldCA9IHBhcmVudF9lbGVtZW50O1xuXHRcdH1cblxuXHRcdGlmICh0aHJvd19lcnJvcikge1xuXHRcdFx0Zm9yIChsZXQgZXJyb3Igb2Ygb3RoZXJfZXJyb3JzKSB7XG5cdFx0XHRcdC8vIFRocm93IHRoZSByZXN0IG9mIHRoZSBlcnJvcnMsIG9uZS1ieS1vbmUgb24gYSBtaWNyb3Rhc2tcblx0XHRcdFx0cXVldWVNaWNyb3Rhc2soKCkgPT4ge1xuXHRcdFx0XHRcdHRocm93IGVycm9yO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHRcdHRocm93IHRocm93X2Vycm9yO1xuXHRcdH1cblx0fSBmaW5hbGx5IHtcblx0XHQvLyBAdHMtZXhwZWN0LWVycm9yIGlzIHVzZWQgYWJvdmVcblx0XHRldmVudC5fX3Jvb3QgPSBoYW5kbGVyX2VsZW1lbnQ7XG5cdFx0Ly8gQHRzLWlnbm9yZSByZW1vdmUgcHJveHkgb24gY3VycmVudFRhcmdldFxuXHRcdGRlbGV0ZSBldmVudC5jdXJyZW50VGFyZ2V0O1xuXHRcdHNldF9hY3RpdmVfcmVhY3Rpb24ocHJldmlvdXNfcmVhY3Rpb24pO1xuXHRcdHNldF9hY3RpdmVfZWZmZWN0KHByZXZpb3VzX2VmZmVjdCk7XG5cdH1cbn1cblxuLyoqXG4gKiBJbiBkZXYsIHdhcm4gaWYgYW4gZXZlbnQgaGFuZGxlciBpcyBub3QgYSBmdW5jdGlvbiwgYXMgaXQgbWVhbnMgdGhlXG4gKiB1c2VyIHByb2JhYmx5IGNhbGxlZCB0aGUgaGFuZGxlciBvciBmb3Jnb3QgdG8gYWRkIGEgYCgpID0+YFxuICogQHBhcmFtIHsoKSA9PiAoZXZlbnQ6IEV2ZW50LCAuLi5hcmdzOiBhbnkpID0+IHZvaWR9IHRodW5rXG4gKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fSBlbGVtZW50XG4gKiBAcGFyYW0ge1tFdmVudCwgLi4uYW55XX0gYXJnc1xuICogQHBhcmFtIHthbnl9IGNvbXBvbmVudFxuICogQHBhcmFtIHtbbnVtYmVyLCBudW1iZXJdfSBbbG9jXVxuICogQHBhcmFtIHtib29sZWFufSBbcmVtb3ZlX3BhcmVuc11cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5KFxuXHR0aHVuayxcblx0ZWxlbWVudCxcblx0YXJncyxcblx0Y29tcG9uZW50LFxuXHRsb2MsXG5cdGhhc19zaWRlX2VmZmVjdHMgPSBmYWxzZSxcblx0cmVtb3ZlX3BhcmVucyA9IGZhbHNlXG4pIHtcblx0bGV0IGhhbmRsZXI7XG5cdGxldCBlcnJvcjtcblxuXHR0cnkge1xuXHRcdGhhbmRsZXIgPSB0aHVuaygpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0ZXJyb3IgPSBlO1xuXHR9XG5cblx0aWYgKHR5cGVvZiBoYW5kbGVyID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0aGFuZGxlci5hcHBseShlbGVtZW50LCBhcmdzKTtcblx0fSBlbHNlIGlmIChoYXNfc2lkZV9lZmZlY3RzIHx8IGhhbmRsZXIgIT0gbnVsbCB8fCBlcnJvcikge1xuXHRcdGNvbnN0IGZpbGVuYW1lID0gY29tcG9uZW50Py5bRklMRU5BTUVdO1xuXHRcdGNvbnN0IGxvY2F0aW9uID0gbG9jID8gYCBhdCAke2ZpbGVuYW1lfToke2xvY1swXX06JHtsb2NbMV19YCA6IGAgaW4gJHtmaWxlbmFtZX1gO1xuXG5cdFx0Y29uc3QgZXZlbnRfbmFtZSA9IGFyZ3NbMF0udHlwZTtcblx0XHRjb25zdCBkZXNjcmlwdGlvbiA9IGBcXGAke2V2ZW50X25hbWV9XFxgIGhhbmRsZXIke2xvY2F0aW9ufWA7XG5cdFx0Y29uc3Qgc3VnZ2VzdGlvbiA9IHJlbW92ZV9wYXJlbnMgPyAncmVtb3ZlIHRoZSB0cmFpbGluZyBgKClgJyA6ICdhZGQgYSBsZWFkaW5nIGAoKSA9PmAnO1xuXG5cdFx0dy5ldmVudF9oYW5kbGVyX2ludmFsaWQoZGVzY3JpcHRpb24sIHN1Z2dlc3Rpb24pO1xuXG5cdFx0aWYgKGVycm9yKSB7XG5cdFx0XHR0aHJvdyBlcnJvcjtcblx0XHR9XG5cdH1cbn1cbiIsIi8qKiBAcGFyYW0ge3N0cmluZ30gaHRtbCAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZV9mcmFnbWVudF9mcm9tX2h0bWwoaHRtbCkge1xuXHR2YXIgZWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RlbXBsYXRlJyk7XG5cdGVsZW0uaW5uZXJIVE1MID0gaHRtbDtcblx0cmV0dXJuIGVsZW0uY29udGVudDtcbn1cbiIsIi8qKiBAaW1wb3J0IHsgRWZmZWN0LCBUZW1wbGF0ZU5vZGUgfSBmcm9tICcjY2xpZW50JyAqL1xuaW1wb3J0IHsgaHlkcmF0ZV9uZXh0LCBoeWRyYXRlX25vZGUsIGh5ZHJhdGluZywgc2V0X2h5ZHJhdGVfbm9kZSB9IGZyb20gJy4vaHlkcmF0aW9uLmpzJztcbmltcG9ydCB7IGNyZWF0ZV90ZXh0LCBnZXRfZmlyc3RfY2hpbGQgfSBmcm9tICcuL29wZXJhdGlvbnMuanMnO1xuaW1wb3J0IHsgY3JlYXRlX2ZyYWdtZW50X2Zyb21faHRtbCB9IGZyb20gJy4vcmVjb25jaWxlci5qcyc7XG5pbXBvcnQgeyBhY3RpdmVfZWZmZWN0IH0gZnJvbSAnLi4vcnVudGltZS5qcyc7XG5pbXBvcnQgeyBURU1QTEFURV9GUkFHTUVOVCwgVEVNUExBVEVfVVNFX0lNUE9SVF9OT0RFIH0gZnJvbSAnLi4vLi4vLi4vY29uc3RhbnRzLmpzJztcblxuLyoqXG4gKiBAcGFyYW0ge1RlbXBsYXRlTm9kZX0gc3RhcnRcbiAqIEBwYXJhbSB7VGVtcGxhdGVOb2RlIHwgbnVsbH0gZW5kXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhc3NpZ25fbm9kZXMoc3RhcnQsIGVuZCkge1xuXHR2YXIgZWZmZWN0ID0gLyoqIEB0eXBlIHtFZmZlY3R9ICovIChhY3RpdmVfZWZmZWN0KTtcblx0aWYgKGVmZmVjdC5ub2Rlc19zdGFydCA9PT0gbnVsbCkge1xuXHRcdGVmZmVjdC5ub2Rlc19zdGFydCA9IHN0YXJ0O1xuXHRcdGVmZmVjdC5ub2Rlc19lbmQgPSBlbmQ7XG5cdH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29udGVudFxuICogQHBhcmFtIHtudW1iZXJ9IGZsYWdzXG4gKiBAcmV0dXJucyB7KCkgPT4gTm9kZSB8IE5vZGVbXX1cbiAqL1xuLyojX19OT19TSURFX0VGRkVDVFNfXyovXG5leHBvcnQgZnVuY3Rpb24gdGVtcGxhdGUoY29udGVudCwgZmxhZ3MpIHtcblx0dmFyIGlzX2ZyYWdtZW50ID0gKGZsYWdzICYgVEVNUExBVEVfRlJBR01FTlQpICE9PSAwO1xuXHR2YXIgdXNlX2ltcG9ydF9ub2RlID0gKGZsYWdzICYgVEVNUExBVEVfVVNFX0lNUE9SVF9OT0RFKSAhPT0gMDtcblxuXHQvKiogQHR5cGUge05vZGV9ICovXG5cdHZhciBub2RlO1xuXG5cdC8qKlxuXHQgKiBXaGV0aGVyIG9yIG5vdCB0aGUgZmlyc3QgaXRlbSBpcyBhIHRleHQvZWxlbWVudCBub2RlLiBJZiBub3QsIHdlIG5lZWQgdG9cblx0ICogY3JlYXRlIGFuIGFkZGl0aW9uYWwgY29tbWVudCBub2RlIHRvIGFjdCBhcyBgZWZmZWN0Lm5vZGVzLnN0YXJ0YFxuXHQgKi9cblx0dmFyIGhhc19zdGFydCA9ICFjb250ZW50LnN0YXJ0c1dpdGgoJzwhPicpO1xuXG5cdHJldHVybiAoKSA9PiB7XG5cdFx0aWYgKGh5ZHJhdGluZykge1xuXHRcdFx0YXNzaWduX25vZGVzKGh5ZHJhdGVfbm9kZSwgbnVsbCk7XG5cdFx0XHRyZXR1cm4gaHlkcmF0ZV9ub2RlO1xuXHRcdH1cblxuXHRcdGlmIChub2RlID09PSB1bmRlZmluZWQpIHtcblx0XHRcdG5vZGUgPSBjcmVhdGVfZnJhZ21lbnRfZnJvbV9odG1sKGhhc19zdGFydCA/IGNvbnRlbnQgOiAnPCE+JyArIGNvbnRlbnQpO1xuXHRcdFx0aWYgKCFpc19mcmFnbWVudCkgbm9kZSA9IC8qKiBAdHlwZSB7Tm9kZX0gKi8gKGdldF9maXJzdF9jaGlsZChub2RlKSk7XG5cdFx0fVxuXG5cdFx0dmFyIGNsb25lID0gLyoqIEB0eXBlIHtUZW1wbGF0ZU5vZGV9ICovIChcblx0XHRcdHVzZV9pbXBvcnRfbm9kZSA/IGRvY3VtZW50LmltcG9ydE5vZGUobm9kZSwgdHJ1ZSkgOiBub2RlLmNsb25lTm9kZSh0cnVlKVxuXHRcdCk7XG5cblx0XHRpZiAoaXNfZnJhZ21lbnQpIHtcblx0XHRcdHZhciBzdGFydCA9IC8qKiBAdHlwZSB7VGVtcGxhdGVOb2RlfSAqLyAoZ2V0X2ZpcnN0X2NoaWxkKGNsb25lKSk7XG5cdFx0XHR2YXIgZW5kID0gLyoqIEB0eXBlIHtUZW1wbGF0ZU5vZGV9ICovIChjbG9uZS5sYXN0Q2hpbGQpO1xuXG5cdFx0XHRhc3NpZ25fbm9kZXMoc3RhcnQsIGVuZCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGFzc2lnbl9ub2RlcyhjbG9uZSwgY2xvbmUpO1xuXHRcdH1cblxuXHRcdHJldHVybiBjbG9uZTtcblx0fTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29udGVudFxuICogQHBhcmFtIHtudW1iZXJ9IGZsYWdzXG4gKiBAcmV0dXJucyB7KCkgPT4gTm9kZSB8IE5vZGVbXX1cbiAqL1xuLyojX19OT19TSURFX0VGRkVDVFNfXyovXG5leHBvcnQgZnVuY3Rpb24gdGVtcGxhdGVfd2l0aF9zY3JpcHQoY29udGVudCwgZmxhZ3MpIHtcblx0dmFyIGZuID0gdGVtcGxhdGUoY29udGVudCwgZmxhZ3MpO1xuXHRyZXR1cm4gKCkgPT4gcnVuX3NjcmlwdHMoLyoqIEB0eXBlIHtFbGVtZW50IHwgRG9jdW1lbnRGcmFnbWVudH0gKi8gKGZuKCkpKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29udGVudFxuICogQHBhcmFtIHtudW1iZXJ9IGZsYWdzXG4gKiBAcGFyYW0geydzdmcnIHwgJ21hdGgnfSBuc1xuICogQHJldHVybnMgeygpID0+IE5vZGUgfCBOb2RlW119XG4gKi9cbi8qI19fTk9fU0lERV9FRkZFQ1RTX18qL1xuZXhwb3J0IGZ1bmN0aW9uIG5zX3RlbXBsYXRlKGNvbnRlbnQsIGZsYWdzLCBucyA9ICdzdmcnKSB7XG5cdC8qKlxuXHQgKiBXaGV0aGVyIG9yIG5vdCB0aGUgZmlyc3QgaXRlbSBpcyBhIHRleHQvZWxlbWVudCBub2RlLiBJZiBub3QsIHdlIG5lZWQgdG9cblx0ICogY3JlYXRlIGFuIGFkZGl0aW9uYWwgY29tbWVudCBub2RlIHRvIGFjdCBhcyBgZWZmZWN0Lm5vZGVzLnN0YXJ0YFxuXHQgKi9cblx0dmFyIGhhc19zdGFydCA9ICFjb250ZW50LnN0YXJ0c1dpdGgoJzwhPicpO1xuXG5cdHZhciBpc19mcmFnbWVudCA9IChmbGFncyAmIFRFTVBMQVRFX0ZSQUdNRU5UKSAhPT0gMDtcblx0dmFyIHdyYXBwZWQgPSBgPCR7bnN9PiR7aGFzX3N0YXJ0ID8gY29udGVudCA6ICc8IT4nICsgY29udGVudH08LyR7bnN9PmA7XG5cblx0LyoqIEB0eXBlIHtFbGVtZW50IHwgRG9jdW1lbnRGcmFnbWVudH0gKi9cblx0dmFyIG5vZGU7XG5cblx0cmV0dXJuICgpID0+IHtcblx0XHRpZiAoaHlkcmF0aW5nKSB7XG5cdFx0XHRhc3NpZ25fbm9kZXMoaHlkcmF0ZV9ub2RlLCBudWxsKTtcblx0XHRcdHJldHVybiBoeWRyYXRlX25vZGU7XG5cdFx0fVxuXG5cdFx0aWYgKCFub2RlKSB7XG5cdFx0XHR2YXIgZnJhZ21lbnQgPSAvKiogQHR5cGUge0RvY3VtZW50RnJhZ21lbnR9ICovIChjcmVhdGVfZnJhZ21lbnRfZnJvbV9odG1sKHdyYXBwZWQpKTtcblx0XHRcdHZhciByb290ID0gLyoqIEB0eXBlIHtFbGVtZW50fSAqLyAoZ2V0X2ZpcnN0X2NoaWxkKGZyYWdtZW50KSk7XG5cblx0XHRcdGlmIChpc19mcmFnbWVudCkge1xuXHRcdFx0XHRub2RlID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuXHRcdFx0XHR3aGlsZSAoZ2V0X2ZpcnN0X2NoaWxkKHJvb3QpKSB7XG5cdFx0XHRcdFx0bm9kZS5hcHBlbmRDaGlsZCgvKiogQHR5cGUge05vZGV9ICovIChnZXRfZmlyc3RfY2hpbGQocm9vdCkpKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bm9kZSA9IC8qKiBAdHlwZSB7RWxlbWVudH0gKi8gKGdldF9maXJzdF9jaGlsZChyb290KSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dmFyIGNsb25lID0gLyoqIEB0eXBlIHtUZW1wbGF0ZU5vZGV9ICovIChub2RlLmNsb25lTm9kZSh0cnVlKSk7XG5cblx0XHRpZiAoaXNfZnJhZ21lbnQpIHtcblx0XHRcdHZhciBzdGFydCA9IC8qKiBAdHlwZSB7VGVtcGxhdGVOb2RlfSAqLyAoZ2V0X2ZpcnN0X2NoaWxkKGNsb25lKSk7XG5cdFx0XHR2YXIgZW5kID0gLyoqIEB0eXBlIHtUZW1wbGF0ZU5vZGV9ICovIChjbG9uZS5sYXN0Q2hpbGQpO1xuXG5cdFx0XHRhc3NpZ25fbm9kZXMoc3RhcnQsIGVuZCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGFzc2lnbl9ub2RlcyhjbG9uZSwgY2xvbmUpO1xuXHRcdH1cblxuXHRcdHJldHVybiBjbG9uZTtcblx0fTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29udGVudFxuICogQHBhcmFtIHtudW1iZXJ9IGZsYWdzXG4gKiBAcmV0dXJucyB7KCkgPT4gTm9kZSB8IE5vZGVbXX1cbiAqL1xuLyojX19OT19TSURFX0VGRkVDVFNfXyovXG5leHBvcnQgZnVuY3Rpb24gc3ZnX3RlbXBsYXRlX3dpdGhfc2NyaXB0KGNvbnRlbnQsIGZsYWdzKSB7XG5cdHZhciBmbiA9IG5zX3RlbXBsYXRlKGNvbnRlbnQsIGZsYWdzKTtcblx0cmV0dXJuICgpID0+IHJ1bl9zY3JpcHRzKC8qKiBAdHlwZSB7RWxlbWVudCB8IERvY3VtZW50RnJhZ21lbnR9ICovIChmbigpKSk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbnRlbnRcbiAqIEBwYXJhbSB7bnVtYmVyfSBmbGFnc1xuICogQHJldHVybnMgeygpID0+IE5vZGUgfCBOb2RlW119XG4gKi9cbi8qI19fTk9fU0lERV9FRkZFQ1RTX18qL1xuZXhwb3J0IGZ1bmN0aW9uIG1hdGhtbF90ZW1wbGF0ZShjb250ZW50LCBmbGFncykge1xuXHRyZXR1cm4gbnNfdGVtcGxhdGUoY29udGVudCwgZmxhZ3MsICdtYXRoJyk7XG59XG5cbi8qKlxuICogQ3JlYXRpbmcgYSBkb2N1bWVudCBmcmFnbWVudCBmcm9tIEhUTUwgdGhhdCBjb250YWlucyBzY3JpcHQgdGFncyB3aWxsIG5vdCBleGVjdXRlXG4gKiB0aGUgc2NyaXB0cy4gV2UgbmVlZCB0byByZXBsYWNlIHRoZSBzY3JpcHQgdGFncyB3aXRoIG5ldyBvbmVzIHNvIHRoYXQgdGhleSBhcmUgZXhlY3V0ZWQuXG4gKiBAcGFyYW0ge0VsZW1lbnQgfCBEb2N1bWVudEZyYWdtZW50fSBub2RlXG4gKiBAcmV0dXJucyB7Tm9kZSB8IE5vZGVbXX1cbiAqL1xuZnVuY3Rpb24gcnVuX3NjcmlwdHMobm9kZSkge1xuXHQvLyBzY3JpcHRzIHdlcmUgU1NSJ2QsIGluIHdoaWNoIGNhc2UgdGhleSB3aWxsIHJ1blxuXHRpZiAoaHlkcmF0aW5nKSByZXR1cm4gbm9kZTtcblxuXHRjb25zdCBpc19mcmFnbWVudCA9IG5vZGUubm9kZVR5cGUgPT09IDExO1xuXHRjb25zdCBzY3JpcHRzID1cblx0XHQvKiogQHR5cGUge0hUTUxFbGVtZW50fSAqLyAobm9kZSkudGFnTmFtZSA9PT0gJ1NDUklQVCdcblx0XHRcdD8gWy8qKiBAdHlwZSB7SFRNTFNjcmlwdEVsZW1lbnR9ICovIChub2RlKV1cblx0XHRcdDogbm9kZS5xdWVyeVNlbGVjdG9yQWxsKCdzY3JpcHQnKTtcblx0Y29uc3QgZWZmZWN0ID0gLyoqIEB0eXBlIHtFZmZlY3R9ICovIChhY3RpdmVfZWZmZWN0KTtcblxuXHRmb3IgKGNvbnN0IHNjcmlwdCBvZiBzY3JpcHRzKSB7XG5cdFx0Y29uc3QgY2xvbmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcblx0XHRmb3IgKHZhciBhdHRyaWJ1dGUgb2Ygc2NyaXB0LmF0dHJpYnV0ZXMpIHtcblx0XHRcdGNsb25lLnNldEF0dHJpYnV0ZShhdHRyaWJ1dGUubmFtZSwgYXR0cmlidXRlLnZhbHVlKTtcblx0XHR9XG5cblx0XHRjbG9uZS50ZXh0Q29udGVudCA9IHNjcmlwdC50ZXh0Q29udGVudDtcblxuXHRcdC8vIFRoZSBzY3JpcHQgaGFzIGNoYW5nZWQgLSBpZiBpdCdzIGF0IHRoZSBlZGdlcywgdGhlIGVmZmVjdCBub3cgcG9pbnRzIGF0IGRlYWQgbm9kZXNcblx0XHRpZiAoaXNfZnJhZ21lbnQgPyBub2RlLmZpcnN0Q2hpbGQgPT09IHNjcmlwdCA6IG5vZGUgPT09IHNjcmlwdCkge1xuXHRcdFx0ZWZmZWN0Lm5vZGVzX3N0YXJ0ID0gY2xvbmU7XG5cdFx0fVxuXHRcdGlmIChpc19mcmFnbWVudCA/IG5vZGUubGFzdENoaWxkID09PSBzY3JpcHQgOiBub2RlID09PSBzY3JpcHQpIHtcblx0XHRcdGVmZmVjdC5ub2Rlc19lbmQgPSBjbG9uZTtcblx0XHR9XG5cblx0XHRzY3JpcHQucmVwbGFjZVdpdGgoY2xvbmUpO1xuXHR9XG5cdHJldHVybiBub2RlO1xufVxuXG4vKipcbiAqIERvbid0IG1hcmsgdGhpcyBhcyBzaWRlLWVmZmVjdC1mcmVlLCBoeWRyYXRpb24gbmVlZHMgdG8gd2FsayBhbGwgbm9kZXNcbiAqIEBwYXJhbSB7YW55fSB2YWx1ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gdGV4dCh2YWx1ZSA9ICcnKSB7XG5cdGlmICghaHlkcmF0aW5nKSB7XG5cdFx0dmFyIHQgPSBjcmVhdGVfdGV4dCh2YWx1ZSArICcnKTtcblx0XHRhc3NpZ25fbm9kZXModCwgdCk7XG5cdFx0cmV0dXJuIHQ7XG5cdH1cblxuXHR2YXIgbm9kZSA9IGh5ZHJhdGVfbm9kZTtcblxuXHRpZiAobm9kZS5ub2RlVHlwZSAhPT0gMykge1xuXHRcdC8vIGlmIGFuIHtleHByZXNzaW9ufSBpcyBlbXB0eSBkdXJpbmcgU1NSLCB3ZSBuZWVkIHRvIGluc2VydCBhbiBlbXB0eSB0ZXh0IG5vZGVcblx0XHRub2RlLmJlZm9yZSgobm9kZSA9IGNyZWF0ZV90ZXh0KCkpKTtcblx0XHRzZXRfaHlkcmF0ZV9ub2RlKG5vZGUpO1xuXHR9XG5cblx0YXNzaWduX25vZGVzKG5vZGUsIG5vZGUpO1xuXHRyZXR1cm4gbm9kZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbW1lbnQoKSB7XG5cdC8vIHdlJ3JlIG5vdCBkZWxlZ2F0aW5nIHRvIGB0ZW1wbGF0ZWAgaGVyZSBmb3IgcGVyZm9ybWFuY2UgcmVhc29uc1xuXHRpZiAoaHlkcmF0aW5nKSB7XG5cdFx0YXNzaWduX25vZGVzKGh5ZHJhdGVfbm9kZSwgbnVsbCk7XG5cdFx0cmV0dXJuIGh5ZHJhdGVfbm9kZTtcblx0fVxuXG5cdHZhciBmcmFnID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuXHR2YXIgc3RhcnQgPSBkb2N1bWVudC5jcmVhdGVDb21tZW50KCcnKTtcblx0dmFyIGFuY2hvciA9IGNyZWF0ZV90ZXh0KCk7XG5cdGZyYWcuYXBwZW5kKHN0YXJ0LCBhbmNob3IpO1xuXG5cdGFzc2lnbl9ub2RlcyhzdGFydCwgYW5jaG9yKTtcblxuXHRyZXR1cm4gZnJhZztcbn1cblxuLyoqXG4gKiBBc3NpZ24gdGhlIGNyZWF0ZWQgKG9yIGluIGh5ZHJhdGlvbiBtb2RlLCB0cmF2ZXJzZWQpIGRvbSBlbGVtZW50cyB0byB0aGUgY3VycmVudCBibG9ja1xuICogYW5kIGluc2VydCB0aGUgZWxlbWVudHMgaW50byB0aGUgZG9tIChpbiBjbGllbnQgbW9kZSkuXG4gKiBAcGFyYW0ge1RleHQgfCBDb21tZW50IHwgRWxlbWVudH0gYW5jaG9yXG4gKiBAcGFyYW0ge0RvY3VtZW50RnJhZ21lbnQgfCBFbGVtZW50fSBkb21cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFwcGVuZChhbmNob3IsIGRvbSkge1xuXHRpZiAoaHlkcmF0aW5nKSB7XG5cdFx0LyoqIEB0eXBlIHtFZmZlY3R9ICovIChhY3RpdmVfZWZmZWN0KS5ub2Rlc19lbmQgPSBoeWRyYXRlX25vZGU7XG5cdFx0aHlkcmF0ZV9uZXh0KCk7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0aWYgKGFuY2hvciA9PT0gbnVsbCkge1xuXHRcdC8vIGVkZ2UgY2FzZSDigJQgdm9pZCBgPHN2ZWx0ZTplbGVtZW50PmAgd2l0aCBjb250ZW50XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0YW5jaG9yLmJlZm9yZSgvKiogQHR5cGUge05vZGV9ICovIChkb20pKTtcbn1cbiIsIi8qKiBAaW1wb3J0IHsgQ29tcG9uZW50Q29udGV4dCwgRWZmZWN0LCBUZW1wbGF0ZU5vZGUgfSBmcm9tICcjY2xpZW50JyAqL1xuLyoqIEBpbXBvcnQgeyBDb21wb25lbnQsIENvbXBvbmVudFR5cGUsIFN2ZWx0ZUNvbXBvbmVudCwgTW91bnRPcHRpb25zIH0gZnJvbSAnLi4vLi4vaW5kZXguanMnICovXG5pbXBvcnQgeyBERVYgfSBmcm9tICdlc20tZW52JztcbmltcG9ydCB7XG5cdGNsZWFyX3RleHRfY29udGVudCxcblx0Y3JlYXRlX3RleHQsXG5cdGdldF9maXJzdF9jaGlsZCxcblx0Z2V0X25leHRfc2libGluZyxcblx0aW5pdF9vcGVyYXRpb25zXG59IGZyb20gJy4vZG9tL29wZXJhdGlvbnMuanMnO1xuaW1wb3J0IHsgSFlEUkFUSU9OX0VORCwgSFlEUkFUSU9OX0VSUk9SLCBIWURSQVRJT05fU1RBUlQgfSBmcm9tICcuLi8uLi9jb25zdGFudHMuanMnO1xuaW1wb3J0IHsgcHVzaCwgcG9wLCBjb21wb25lbnRfY29udGV4dCwgYWN0aXZlX2VmZmVjdCB9IGZyb20gJy4vcnVudGltZS5qcyc7XG5pbXBvcnQgeyBjb21wb25lbnRfcm9vdCwgYnJhbmNoIH0gZnJvbSAnLi9yZWFjdGl2aXR5L2VmZmVjdHMuanMnO1xuaW1wb3J0IHtcblx0aHlkcmF0ZV9uZXh0LFxuXHRoeWRyYXRlX25vZGUsXG5cdGh5ZHJhdGluZyxcblx0c2V0X2h5ZHJhdGVfbm9kZSxcblx0c2V0X2h5ZHJhdGluZ1xufSBmcm9tICcuL2RvbS9oeWRyYXRpb24uanMnO1xuaW1wb3J0IHsgYXJyYXlfZnJvbSB9IGZyb20gJy4uL3NoYXJlZC91dGlscy5qcyc7XG5pbXBvcnQge1xuXHRhbGxfcmVnaXN0ZXJlZF9ldmVudHMsXG5cdGhhbmRsZV9ldmVudF9wcm9wYWdhdGlvbixcblx0cm9vdF9ldmVudF9oYW5kbGVzXG59IGZyb20gJy4vZG9tL2VsZW1lbnRzL2V2ZW50cy5qcyc7XG5pbXBvcnQgeyByZXNldF9oZWFkX2FuY2hvciB9IGZyb20gJy4vZG9tL2Jsb2Nrcy9zdmVsdGUtaGVhZC5qcyc7XG5pbXBvcnQgKiBhcyB3IGZyb20gJy4vd2FybmluZ3MuanMnO1xuaW1wb3J0ICogYXMgZSBmcm9tICcuL2Vycm9ycy5qcyc7XG5pbXBvcnQgeyBhc3NpZ25fbm9kZXMgfSBmcm9tICcuL2RvbS90ZW1wbGF0ZS5qcyc7XG5pbXBvcnQgeyBpc19wYXNzaXZlX2V2ZW50IH0gZnJvbSAnLi4vLi4vdXRpbHMuanMnO1xuXG4vKipcbiAqIFRoaXMgaXMgbm9ybWFsbHkgdHJ1ZSDigJQgYmxvY2sgZWZmZWN0cyBzaG91bGQgcnVuIHRoZWlyIGludHJvIHRyYW5zaXRpb25zIOKAlFxuICogYnV0IGlzIGZhbHNlIGR1cmluZyBoeWRyYXRpb24gKHVubGVzcyBgb3B0aW9ucy5pbnRyb2AgaXMgYHRydWVgKSBhbmRcbiAqIHdoZW4gY3JlYXRpbmcgdGhlIGNoaWxkcmVuIG9mIGEgYDxzdmVsdGU6ZWxlbWVudD5gIHRoYXQganVzdCBjaGFuZ2VkIHRhZ1xuICovXG5leHBvcnQgbGV0IHNob3VsZF9pbnRybyA9IHRydWU7XG5cbi8qKiBAcGFyYW0ge2Jvb2xlYW59IHZhbHVlICovXG5leHBvcnQgZnVuY3Rpb24gc2V0X3Nob3VsZF9pbnRybyh2YWx1ZSkge1xuXHRzaG91bGRfaW50cm8gPSB2YWx1ZTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IHRleHRcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRfdGV4dCh0ZXh0LCB2YWx1ZSkge1xuXHQvLyBGb3Igb2JqZWN0cywgd2UgYXBwbHkgc3RyaW5nIGNvZXJjaW9uICh3aGljaCBtaWdodCBtYWtlIHRoaW5ncyBsaWtlICRzdGF0ZSBhcnJheSByZWZlcmVuY2VzIGluIHRoZSB0ZW1wbGF0ZSByZWFjdGl2ZSkgYmVmb3JlIGRpZmZpbmdcblx0dmFyIHN0ciA9IHZhbHVlID09IG51bGwgPyAnJyA6IHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgPyB2YWx1ZSArICcnIDogdmFsdWU7XG5cdC8vIEB0cy1leHBlY3QtZXJyb3Jcblx0aWYgKHN0ciAhPT0gKHRleHQuX190ID8/PSB0ZXh0Lm5vZGVWYWx1ZSkpIHtcblx0XHQvLyBAdHMtZXhwZWN0LWVycm9yXG5cdFx0dGV4dC5fX3QgPSBzdHI7XG5cdFx0dGV4dC5ub2RlVmFsdWUgPSBzdHIgPT0gbnVsbCA/ICcnIDogc3RyICsgJyc7XG5cdH1cbn1cblxuLyoqXG4gKiBNb3VudHMgYSBjb21wb25lbnQgdG8gdGhlIGdpdmVuIHRhcmdldCBhbmQgcmV0dXJucyB0aGUgZXhwb3J0cyBhbmQgcG90ZW50aWFsbHkgdGhlIHByb3BzIChpZiBjb21waWxlZCB3aXRoIGBhY2Nlc3NvcnM6IHRydWVgKSBvZiB0aGUgY29tcG9uZW50LlxuICogVHJhbnNpdGlvbnMgd2lsbCBwbGF5IGR1cmluZyB0aGUgaW5pdGlhbCByZW5kZXIgdW5sZXNzIHRoZSBgaW50cm9gIG9wdGlvbiBpcyBzZXQgdG8gYGZhbHNlYC5cbiAqXG4gKiBAdGVtcGxhdGUge1JlY29yZDxzdHJpbmcsIGFueT59IFByb3BzXG4gKiBAdGVtcGxhdGUge1JlY29yZDxzdHJpbmcsIGFueT59IEV4cG9ydHNcbiAqIEBwYXJhbSB7Q29tcG9uZW50VHlwZTxTdmVsdGVDb21wb25lbnQ8UHJvcHM+PiB8IENvbXBvbmVudDxQcm9wcywgRXhwb3J0cywgYW55Pn0gY29tcG9uZW50XG4gKiBAcGFyYW0ge01vdW50T3B0aW9uczxQcm9wcz59IG9wdGlvbnNcbiAqIEByZXR1cm5zIHtFeHBvcnRzfVxuICovXG5leHBvcnQgZnVuY3Rpb24gbW91bnQoY29tcG9uZW50LCBvcHRpb25zKSB7XG5cdHJldHVybiBfbW91bnQoY29tcG9uZW50LCBvcHRpb25zKTtcbn1cblxuLyoqXG4gKiBIeWRyYXRlcyBhIGNvbXBvbmVudCBvbiB0aGUgZ2l2ZW4gdGFyZ2V0IGFuZCByZXR1cm5zIHRoZSBleHBvcnRzIGFuZCBwb3RlbnRpYWxseSB0aGUgcHJvcHMgKGlmIGNvbXBpbGVkIHdpdGggYGFjY2Vzc29yczogdHJ1ZWApIG9mIHRoZSBjb21wb25lbnRcbiAqXG4gKiBAdGVtcGxhdGUge1JlY29yZDxzdHJpbmcsIGFueT59IFByb3BzXG4gKiBAdGVtcGxhdGUge1JlY29yZDxzdHJpbmcsIGFueT59IEV4cG9ydHNcbiAqIEBwYXJhbSB7Q29tcG9uZW50VHlwZTxTdmVsdGVDb21wb25lbnQ8UHJvcHM+PiB8IENvbXBvbmVudDxQcm9wcywgRXhwb3J0cywgYW55Pn0gY29tcG9uZW50XG4gKiBAcGFyYW0ge3t9IGV4dGVuZHMgUHJvcHMgPyB7XG4gKiBcdFx0dGFyZ2V0OiBEb2N1bWVudCB8IEVsZW1lbnQgfCBTaGFkb3dSb290O1xuICogXHRcdHByb3BzPzogUHJvcHM7XG4gKiBcdFx0ZXZlbnRzPzogUmVjb3JkPHN0cmluZywgKGU6IGFueSkgPT4gYW55PjtcbiAqICBcdGNvbnRleHQ/OiBNYXA8YW55LCBhbnk+O1xuICogXHRcdGludHJvPzogYm9vbGVhbjtcbiAqIFx0XHRyZWNvdmVyPzogYm9vbGVhbjtcbiAqIFx0fSA6IHtcbiAqIFx0XHR0YXJnZXQ6IERvY3VtZW50IHwgRWxlbWVudCB8IFNoYWRvd1Jvb3Q7XG4gKiBcdFx0cHJvcHM6IFByb3BzO1xuICogXHRcdGV2ZW50cz86IFJlY29yZDxzdHJpbmcsIChlOiBhbnkpID0+IGFueT47XG4gKiAgXHRjb250ZXh0PzogTWFwPGFueSwgYW55PjtcbiAqIFx0XHRpbnRybz86IGJvb2xlYW47XG4gKiBcdFx0cmVjb3Zlcj86IGJvb2xlYW47XG4gKiBcdH19IG9wdGlvbnNcbiAqIEByZXR1cm5zIHtFeHBvcnRzfVxuICovXG5leHBvcnQgZnVuY3Rpb24gaHlkcmF0ZShjb21wb25lbnQsIG9wdGlvbnMpIHtcblx0aW5pdF9vcGVyYXRpb25zKCk7XG5cdG9wdGlvbnMuaW50cm8gPSBvcHRpb25zLmludHJvID8/IGZhbHNlO1xuXHRjb25zdCB0YXJnZXQgPSBvcHRpb25zLnRhcmdldDtcblx0Y29uc3Qgd2FzX2h5ZHJhdGluZyA9IGh5ZHJhdGluZztcblx0Y29uc3QgcHJldmlvdXNfaHlkcmF0ZV9ub2RlID0gaHlkcmF0ZV9ub2RlO1xuXG5cdHRyeSB7XG5cdFx0dmFyIGFuY2hvciA9IC8qKiBAdHlwZSB7VGVtcGxhdGVOb2RlfSAqLyAoZ2V0X2ZpcnN0X2NoaWxkKHRhcmdldCkpO1xuXHRcdHdoaWxlIChcblx0XHRcdGFuY2hvciAmJlxuXHRcdFx0KGFuY2hvci5ub2RlVHlwZSAhPT0gOCB8fCAvKiogQHR5cGUge0NvbW1lbnR9ICovIChhbmNob3IpLmRhdGEgIT09IEhZRFJBVElPTl9TVEFSVClcblx0XHQpIHtcblx0XHRcdGFuY2hvciA9IC8qKiBAdHlwZSB7VGVtcGxhdGVOb2RlfSAqLyAoZ2V0X25leHRfc2libGluZyhhbmNob3IpKTtcblx0XHR9XG5cblx0XHRpZiAoIWFuY2hvcikge1xuXHRcdFx0dGhyb3cgSFlEUkFUSU9OX0VSUk9SO1xuXHRcdH1cblxuXHRcdHNldF9oeWRyYXRpbmcodHJ1ZSk7XG5cdFx0c2V0X2h5ZHJhdGVfbm9kZSgvKiogQHR5cGUge0NvbW1lbnR9ICovIChhbmNob3IpKTtcblx0XHRoeWRyYXRlX25leHQoKTtcblxuXHRcdGNvbnN0IGluc3RhbmNlID0gX21vdW50KGNvbXBvbmVudCwgeyAuLi5vcHRpb25zLCBhbmNob3IgfSk7XG5cblx0XHRpZiAoXG5cdFx0XHRoeWRyYXRlX25vZGUgPT09IG51bGwgfHxcblx0XHRcdGh5ZHJhdGVfbm9kZS5ub2RlVHlwZSAhPT0gOCB8fFxuXHRcdFx0LyoqIEB0eXBlIHtDb21tZW50fSAqLyAoaHlkcmF0ZV9ub2RlKS5kYXRhICE9PSBIWURSQVRJT05fRU5EXG5cdFx0KSB7XG5cdFx0XHR3Lmh5ZHJhdGlvbl9taXNtYXRjaCgpO1xuXHRcdFx0dGhyb3cgSFlEUkFUSU9OX0VSUk9SO1xuXHRcdH1cblxuXHRcdHNldF9oeWRyYXRpbmcoZmFsc2UpO1xuXG5cdFx0cmV0dXJuIC8qKiAgQHR5cGUge0V4cG9ydHN9ICovIChpbnN0YW5jZSk7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0aWYgKGVycm9yID09PSBIWURSQVRJT05fRVJST1IpIHtcblx0XHRcdGlmIChvcHRpb25zLnJlY292ZXIgPT09IGZhbHNlKSB7XG5cdFx0XHRcdGUuaHlkcmF0aW9uX2ZhaWxlZCgpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBhbiBlcnJvciBvY2N1cmVkIGFib3ZlLCB0aGUgb3BlcmF0aW9ucyBtaWdodCBub3QgeWV0IGhhdmUgYmVlbiBpbml0aWFsaXNlZC5cblx0XHRcdGluaXRfb3BlcmF0aW9ucygpO1xuXHRcdFx0Y2xlYXJfdGV4dF9jb250ZW50KHRhcmdldCk7XG5cblx0XHRcdHNldF9oeWRyYXRpbmcoZmFsc2UpO1xuXHRcdFx0cmV0dXJuIG1vdW50KGNvbXBvbmVudCwgb3B0aW9ucyk7XG5cdFx0fVxuXG5cdFx0dGhyb3cgZXJyb3I7XG5cdH0gZmluYWxseSB7XG5cdFx0c2V0X2h5ZHJhdGluZyh3YXNfaHlkcmF0aW5nKTtcblx0XHRzZXRfaHlkcmF0ZV9ub2RlKHByZXZpb3VzX2h5ZHJhdGVfbm9kZSk7XG5cdFx0cmVzZXRfaGVhZF9hbmNob3IoKTtcblx0fVxufVxuXG4vKiogQHR5cGUge01hcDxzdHJpbmcsIG51bWJlcj59ICovXG5jb25zdCBkb2N1bWVudF9saXN0ZW5lcnMgPSBuZXcgTWFwKCk7XG5cbi8qKlxuICogQHRlbXBsYXRlIHtSZWNvcmQ8c3RyaW5nLCBhbnk+fSBFeHBvcnRzXG4gKiBAcGFyYW0ge0NvbXBvbmVudFR5cGU8U3ZlbHRlQ29tcG9uZW50PGFueT4+IHwgQ29tcG9uZW50PGFueT59IENvbXBvbmVudFxuICogQHBhcmFtIHtNb3VudE9wdGlvbnN9IG9wdGlvbnNcbiAqIEByZXR1cm5zIHtFeHBvcnRzfVxuICovXG5mdW5jdGlvbiBfbW91bnQoQ29tcG9uZW50LCB7IHRhcmdldCwgYW5jaG9yLCBwcm9wcyA9IHt9LCBldmVudHMsIGNvbnRleHQsIGludHJvID0gdHJ1ZSB9KSB7XG5cdGluaXRfb3BlcmF0aW9ucygpO1xuXG5cdHZhciByZWdpc3RlcmVkX2V2ZW50cyA9IG5ldyBTZXQoKTtcblxuXHQvKiogQHBhcmFtIHtBcnJheTxzdHJpbmc+fSBldmVudHMgKi9cblx0dmFyIGV2ZW50X2hhbmRsZSA9IChldmVudHMpID0+IHtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGV2ZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGV2ZW50X25hbWUgPSBldmVudHNbaV07XG5cblx0XHRcdGlmIChyZWdpc3RlcmVkX2V2ZW50cy5oYXMoZXZlbnRfbmFtZSkpIGNvbnRpbnVlO1xuXHRcdFx0cmVnaXN0ZXJlZF9ldmVudHMuYWRkKGV2ZW50X25hbWUpO1xuXG5cdFx0XHR2YXIgcGFzc2l2ZSA9IGlzX3Bhc3NpdmVfZXZlbnQoZXZlbnRfbmFtZSk7XG5cblx0XHRcdC8vIEFkZCB0aGUgZXZlbnQgbGlzdGVuZXIgdG8gYm90aCB0aGUgY29udGFpbmVyIGFuZCB0aGUgZG9jdW1lbnQuXG5cdFx0XHQvLyBUaGUgY29udGFpbmVyIGxpc3RlbmVyIGVuc3VyZXMgd2UgY2F0Y2ggZXZlbnRzIGZyb20gd2l0aGluIGluIGNhc2Vcblx0XHRcdC8vIHRoZSBvdXRlciBjb250ZW50IHN0b3BzIHByb3BhZ2F0aW9uIG9mIHRoZSBldmVudC5cblx0XHRcdHRhcmdldC5hZGRFdmVudExpc3RlbmVyKGV2ZW50X25hbWUsIGhhbmRsZV9ldmVudF9wcm9wYWdhdGlvbiwgeyBwYXNzaXZlIH0pO1xuXG5cdFx0XHR2YXIgbiA9IGRvY3VtZW50X2xpc3RlbmVycy5nZXQoZXZlbnRfbmFtZSk7XG5cblx0XHRcdGlmIChuID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0Ly8gVGhlIGRvY3VtZW50IGxpc3RlbmVyIGVuc3VyZXMgd2UgY2F0Y2ggZXZlbnRzIHRoYXQgb3JpZ2luYXRlIGZyb20gZWxlbWVudHMgdGhhdCB3ZXJlXG5cdFx0XHRcdC8vIG1hbnVhbGx5IG1vdmVkIG91dHNpZGUgb2YgdGhlIGNvbnRhaW5lciAoZS5nLiB2aWEgbWFudWFsIHBvcnRhbHMpLlxuXHRcdFx0XHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKGV2ZW50X25hbWUsIGhhbmRsZV9ldmVudF9wcm9wYWdhdGlvbiwgeyBwYXNzaXZlIH0pO1xuXHRcdFx0XHRkb2N1bWVudF9saXN0ZW5lcnMuc2V0KGV2ZW50X25hbWUsIDEpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZG9jdW1lbnRfbGlzdGVuZXJzLnNldChldmVudF9uYW1lLCBuICsgMSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXG5cdGV2ZW50X2hhbmRsZShhcnJheV9mcm9tKGFsbF9yZWdpc3RlcmVkX2V2ZW50cykpO1xuXHRyb290X2V2ZW50X2hhbmRsZXMuYWRkKGV2ZW50X2hhbmRsZSk7XG5cblx0LyoqIEB0eXBlIHtFeHBvcnRzfSAqL1xuXHQvLyBAdHMtZXhwZWN0LWVycm9yIHdpbGwgYmUgZGVmaW5lZCBiZWNhdXNlIHRoZSByZW5kZXIgZWZmZWN0IHJ1bnMgc3luY2hyb25vdXNseVxuXHR2YXIgY29tcG9uZW50ID0gdW5kZWZpbmVkO1xuXG5cdHZhciB1bm1vdW50ID0gY29tcG9uZW50X3Jvb3QoKCkgPT4ge1xuXHRcdHZhciBhbmNob3Jfbm9kZSA9IGFuY2hvciA/PyB0YXJnZXQuYXBwZW5kQ2hpbGQoY3JlYXRlX3RleHQoKSk7XG5cblx0XHRicmFuY2goKCkgPT4ge1xuXHRcdFx0aWYgKGNvbnRleHQpIHtcblx0XHRcdFx0cHVzaCh7fSk7XG5cdFx0XHRcdHZhciBjdHggPSAvKiogQHR5cGUge0NvbXBvbmVudENvbnRleHR9ICovIChjb21wb25lbnRfY29udGV4dCk7XG5cdFx0XHRcdGN0eC5jID0gY29udGV4dDtcblx0XHRcdH1cblxuXHRcdFx0aWYgKGV2ZW50cykge1xuXHRcdFx0XHQvLyBXZSBjYW4ndCBzcHJlYWQgdGhlIG9iamVjdCBvciBlbHNlIHdlJ2QgbG9zZSB0aGUgc3RhdGUgcHJveHkgc3R1ZmYsIGlmIGl0IGlzIG9uZVxuXHRcdFx0XHQvKiogQHR5cGUge2FueX0gKi8gKHByb3BzKS4kJGV2ZW50cyA9IGV2ZW50cztcblx0XHRcdH1cblxuXHRcdFx0aWYgKGh5ZHJhdGluZykge1xuXHRcdFx0XHRhc3NpZ25fbm9kZXMoLyoqIEB0eXBlIHtUZW1wbGF0ZU5vZGV9ICovIChhbmNob3Jfbm9kZSksIG51bGwpO1xuXHRcdFx0fVxuXG5cdFx0XHRzaG91bGRfaW50cm8gPSBpbnRybztcblx0XHRcdC8vIEB0cy1leHBlY3QtZXJyb3IgdGhlIHB1YmxpYyB0eXBpbmdzIGFyZSBub3Qgd2hhdCB0aGUgYWN0dWFsIGZ1bmN0aW9uIGxvb2tzIGxpa2Vcblx0XHRcdGNvbXBvbmVudCA9IENvbXBvbmVudChhbmNob3Jfbm9kZSwgcHJvcHMpIHx8IHt9O1xuXHRcdFx0c2hvdWxkX2ludHJvID0gdHJ1ZTtcblxuXHRcdFx0aWYgKGh5ZHJhdGluZykge1xuXHRcdFx0XHQvKiogQHR5cGUge0VmZmVjdH0gKi8gKGFjdGl2ZV9lZmZlY3QpLm5vZGVzX2VuZCA9IGh5ZHJhdGVfbm9kZTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKGNvbnRleHQpIHtcblx0XHRcdFx0cG9wKCk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gKCkgPT4ge1xuXHRcdFx0Zm9yICh2YXIgZXZlbnRfbmFtZSBvZiByZWdpc3RlcmVkX2V2ZW50cykge1xuXHRcdFx0XHR0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudF9uYW1lLCBoYW5kbGVfZXZlbnRfcHJvcGFnYXRpb24pO1xuXG5cdFx0XHRcdHZhciBuID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChkb2N1bWVudF9saXN0ZW5lcnMuZ2V0KGV2ZW50X25hbWUpKTtcblxuXHRcdFx0XHRpZiAoLS1uID09PSAwKSB7XG5cdFx0XHRcdFx0ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudF9uYW1lLCBoYW5kbGVfZXZlbnRfcHJvcGFnYXRpb24pO1xuXHRcdFx0XHRcdGRvY3VtZW50X2xpc3RlbmVycy5kZWxldGUoZXZlbnRfbmFtZSk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZG9jdW1lbnRfbGlzdGVuZXJzLnNldChldmVudF9uYW1lLCBuKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyb290X2V2ZW50X2hhbmRsZXMuZGVsZXRlKGV2ZW50X2hhbmRsZSk7XG5cblx0XHRcdGlmIChhbmNob3Jfbm9kZSAhPT0gYW5jaG9yKSB7XG5cdFx0XHRcdGFuY2hvcl9ub2RlLnBhcmVudE5vZGU/LnJlbW92ZUNoaWxkKGFuY2hvcl9ub2RlKTtcblx0XHRcdH1cblx0XHR9O1xuXHR9KTtcblxuXHRtb3VudGVkX2NvbXBvbmVudHMuc2V0KGNvbXBvbmVudCwgdW5tb3VudCk7XG5cdHJldHVybiBjb21wb25lbnQ7XG59XG5cbi8qKlxuICogUmVmZXJlbmNlcyBvZiB0aGUgY29tcG9uZW50cyB0aGF0IHdlcmUgbW91bnRlZCBvciBoeWRyYXRlZC5cbiAqIFVzZXMgYSBgV2Vha01hcGAgdG8gYXZvaWQgbWVtb3J5IGxlYWtzLlxuICovXG5sZXQgbW91bnRlZF9jb21wb25lbnRzID0gbmV3IFdlYWtNYXAoKTtcblxuLyoqXG4gKiBVbm1vdW50cyBhIGNvbXBvbmVudCB0aGF0IHdhcyBwcmV2aW91c2x5IG1vdW50ZWQgdXNpbmcgYG1vdW50YCBvciBgaHlkcmF0ZWAuXG4gKlxuICogU2luY2UgNS4xMy4wLCBpZiBgb3B0aW9ucy5vdXRyb2AgaXMgYHRydWVgLCBbdHJhbnNpdGlvbnNdKGh0dHBzOi8vc3ZlbHRlLmRldi9kb2NzL3N2ZWx0ZS90cmFuc2l0aW9uKSB3aWxsIHBsYXkgYmVmb3JlIHRoZSBjb21wb25lbnQgaXMgcmVtb3ZlZCBmcm9tIHRoZSBET00uXG4gKlxuICogUmV0dXJucyBhIGBQcm9taXNlYCB0aGF0IHJlc29sdmVzIGFmdGVyIHRyYW5zaXRpb25zIGhhdmUgY29tcGxldGVkIGlmIGBvcHRpb25zLm91dHJvYCBpcyB0cnVlLCBvciBpbW1lZGlhdGVseSBvdGhlcndpc2UgKHByaW9yIHRvIDUuMTMuMCwgcmV0dXJucyBgdm9pZGApLlxuICpcbiAqIGBgYGpzXG4gKiBpbXBvcnQgeyBtb3VudCwgdW5tb3VudCB9IGZyb20gJ3N2ZWx0ZSc7XG4gKiBpbXBvcnQgQXBwIGZyb20gJy4vQXBwLnN2ZWx0ZSc7XG4gKlxuICogY29uc3QgYXBwID0gbW91bnQoQXBwLCB7IHRhcmdldDogZG9jdW1lbnQuYm9keSB9KTtcbiAqXG4gKiAvLyBsYXRlci4uLlxuICogdW5tb3VudChhcHAsIHsgb3V0cm86IHRydWUgfSk7XG4gKiBgYGBcbiAqIEBwYXJhbSB7UmVjb3JkPHN0cmluZywgYW55Pn0gY29tcG9uZW50XG4gKiBAcGFyYW0ge3sgb3V0cm8/OiBib29sZWFuIH19IFtvcHRpb25zXVxuICogQHJldHVybnMge1Byb21pc2U8dm9pZD59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1bm1vdW50KGNvbXBvbmVudCwgb3B0aW9ucykge1xuXHRjb25zdCBmbiA9IG1vdW50ZWRfY29tcG9uZW50cy5nZXQoY29tcG9uZW50KTtcblxuXHRpZiAoZm4pIHtcblx0XHRtb3VudGVkX2NvbXBvbmVudHMuZGVsZXRlKGNvbXBvbmVudCk7XG5cdFx0cmV0dXJuIGZuKG9wdGlvbnMpO1xuXHR9XG5cblx0aWYgKERFVikge1xuXHRcdHcubGlmZWN5Y2xlX2RvdWJsZV91bm1vdW50KCk7XG5cdH1cblxuXHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG59XG4iLCIvKiogQGltcG9ydCB7IENvbXBvbmVudENvbnRleHRMZWdhY3kgfSBmcm9tICcjY2xpZW50JyAqL1xuaW1wb3J0IHsgcnVuLCBydW5fYWxsIH0gZnJvbSAnLi4vLi4vLi4vc2hhcmVkL3V0aWxzLmpzJztcbmltcG9ydCB7IGRlcml2ZWQgfSBmcm9tICcuLi8uLi9yZWFjdGl2aXR5L2Rlcml2ZWRzLmpzJztcbmltcG9ydCB7IHVzZXJfcHJlX2VmZmVjdCwgdXNlcl9lZmZlY3QgfSBmcm9tICcuLi8uLi9yZWFjdGl2aXR5L2VmZmVjdHMuanMnO1xuaW1wb3J0IHsgY29tcG9uZW50X2NvbnRleHQsIGRlZXBfcmVhZF9zdGF0ZSwgZ2V0LCB1bnRyYWNrIH0gZnJvbSAnLi4vLi4vcnVudGltZS5qcyc7XG5cbi8qKlxuICogTGVnYWN5LW1vZGUgb25seTogQ2FsbCBgb25Nb3VudGAgY2FsbGJhY2tzIGFuZCBzZXQgdXAgYGJlZm9yZVVwZGF0ZWAvYGFmdGVyVXBkYXRlYCBlZmZlY3RzXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpbW11dGFibGVdXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbml0KGltbXV0YWJsZSA9IGZhbHNlKSB7XG5cdGNvbnN0IGNvbnRleHQgPSAvKiogQHR5cGUge0NvbXBvbmVudENvbnRleHRMZWdhY3l9ICovIChjb21wb25lbnRfY29udGV4dCk7XG5cblx0Y29uc3QgY2FsbGJhY2tzID0gY29udGV4dC5sLnU7XG5cdGlmICghY2FsbGJhY2tzKSByZXR1cm47XG5cblx0bGV0IHByb3BzID0gKCkgPT4gZGVlcF9yZWFkX3N0YXRlKGNvbnRleHQucyk7XG5cblx0aWYgKGltbXV0YWJsZSkge1xuXHRcdGxldCB2ZXJzaW9uID0gMDtcblx0XHRsZXQgcHJldiA9IC8qKiBAdHlwZSB7UmVjb3JkPHN0cmluZywgYW55Pn0gKi8gKHt9KTtcblxuXHRcdC8vIEluIGxlZ2FjeSBpbW11dGFibGUgbW9kZSwgYmVmb3JlL2FmdGVyVXBkYXRlIG9ubHkgZmlyZSBpZiB0aGUgb2JqZWN0IGlkZW50aXR5IG9mIGEgcHJvcCBjaGFuZ2VzXG5cdFx0Y29uc3QgZCA9IGRlcml2ZWQoKCkgPT4ge1xuXHRcdFx0bGV0IGNoYW5nZWQgPSBmYWxzZTtcblx0XHRcdGNvbnN0IHByb3BzID0gY29udGV4dC5zO1xuXHRcdFx0Zm9yIChjb25zdCBrZXkgaW4gcHJvcHMpIHtcblx0XHRcdFx0aWYgKHByb3BzW2tleV0gIT09IHByZXZba2V5XSkge1xuXHRcdFx0XHRcdHByZXZba2V5XSA9IHByb3BzW2tleV07XG5cdFx0XHRcdFx0Y2hhbmdlZCA9IHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmIChjaGFuZ2VkKSB2ZXJzaW9uKys7XG5cdFx0XHRyZXR1cm4gdmVyc2lvbjtcblx0XHR9KTtcblxuXHRcdHByb3BzID0gKCkgPT4gZ2V0KGQpO1xuXHR9XG5cblx0Ly8gYmVmb3JlVXBkYXRlXG5cdGlmIChjYWxsYmFja3MuYi5sZW5ndGgpIHtcblx0XHR1c2VyX3ByZV9lZmZlY3QoKCkgPT4ge1xuXHRcdFx0b2JzZXJ2ZV9hbGwoY29udGV4dCwgcHJvcHMpO1xuXHRcdFx0cnVuX2FsbChjYWxsYmFja3MuYik7XG5cdFx0fSk7XG5cdH1cblxuXHQvLyBvbk1vdW50IChtdXN0IHJ1biBiZWZvcmUgYWZ0ZXJVcGRhdGUpXG5cdHVzZXJfZWZmZWN0KCgpID0+IHtcblx0XHRjb25zdCBmbnMgPSB1bnRyYWNrKCgpID0+IGNhbGxiYWNrcy5tLm1hcChydW4pKTtcblx0XHRyZXR1cm4gKCkgPT4ge1xuXHRcdFx0Zm9yIChjb25zdCBmbiBvZiBmbnMpIHtcblx0XHRcdFx0aWYgKHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0XHRcdGZuKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9KTtcblxuXHQvLyBhZnRlclVwZGF0ZVxuXHRpZiAoY2FsbGJhY2tzLmEubGVuZ3RoKSB7XG5cdFx0dXNlcl9lZmZlY3QoKCkgPT4ge1xuXHRcdFx0b2JzZXJ2ZV9hbGwoY29udGV4dCwgcHJvcHMpO1xuXHRcdFx0cnVuX2FsbChjYWxsYmFja3MuYSk7XG5cdFx0fSk7XG5cdH1cbn1cblxuLyoqXG4gKiBJbnZva2UgdGhlIGdldHRlciBvZiBhbGwgc2lnbmFscyBhc3NvY2lhdGVkIHdpdGggYSBjb21wb25lbnRcbiAqIHNvIHRoZXkgY2FuIGJlIHJlZ2lzdGVyZWQgdG8gdGhlIGVmZmVjdCB0aGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCBpbi5cbiAqIEBwYXJhbSB7Q29tcG9uZW50Q29udGV4dExlZ2FjeX0gY29udGV4dFxuICogQHBhcmFtIHsoKCkgPT4gdm9pZCl9IHByb3BzXG4gKi9cbmZ1bmN0aW9uIG9ic2VydmVfYWxsKGNvbnRleHQsIHByb3BzKSB7XG5cdGlmIChjb250ZXh0Lmwucykge1xuXHRcdGZvciAoY29uc3Qgc2lnbmFsIG9mIGNvbnRleHQubC5zKSBnZXQoc2lnbmFsKTtcblx0fVxuXG5cdHByb3BzKCk7XG59XG4iLCJpbXBvcnQgeyBzZXQsIHNvdXJjZSB9IGZyb20gJy4uLy4uL3JlYWN0aXZpdHkvc291cmNlcy5qcyc7XG5pbXBvcnQgeyBnZXQgfSBmcm9tICcuLi8uLi9ydW50aW1lLmpzJztcbmltcG9ydCB7IGlzX2FycmF5IH0gZnJvbSAnLi4vLi4vLi4vc2hhcmVkL3V0aWxzLmpzJztcblxuLyoqXG4gKiBVbmRlciBzb21lIGNpcmN1bXN0YW5jZXMsIGltcG9ydHMgbWF5IGJlIHJlYWN0aXZlIGluIGxlZ2FjeSBtb2RlLiBJbiB0aGF0IGNhc2UsXG4gKiB0aGV5IHNob3VsZCBiZSB1c2luZyBgcmVhY3RpdmVfaW1wb3J0YCBhcyBwYXJ0IG9mIHRoZSB0cmFuc2Zvcm1hdGlvblxuICogQHBhcmFtIHsoKSA9PiBhbnl9IGZuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZWFjdGl2ZV9pbXBvcnQoZm4pIHtcblx0dmFyIHMgPSBzb3VyY2UoMCk7XG5cblx0cmV0dXJuIGZ1bmN0aW9uICgpIHtcblx0XHRpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuXHRcdFx0c2V0KHMsIGdldChzKSArIDEpO1xuXHRcdFx0cmV0dXJuIGFyZ3VtZW50c1swXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Z2V0KHMpO1xuXHRcdFx0cmV0dXJuIGZuKCk7XG5cdFx0fVxuXHR9O1xufVxuXG4vKipcbiAqIEB0aGlzIHthbnl9XG4gKiBAcGFyYW0ge1JlY29yZDxzdHJpbmcsIHVua25vd24+fSAkJHByb3BzXG4gKiBAcGFyYW0ge0V2ZW50fSBldmVudFxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBidWJibGVfZXZlbnQoJCRwcm9wcywgZXZlbnQpIHtcblx0dmFyIGV2ZW50cyA9IC8qKiBAdHlwZSB7UmVjb3JkPHN0cmluZywgRnVuY3Rpb25bXSB8IEZ1bmN0aW9uPn0gKi8gKCQkcHJvcHMuJCRldmVudHMpPy5bXG5cdFx0ZXZlbnQudHlwZVxuXHRdO1xuXG5cdHZhciBjYWxsYmFja3MgPSBpc19hcnJheShldmVudHMpID8gZXZlbnRzLnNsaWNlKCkgOiBldmVudHMgPT0gbnVsbCA/IFtdIDogW2V2ZW50c107XG5cblx0Zm9yICh2YXIgZm4gb2YgY2FsbGJhY2tzKSB7XG5cdFx0Ly8gUHJlc2VydmUgXCJ0aGlzXCIgY29udGV4dFxuXHRcdGZuLmNhbGwodGhpcywgZXZlbnQpO1xuXHR9XG59XG5cbi8qKlxuICogVXNlZCB0byBzaW11bGF0ZSBgJG9uYCBvbiBhIGNvbXBvbmVudCBpbnN0YW5jZSB3aGVuIGBjb21wYXRpYmlsaXR5LmNvbXBvbmVudEFwaSA9PT0gNGBcbiAqIEBwYXJhbSB7UmVjb3JkPHN0cmluZywgYW55Pn0gJCRwcm9wc1xuICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50X25hbWVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGV2ZW50X2NhbGxiYWNrXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhZGRfbGVnYWN5X2V2ZW50X2xpc3RlbmVyKCQkcHJvcHMsIGV2ZW50X25hbWUsIGV2ZW50X2NhbGxiYWNrKSB7XG5cdCQkcHJvcHMuJCRldmVudHMgfHw9IHt9O1xuXHQkJHByb3BzLiQkZXZlbnRzW2V2ZW50X25hbWVdIHx8PSBbXTtcblx0JCRwcm9wcy4kJGV2ZW50c1tldmVudF9uYW1lXS5wdXNoKGV2ZW50X2NhbGxiYWNrKTtcbn1cblxuLyoqXG4gKiBVc2VkIHRvIHNpbXVsYXRlIGAkc2V0YCBvbiBhIGNvbXBvbmVudCBpbnN0YW5jZSB3aGVuIGBjb21wYXRpYmlsaXR5LmNvbXBvbmVudEFwaSA9PT0gNGAuXG4gKiBOZWVkcyBjb21wb25lbnQgYWNjZXNzb3JzIHNvIHRoYXQgaXQgY2FuIGNhbGwgdGhlIHNldHRlciBvZiB0aGUgcHJvcC4gVGhlcmVmb3JlIGRvZXNuJ3RcbiAqIHdvcmsgZm9yIHVwZGF0aW5nIHByb3BzIGluIGAkJHByb3BzYCBvciBgJCRyZXN0UHJvcHNgLlxuICogQHRoaXMge1JlY29yZDxzdHJpbmcsIGFueT59XG4gKiBAcGFyYW0ge1JlY29yZDxzdHJpbmcsIGFueT59ICQkbmV3X3Byb3BzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVfbGVnYWN5X3Byb3BzKCQkbmV3X3Byb3BzKSB7XG5cdGZvciAodmFyIGtleSBpbiAkJG5ld19wcm9wcykge1xuXHRcdGlmIChrZXkgaW4gdGhpcykge1xuXHRcdFx0dGhpc1trZXldID0gJCRuZXdfcHJvcHNba2V5XTtcblx0XHR9XG5cdH1cbn1cbiIsIi8vIGdlbmVyYXRlZCBkdXJpbmcgcmVsZWFzZSwgZG8gbm90IG1vZGlmeVxuXG4vKipcbiAqIFRoZSBjdXJyZW50IHZlcnNpb24sIGFzIHNldCBpbiBwYWNrYWdlLmpzb24uXG4gKlxuICogaHR0cHM6Ly9zdmVsdGUuZGV2L2RvY3Mvc3ZlbHRlLWNvbXBpbGVyI3N2ZWx0ZS12ZXJzaW9uXG4gKiBAdHlwZSB7c3RyaW5nfVxuICovXG5leHBvcnQgY29uc3QgVkVSU0lPTiA9ICc1LjE2LjAnO1xuZXhwb3J0IGNvbnN0IFBVQkxJQ19WRVJTSU9OID0gJzUnO1xuIiwiaW1wb3J0IHsgUFVCTElDX1ZFUlNJT04gfSBmcm9tICcuLi92ZXJzaW9uLmpzJztcblxuaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKVxuXHQvLyBAdHMtaWdub3JlXG5cdCh3aW5kb3cuX19zdmVsdGUgfHw9IHsgdjogbmV3IFNldCgpIH0pLnYuYWRkKFBVQkxJQ19WRVJTSU9OKTtcbiIsImltcG9ydCB7IGVuYWJsZV9sZWdhY3lfbW9kZV9mbGFnIH0gZnJvbSAnLi9pbmRleC5qcyc7XG5cbmVuYWJsZV9sZWdhY3lfbW9kZV9mbGFnKCk7XG4iLCJpbnRlcmZhY2UgSUdsb2JhU3RhdGUge1xuICBjb3VudDogbnVtYmVyXG4gIGN1c3RvbWVyOiB7XG4gICAgbmFtZTogc3RyaW5nIHwgbnVsbFxuICB9XG59XG5cbmV4cG9ydCBjb25zdCBnbG9iYWxTdGF0ZSA9ICRzdGF0ZTxJR2xvYmFTdGF0ZT4oe1xuICBjb3VudDogMCxcbiAgY3VzdG9tZXI6IHtcbiAgICBuYW1lOiBudWxsLFxuICB9LFxufSlcbiIsIjxzY3JpcHQgbGFuZz1cInRzXCI+XG4gIGltcG9ydCB7IGdsb2JhbFN0YXRlIH0gZnJvbSAnLi9zdGF0ZS5zdmVsdGUnXG5cbiAgZnVuY3Rpb24gZ3JlZXQoKSB7XG4gICAgZ2xvYmFsU3RhdGUuY3VzdG9tZXIubmFtZSA9ICdTdmVsdGUnXG4gIH1cblxuICBmdW5jdGlvbiBpbmNyZW1lbnQoKSB7XG4gICAgZ2xvYmFsU3RhdGUuY291bnQgKz0gMVxuICB9XG48L3NjcmlwdD5cblxuPGJ1dHRvbiBvbmNsaWNrPXtncmVldH0+U2V0IGN1c3RvbWVyIG5hbWU8L2J1dHRvbj5cbjxidXR0b24gb25jbGljaz17aW5jcmVtZW50fT5JbmNyZW1lbnQgY291bnQ8L2J1dHRvbj5cblxuPGRpdj5DdXN0b21lciBuYW1lOiB7Z2xvYmFsU3RhdGUuY3VzdG9tZXIubmFtZX08L2Rpdj5cbjxkaXY+Q291bnQ6IHtnbG9iYWxTdGF0ZS5jb3VudH08L2Rpdj5cblxuPHN0eWxlPlxuICBidXR0b24ge1xuICAgIGZvbnQtc2l6ZTogMmVtO1xuICB9XG48L3N0eWxlPlxuIiwiaW1wb3J0ICcuL3N0eWxlcy5jc3MnXG5cbmltcG9ydCB7IG1vdW50IH0gZnJvbSAnc3ZlbHRlJ1xuXG5pbXBvcnQgQXBwIGZyb20gJy4vQXBwLnN2ZWx0ZSdcblxuY29uc3QgdGFyZ2V0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2FwcCcpXG5cbmlmICghdGFyZ2V0KSB7XG4gIHRocm93IG5ldyBFcnJvcignVGFyZ2V0IGVsZW1lbnQgbm90IGZvdW5kLicpXG59XG5cbm1vdW50KEFwcCwgeyB0YXJnZXQsIHByb3BzOiB7IC4uLnRhcmdldC5kYXRhc2V0IH0gfSlcbiJdLCJuYW1lcyI6WyJpc19hcnJheSIsImFycmF5X2Zyb20iLCJkZWZpbmVfcHJvcGVydHkiLCJnZXRfZGVzY3JpcHRvciIsImdldF9kZXNjcmlwdG9ycyIsIm9iamVjdF9wcm90b3R5cGUiLCJhcnJheV9wcm90b3R5cGUiLCJnZXRfcHJvdG90eXBlX29mIiwicnVuIiwiZm4iLCJydW5fYWxsIiwiYXJyIiwiaSIsIkRFUklWRUQiLCJFRkZFQ1QiLCJSRU5ERVJfRUZGRUNUIiwiQkxPQ0tfRUZGRUNUIiwiQlJBTkNIX0VGRkVDVCIsIlJPT1RfRUZGRUNUIiwiQk9VTkRBUllfRUZGRUNUIiwiVU5PV05FRCIsIkRJU0NPTk5FQ1RFRCIsIkNMRUFOIiwiRElSVFkiLCJNQVlCRV9ESVJUWSIsIklORVJUIiwiREVTVFJPWUVEIiwiRUZGRUNUX1JBTiIsIkVGRkVDVF9UUkFOU1BBUkVOVCIsIkhFQURfRUZGRUNUIiwiRUZGRUNUX0hBU19ERVJJVkVEIiwiU1RBVEVfU1lNQk9MIiwiZXF1YWxzIiwidmFsdWUiLCJlZmZlY3RfaW5fdGVhcmRvd24iLCJydW5lIiwiZWZmZWN0X2luX3Vub3duZWRfZGVyaXZlZCIsImVmZmVjdF9vcnBoYW4iLCJlZmZlY3RfdXBkYXRlX2RlcHRoX2V4Y2VlZGVkIiwic3RhdGVfZGVzY3JpcHRvcnNfZml4ZWQiLCJzdGF0ZV9wcm90b3R5cGVfZml4ZWQiLCJzdGF0ZV91bnNhZmVfbG9jYWxfcmVhZCIsInN0YXRlX3Vuc2FmZV9tdXRhdGlvbiIsImxlZ2FjeV9tb2RlX2ZsYWciLCJlbmFibGVfbGVnYWN5X21vZGVfZmxhZyIsIlRFTVBMQVRFX1VTRV9JTVBPUlRfTk9ERSIsIlVOSU5JVElBTElaRUQiLCJzb3VyY2UiLCJ2Iiwic3RhY2siLCJzaWduYWwiLCJzZXQiLCJhY3RpdmVfcmVhY3Rpb24iLCJpc19ydW5lcyIsImRlcml2ZWRfc291cmNlcyIsImUuc3RhdGVfdW5zYWZlX211dGF0aW9uIiwiaW50ZXJuYWxfc2V0IiwiaW5jcmVtZW50X3ZlcnNpb24iLCJtYXJrX3JlYWN0aW9ucyIsImFjdGl2ZV9lZmZlY3QiLCJuZXdfZGVwcyIsInNldF9zaWduYWxfc3RhdHVzIiwic2NoZWR1bGVfZWZmZWN0IiwidW50cmFja2VkX3dyaXRlcyIsInNldF91bnRyYWNrZWRfd3JpdGVzIiwic3RhdHVzIiwicmVhY3Rpb25zIiwicnVuZXMiLCJsZW5ndGgiLCJyZWFjdGlvbiIsImZsYWdzIiwicHJveHkiLCJwYXJlbnQiLCJwcmV2IiwicHJvdG90eXBlIiwic291cmNlcyIsImlzX3Byb3hpZWRfYXJyYXkiLCJ2ZXJzaW9uIiwibWV0YWRhdGEiLCJfIiwicHJvcCIsImRlc2NyaXB0b3IiLCJlLnN0YXRlX2Rlc2NyaXB0b3JzX2ZpeGVkIiwidGFyZ2V0IiwicyIsImxzIiwibiIsInVwZGF0ZV92ZXJzaW9uIiwicmVjZWl2ZXIiLCJfYSIsImV4aXN0cyIsImdldCIsImhhcyIsIm90aGVyX3MiLCJvd25fa2V5cyIsImtleSIsImUuc3RhdGVfcHJvdG90eXBlX2ZpeGVkIiwiZCIsIiR3aW5kb3ciLCJmaXJzdF9jaGlsZF9nZXR0ZXIiLCJuZXh0X3NpYmxpbmdfZ2V0dGVyIiwiaW5pdF9vcGVyYXRpb25zIiwiZWxlbWVudF9wcm90b3R5cGUiLCJub2RlX3Byb3RvdHlwZSIsImNyZWF0ZV90ZXh0IiwiZ2V0X2ZpcnN0X2NoaWxkIiwibm9kZSIsImdldF9uZXh0X3NpYmxpbmciLCJjaGlsZCIsImlzX3RleHQiLCJmaXJzdF9jaGlsZCIsImZyYWdtZW50IiwiZmlyc3QiLCJzaWJsaW5nIiwiY291bnQiLCJuZXh0X3NpYmxpbmciLCJkZXJpdmVkIiwicGFyZW50X2Rlcml2ZWQiLCJjb21wb25lbnRfY29udGV4dCIsImRlc3Ryb3lfZGVyaXZlZF9jaGlsZHJlbiIsImNoaWxkcmVuIiwiZGVzdHJveV9kZXJpdmVkIiwiZGVzdHJveV9lZmZlY3QiLCJnZXRfZGVyaXZlZF9wYXJlbnRfZWZmZWN0IiwiZXhlY3V0ZV9kZXJpdmVkIiwicHJldl9hY3RpdmVfZWZmZWN0Iiwic2V0X2FjdGl2ZV9lZmZlY3QiLCJ1cGRhdGVfcmVhY3Rpb24iLCJ1cGRhdGVfZGVyaXZlZCIsInNraXBfcmVhY3Rpb24iLCJyZW1vdmVfcmVhY3Rpb25zIiwidmFsaWRhdGVfZWZmZWN0IiwiZS5lZmZlY3Rfb3JwaGFuIiwiZS5lZmZlY3RfaW5fdW5vd25lZF9kZXJpdmVkIiwiaXNfZGVzdHJveWluZ19lZmZlY3QiLCJlLmVmZmVjdF9pbl90ZWFyZG93biIsInB1c2hfZWZmZWN0IiwiZWZmZWN0IiwicGFyZW50X2VmZmVjdCIsInBhcmVudF9sYXN0IiwiY3JlYXRlX2VmZmVjdCIsInR5cGUiLCJzeW5jIiwicHVzaCIsImlzX3Jvb3QiLCJwcmV2aW91c2x5X2ZsdXNoaW5nX2VmZmVjdCIsImlzX2ZsdXNoaW5nX2VmZmVjdCIsInNldF9pc19mbHVzaGluZ19lZmZlY3QiLCJ1cGRhdGVfZWZmZWN0IiwiZSIsImluZXJ0IiwidXNlcl9lZmZlY3QiLCJkZWZlciIsImNvbnRleHQiLCJ1c2VyX3ByZV9lZmZlY3QiLCJyZW5kZXJfZWZmZWN0IiwiY29tcG9uZW50X3Jvb3QiLCJvcHRpb25zIiwiZnVsZmlsIiwicGF1c2VfZWZmZWN0IiwidGVtcGxhdGVfZWZmZWN0IiwiYmxvY2siLCJicmFuY2giLCJleGVjdXRlX2VmZmVjdF90ZWFyZG93biIsInRlYXJkb3duIiwicHJldmlvdXNseV9kZXN0cm95aW5nX2VmZmVjdCIsInByZXZpb3VzX3JlYWN0aW9uIiwic2V0X2lzX2Rlc3Ryb3lpbmdfZWZmZWN0Iiwic2V0X2FjdGl2ZV9yZWFjdGlvbiIsImRlc3Ryb3lfZWZmZWN0X2Rlcml2ZWRzIiwiZGVyaXZlZHMiLCJkZXN0cm95X2VmZmVjdF9jaGlsZHJlbiIsInJlbW92ZV9kb20iLCJuZXh0IiwiZGVzdHJveV9ibG9ja19lZmZlY3RfY2hpbGRyZW4iLCJyZW1vdmVkIiwiZW5kIiwidHJhbnNpdGlvbnMiLCJ0cmFuc2l0aW9uIiwidW5saW5rX2VmZmVjdCIsImNhbGxiYWNrIiwicGF1c2VfY2hpbGRyZW4iLCJydW5fb3V0X3RyYW5zaXRpb25zIiwicmVtYWluaW5nIiwiY2hlY2siLCJsb2NhbCIsInRyYW5zcGFyZW50IiwiaXNfdGhyb3dpbmdfZXJyb3IiLCJpc19taWNyb190YXNrX3F1ZXVlZCIsImxhc3Rfc2NoZWR1bGVkX2VmZmVjdCIsInF1ZXVlZF9yb290X2VmZmVjdHMiLCJmbHVzaF9jb3VudCIsInNraXBwZWRfZGVwcyIsImN1cnJlbnRfdmVyc2lvbiIsImNoZWNrX2RpcnRpbmVzcyIsIl9iIiwiZGVwZW5kZW5jaWVzIiwiaXNfdW5vd25lZCIsImRlcGVuZGVuY3kiLCJwcm9wYWdhdGVfZXJyb3IiLCJlcnJvciIsImN1cnJlbnQiLCJzaG91bGRfcmV0aHJvd19lcnJvciIsImhhbmRsZV9lcnJvciIsInByZXZpb3VzX2VmZmVjdCIsInByZXZpb3VzX2RlcHMiLCJwcmV2aW91c19za2lwcGVkX2RlcHMiLCJwcmV2aW91c191bnRyYWNrZWRfd3JpdGVzIiwicHJldmlvdXNfc2tpcF9yZWFjdGlvbiIsInByZXZfZGVyaXZlZF9zb3VyY2VzIiwicHJldmlvdXNfY29tcG9uZW50X2NvbnRleHQiLCJyZXN1bHQiLCJkZXBzIiwicmVtb3ZlX3JlYWN0aW9uIiwiaW5kZXgiLCJuZXdfbGVuZ3RoIiwic3RhcnRfaW5kZXgiLCJpbmZpbml0ZV9sb29wX2d1YXJkIiwiZS5lZmZlY3RfdXBkYXRlX2RlcHRoX2V4Y2VlZGVkIiwiZmx1c2hfcXVldWVkX3Jvb3RfZWZmZWN0cyIsInJvb3RfZWZmZWN0cyIsImNvbGxlY3RlZF9lZmZlY3RzIiwicHJvY2Vzc19lZmZlY3RzIiwiZmx1c2hfcXVldWVkX2VmZmVjdHMiLCJlZmZlY3RzIiwicHJvY2Vzc19kZWZlcnJlZCIsInByZXZpb3VzX3F1ZXVlZF9yb290X2VmZmVjdHMiLCJjdXJyZW50X2VmZmVjdCIsIm1haW5fbG9vcCIsImlzX2JyYW5jaCIsImlzX3NraXBwYWJsZV9icmFuY2giLCJwYXJlbnRfc2libGluZyIsImlzX2Rlcml2ZWQiLCJlLnN0YXRlX3Vuc2FmZV9sb2NhbF9yZWFkIiwidW50cmFjayIsIlNUQVRVU19NQVNLIiwicHJvcHMiLCJwb3AiLCJjb21wb25lbnQiLCJjb250ZXh0X3N0YWNrX2l0ZW0iLCJjb21wb25lbnRfZWZmZWN0cyIsImNvbXBvbmVudF9lZmZlY3QiLCJkZWVwX3JlYWRfc3RhdGUiLCJkZWVwX3JlYWQiLCJ2aXNpdGVkIiwicHJvdG8iLCJkZXNjcmlwdG9ycyIsIlBBU1NJVkVfRVZFTlRTIiwiaXNfcGFzc2l2ZV9ldmVudCIsIm5hbWUiLCJhbGxfcmVnaXN0ZXJlZF9ldmVudHMiLCJyb290X2V2ZW50X2hhbmRsZXMiLCJkZWxlZ2F0ZSIsImV2ZW50cyIsImhhbmRsZV9ldmVudF9wcm9wYWdhdGlvbiIsImV2ZW50IiwiaGFuZGxlcl9lbGVtZW50Iiwib3duZXJfZG9jdW1lbnQiLCJldmVudF9uYW1lIiwicGF0aCIsImN1cnJlbnRfdGFyZ2V0IiwicGF0aF9pZHgiLCJoYW5kbGVkX2F0IiwiYXRfaWR4IiwiaGFuZGxlcl9pZHgiLCJ0aHJvd19lcnJvciIsIm90aGVyX2Vycm9ycyIsInBhcmVudF9lbGVtZW50IiwiZGVsZWdhdGVkIiwiZGF0YSIsImNyZWF0ZV9mcmFnbWVudF9mcm9tX2h0bWwiLCJodG1sIiwiZWxlbSIsImFzc2lnbl9ub2RlcyIsInN0YXJ0IiwidGVtcGxhdGUiLCJjb250ZW50IiwidXNlX2ltcG9ydF9ub2RlIiwiaGFzX3N0YXJ0IiwiY2xvbmUiLCJhcHBlbmQiLCJhbmNob3IiLCJkb20iLCJzZXRfdGV4dCIsInRleHQiLCJzdHIiLCJtb3VudCIsIl9tb3VudCIsImRvY3VtZW50X2xpc3RlbmVycyIsIkNvbXBvbmVudCIsImludHJvIiwicmVnaXN0ZXJlZF9ldmVudHMiLCJldmVudF9oYW5kbGUiLCJwYXNzaXZlIiwidW5tb3VudCIsImFuY2hvcl9ub2RlIiwiY3R4IiwibW91bnRlZF9jb21wb25lbnRzIiwiaW5pdCIsImltbXV0YWJsZSIsImNhbGxiYWNrcyIsImNoYW5nZWQiLCJvYnNlcnZlX2FsbCIsImZucyIsInJlYWN0aXZlX2ltcG9ydCIsIlBVQkxJQ19WRVJTSU9OIiwiZ2xvYmFsU3RhdGUiLCJncmVldCIsImluY3JlbWVudCIsIiQkX2ltcG9ydF9nbG9iYWxTdGF0ZSIsIiQuc2V0X3RleHQiLCJBcHAiXSwibWFwcGluZ3MiOiJBQUVPLElBQUlBLEdBQVcsTUFBTSxRQUNqQkMsR0FBYSxNQUFNLEtBRW5CQyxHQUFrQixPQUFPLGVBQ3pCQyxFQUFpQixPQUFPLHlCQUN4QkMsR0FBa0IsT0FBTywwQkFDekJDLEdBQW1CLE9BQU8sVUFDMUJDLEdBQWtCLE1BQU0sVUFDeEJDLEdBQW1CLE9BQU8sZUF5QjlCLFNBQVNDLEdBQUlDLEVBQUksQ0FDdkIsT0FBT0EsRUFBSSxDQUNaLENBR08sU0FBU0MsR0FBUUMsRUFBSyxDQUM1QixRQUFTQyxFQUFJLEVBQUdBLEVBQUlELEVBQUksT0FBUUMsSUFDL0JELEVBQUlDLENBQUMsRUFBRyxDQUVWLENDNUNPLE1BQU1DLEVBQVUsRUFDVkMsR0FBUyxFQUNUQyxHQUFnQixFQUNoQkMsR0FBZSxHQUNmQyxFQUFnQixHQUNoQkMsR0FBYyxHQUNkQyxHQUFrQixJQUNsQkMsRUFBVSxJQUNWQyxHQUFlLElBQ2ZDLEVBQVEsS0FDUkMsRUFBUSxLQUNSQyxFQUFjLEtBQ2RDLEdBQVEsS0FDUkMsRUFBWSxNQUNaQyxHQUFhLE1BRWJDLEdBQXFCLE1BSXJCQyxHQUFjLEdBQUssR0FDbkJDLEdBQXFCLEdBQUssR0FFMUJDLEVBQWUsT0FBTyxRQUFRLEVDckJwQyxTQUFTQyxHQUFPQyxFQUFPLENBQzdCLE9BQU9BLElBQVUsS0FBSyxDQUN2QixDQzRITyxTQUFTQyxHQUFtQkMsRUFBTSxDQU92QyxNQUFNLElBQUksTUFBTSx5Q0FBeUMsQ0FFM0QsQ0FNTyxTQUFTQyxJQUE0QixDQU8xQyxNQUFNLElBQUksTUFBTSxnREFBZ0QsQ0FFbEUsQ0FPTyxTQUFTQyxHQUFjRixFQUFNLENBT2xDLE1BQU0sSUFBSSxNQUFNLG9DQUFvQyxDQUV0RCxDQU1PLFNBQVNHLElBQStCLENBTzdDLE1BQU0sSUFBSSxNQUFNLG1EQUFtRCxDQUVyRSxDQW9HTyxTQUFTQyxJQUEwQixDQU94QyxNQUFNLElBQUksTUFBTSw4Q0FBOEMsQ0FFaEUsQ0FNTyxTQUFTQyxJQUF3QixDQU90QyxNQUFNLElBQUksTUFBTSw0Q0FBNEMsQ0FFOUQsQ0FNTyxTQUFTQyxJQUEwQixDQU94QyxNQUFNLElBQUksTUFBTSw4Q0FBOEMsQ0FFaEUsQ0FNTyxTQUFTQyxJQUF3QixDQU90QyxNQUFNLElBQUksTUFBTSw0Q0FBNEMsQ0FFOUQsQ0NqVk8sSUFBSUMsR0FBbUIsR0FHdkIsU0FBU0MsSUFBMEIsQ0FDekNELEdBQW1CLEVBQ3BCLENDYU8sTUFBTUUsR0FBMkIsRUFXM0JDLEVBQWdCLE9BQVEsRUN1QjlCLFNBQVNDLEVBQU9DLEVBQUdDLEVBQU8sQ0FFaEMsSUFBSUMsRUFBUyxDQUNaLEVBQUcsRUFDSCxFQUFBRixFQUNBLFVBQVcsS0FDWCxPQUFBaEIsR0FDQSxRQUFTLENBQ1QsRUFPRCxPQUFPa0IsQ0FDUixDQThFTyxTQUFTQyxFQUFJSixFQUFRZCxFQUFPLENBQ2xDLE9BQ0NtQixJQUFvQixNQUNwQkMsR0FBVSxHQUNURCxFQUFnQixHQUFLdkMsRUFBVUcsTUFHL0JzQyxJQUFvQixNQUFRLENBQUNBLEVBQWdCLFNBQVNQLENBQU0sSUFFN0RRLEdBQXlCLEVBR25CQyxHQUFhVCxFQUFRZCxDQUFLLENBQ2xDLENBUU8sU0FBU3VCLEdBQWFULEVBQVFkLEVBQU8sQ0FDM0MsT0FBS2MsRUFBTyxPQUFPZCxDQUFLLElBQ3ZCYyxFQUFPLEVBQUlkLEVBQ1hjLEVBQU8sUUFBVVUsR0FBbUIsRUFNcENDLEdBQWVYLEVBQVF4QixDQUFLLEVBUTNCOEIsR0FBVSxHQUNWTSxJQUFrQixNQUNqQkEsRUFBYyxFQUFJckMsR0FDbEIsRUFBQXFDLEVBQWMsRUFBSTFDLEtBRWYyQyxJQUFhLE1BQVFBLEVBQVMsU0FBU2IsQ0FBTSxHQUNoRGMsRUFBa0JGLEVBQWVwQyxDQUFLLEVBQ3RDdUMsR0FBZ0JILENBQWEsR0FFekJJLElBQXFCLEtBQ3hCQyxHQUFxQixDQUFDakIsQ0FBTSxDQUFDLEVBRTdCZ0IsRUFBaUIsS0FBS2hCLENBQU0sSUEyQnpCZCxDQUNSLENBT0EsU0FBU3lCLEdBQWVSLEVBQVFlLEVBQVEsQ0FDdkMsSUFBSUMsRUFBWWhCLEVBQU8sVUFDdkIsR0FBSWdCLElBQWMsS0FLbEIsUUFISUMsRUFBUWQsR0FBVSxFQUNsQmUsRUFBU0YsRUFBVSxPQUVkdEQsRUFBSSxFQUFHQSxFQUFJd0QsRUFBUXhELElBQUssQ0FDaEMsSUFBSXlELEVBQVdILEVBQVV0RCxDQUFDLEVBQ3RCMEQsRUFBUUQsRUFBUyxFQUdoQkMsRUFBUS9DLEdBR1QsQ0FBQzRDLEdBQVNFLElBQWFWLElBUTNCRSxFQUFrQlEsRUFBVUosQ0FBTSxFQUc3QkssR0FBU2hELEVBQVFGLEtBQ2hCa0QsRUFBUXpELEVBQ1o2QyxHQUF1Q1csRUFBVzdDLENBQVcsRUFFN0RzQyxHQUF1Q08sQ0FBVSxHQUdyRCxDQUNBLENDaFBPLFNBQVNFLEVBQU10QyxFQUFPdUMsRUFBUyxLQUFNQyxFQUFNLENBT2pELEdBQUksT0FBT3hDLEdBQVUsVUFBWUEsSUFBVSxNQUFRRixLQUFnQkUsRUFDbEUsT0FBT0EsRUFHUixNQUFNeUMsRUFBWW5FLEdBQWlCMEIsQ0FBSyxFQUV4QyxHQUFJeUMsSUFBY3JFLElBQW9CcUUsSUFBY3BFLEdBQ25ELE9BQU8yQixFQUlSLElBQUkwQyxFQUFVLElBQUksSUFDZEMsRUFBbUI1RSxHQUFTaUMsQ0FBSyxFQUNqQzRDLEVBQVU5QixFQUFPLENBQUMsRUFFbEI2QixHQUdIRCxFQUFRLElBQUksU0FBVTVCLEVBQTZCZCxFQUFPLE1BQWEsQ0FBQyxFQUl6RSxJQUFJNkMsRUF3QkosT0FBTyxJQUFJLE1BQTBCN0MsRUFBUSxDQUM1QyxlQUFlOEMsRUFBR0MsRUFBTUMsRUFBWSxFQUVsQyxFQUFFLFVBQVdBLElBQ2JBLEVBQVcsZUFBaUIsSUFDNUJBLEVBQVcsYUFBZSxJQUMxQkEsRUFBVyxXQUFhLEtBTXhCQyxHQUEyQixFQUc1QixJQUFJLEVBQUlQLEVBQVEsSUFBSUssQ0FBSSxFQUV4QixPQUFJLElBQU0sUUFDVCxFQUFJakMsRUFBT2tDLEVBQVcsS0FBWSxFQUNsQ04sRUFBUSxJQUFJSyxFQUFNLENBQUMsR0FFbkI3QixFQUFJLEVBQUdvQixFQUFNVSxFQUFXLE1BQU9ILENBQVEsQ0FBQyxFQUdsQyxFQUNQLEVBRUQsZUFBZUssRUFBUUgsRUFBTSxDQUM1QixJQUFJSSxFQUFJVCxFQUFRLElBQUlLLENBQUksRUFFeEIsR0FBSUksSUFBTSxPQUNMSixLQUFRRyxHQUNYUixFQUFRLElBQUlLLEVBQU1qQyxFQUFPRCxDQUFvQixDQUFDLE1BRXpDLENBR04sR0FBSThCLEdBQW9CLE9BQU9JLEdBQVMsU0FBVSxDQUNqRCxJQUFJSyxFQUFvQ1YsRUFBUSxJQUFJLFFBQVEsRUFDeERXLEVBQUksT0FBT04sQ0FBSSxFQUVmLE9BQU8sVUFBVU0sQ0FBQyxHQUFLQSxFQUFJRCxFQUFHLEdBQ2pDbEMsRUFBSWtDLEVBQUlDLENBQUMsQ0FFZixDQUNJbkMsRUFBSWlDLEVBQUd0QyxDQUFhLEVBQ3BCeUMsR0FBZVYsQ0FBTyxDQUMxQixDQUVHLE1BQU8sRUFDUCxFQUVELElBQUlNLEVBQVFILEVBQU1RLEVBQVUsQ0NsSTlCLElBQUFDLEVEdUlHLEdBQUlULElBQVNqRCxFQUNaLE9BQU9FLEVBR1IsSUFBSSxFQUFJMEMsRUFBUSxJQUFJSyxDQUFJLEVBQ3BCVSxFQUFTVixLQUFRRyxFQVFyQixHQUxJLElBQU0sU0FBYyxDQUFDTyxJQUFVRCxFQUFBdEYsRUFBZWdGLEVBQVFILENBQUksSUFBM0IsTUFBQVMsRUFBOEIsWUFDaEUsRUFBSTFDLEVBQU93QixFQUFNbUIsRUFBU1AsRUFBT0gsQ0FBSSxFQUFJbEMsRUFBZWdDLENBQVEsQ0FBUSxFQUN4RUgsRUFBUSxJQUFJSyxFQUFNLENBQUMsR0FHaEIsSUFBTSxPQUFXLENBQ3BCLElBQUksRUFBSVcsRUFBSSxDQUFDLEVBaUJiLE9BQU8sSUFBTTdDLEVBQWdCLE9BQVksQ0FDN0MsQ0FFRyxPQUFPLFFBQVEsSUFBSXFDLEVBQVFILEVBQU1RLENBQVEsQ0FDekMsRUFFRCx5QkFBeUJMLEVBQVFILEVBQU0sQ0FDdEMsSUFBSUMsRUFBYSxRQUFRLHlCQUF5QkUsRUFBUUgsQ0FBSSxFQUU5RCxHQUFJQyxHQUFjLFVBQVdBLEVBQVksQ0FDeEMsSUFBSSxFQUFJTixFQUFRLElBQUlLLENBQUksRUFDcEIsSUFBR0MsRUFBVyxNQUFRVSxFQUFJLENBQUMsRUFDbkMsU0FBY1YsSUFBZSxPQUFXLENBQ3BDLElBQUlsQyxFQUFTNEIsRUFBUSxJQUFJSyxDQUFJLEVBQ3pCL0MsRUFBUWMsR0FBQSxZQUFBQSxFQUFRLEVBRXBCLEdBQUlBLElBQVcsUUFBYWQsSUFBVWEsRUFDckMsTUFBTyxDQUNOLFdBQVksR0FDWixhQUFjLEdBQ2QsTUFBQWIsRUFDQSxTQUFVLEVBQ1YsQ0FFTixDQUVHLE9BQU9nRCxDQUNQLEVBRUQsSUFBSUUsRUFBUUgsRUFBTSxDQ25NcEIsSUFBQVMsRUR3TUcsR0FBSVQsSUFBU2pELEVBQ1osTUFBTyxHQUdSLElBQUlxRCxFQUFJVCxFQUFRLElBQUlLLENBQUksRUFDcEJZLEVBQU9SLElBQU0sUUFBYUEsRUFBRSxJQUFNdEMsR0FBa0IsUUFBUSxJQUFJcUMsRUFBUUgsQ0FBSSxFQUVoRixHQUNDSSxJQUFNLFFBQ0x6QixJQUFrQixPQUFTLENBQUNpQyxJQUFPSCxFQUFBdEYsRUFBZWdGLEVBQVFILENBQUksSUFBM0IsTUFBQVMsRUFBOEIsVUFDakUsQ0FDR0wsSUFBTSxTQUNUQSxFQUFJckMsRUFBTzZDLEVBQU1yQixFQUFNWSxFQUFPSCxDQUFJLEVBQUdGLENBQVEsRUFBSWhDLENBQW9CLEVBQ3JFNkIsRUFBUSxJQUFJSyxFQUFNSSxDQUFDLEdBR3BCLElBQUluRCxFQUFRMEQsRUFBSVAsQ0FBQyxFQUNqQixHQUFJbkQsSUFBVWEsRUFDYixNQUFPLEVBRVosQ0FFRyxPQUFPOEMsQ0FDUCxFQUVELElBQUlULEVBQVFILEVBQU0vQyxFQUFPdUQsRUFBVSxDQ2pPckMsSUFBQUMsRURrT0csSUFBSUwsRUFBSVQsRUFBUSxJQUFJSyxDQUFJLEVBQ3BCWSxFQUFNWixLQUFRRyxFQUdsQixHQUFJUCxHQUFvQkksSUFBUyxTQUNoQyxRQUFTcEUsRUFBSXFCLEVBQU9yQixFQUFtQ3dFLEVBQUcsRUFBR3hFLEdBQUssRUFBRyxDQUNwRSxJQUFJaUYsRUFBVWxCLEVBQVEsSUFBSS9ELEVBQUksRUFBRSxFQUM1QmlGLElBQVksT0FDZjFDLEVBQUkwQyxFQUFTL0MsQ0FBYSxFQUNoQmxDLEtBQUt1RSxJQUlmVSxFQUFVOUMsRUFBT0QsQ0FBb0IsRUFDckM2QixFQUFRLElBQUkvRCxFQUFJLEdBQUlpRixDQUFPLEVBRWpDLENBT09ULElBQU0sUUFDTCxDQUFDUSxJQUFPSCxFQUFBdEYsRUFBZWdGLEVBQVFILENBQUksSUFBM0IsTUFBQVMsRUFBOEIsWUFDekNMLEVBQUlyQyxFQUFPLE1BQWdCLEVBQzNCSSxFQUFJaUMsRUFBR2IsRUFBTXRDLEVBQU82QyxDQUFRLENBQUMsRUFDN0JILEVBQVEsSUFBSUssRUFBTUksQ0FBQyxJQUdwQlEsRUFBTVIsRUFBRSxJQUFNdEMsRUFDZEssRUFBSWlDLEVBQUdiLEVBQU10QyxFQUFPNkMsQ0FBUSxDQUFDLEdBWTlCLElBQUlHLEVBQWEsUUFBUSx5QkFBeUJFLEVBQVFILENBQUksRUFPOUQsR0FKSUMsR0FBQSxNQUFBQSxFQUFZLEtBQ2ZBLEVBQVcsSUFBSSxLQUFLTyxFQUFVdkQsQ0FBSyxFQUdoQyxDQUFDMkQsRUFBSyxDQUtULEdBQUloQixHQUFvQixPQUFPSSxHQUFTLFNBQVUsQ0FDakQsSUFBSUssRUFBb0NWLEVBQVEsSUFBSSxRQUFRLEVBQ3hEVyxFQUFJLE9BQU9OLENBQUksRUFFZixPQUFPLFVBQVVNLENBQUMsR0FBS0EsR0FBS0QsRUFBRyxHQUNsQ2xDLEVBQUlrQyxFQUFJQyxFQUFJLENBQUMsQ0FFbkIsQ0FFSUMsR0FBZVYsQ0FBTyxDQUMxQixDQUVHLE1BQU8sRUFDUCxFQUVELFFBQVFNLEVBQVEsQ0FDZlEsRUFBSWQsQ0FBTyxFQUVYLElBQUlpQixFQUFXLFFBQVEsUUFBUVgsQ0FBTSxFQUFFLE9BQVFZLEdBQVEsQ0FDdEQsSUFBSWhELEVBQVM0QixFQUFRLElBQUlvQixDQUFHLEVBQzVCLE9BQU9oRCxJQUFXLFFBQWFBLEVBQU8sSUFBTUQsQ0FDaEQsQ0FBSSxFQUVELE9BQVMsQ0FBQ2lELEVBQUtoRCxDQUFNLElBQUs0QixFQUNyQjVCLEVBQU8sSUFBTUQsR0FBaUIsRUFBRWlELEtBQU9aLElBQzFDVyxFQUFTLEtBQUtDLENBQUcsRUFJbkIsT0FBT0QsQ0FDUCxFQUVELGdCQUFpQixDQUNoQkUsR0FBeUIsQ0FDNUIsQ0FDQSxDQUFFLENBQ0YsQ0FNQSxTQUFTVCxHQUFlckMsRUFBUStDLEVBQUksRUFBRyxDQUN0QzlDLEVBQUlELEVBQVFBLEVBQU8sRUFBSStDLENBQUMsQ0FDekIsQ0U3VE8sSUFBSUMsR0FNUEMsR0FFQUMsR0FNRyxTQUFTQyxJQUFrQixDQUNqQyxHQUFJSCxLQUFZLE9BSWhCLENBQUFBLEdBQVUsT0FHVixJQUFJSSxFQUFvQixRQUFRLFVBQzVCQyxFQUFpQixLQUFLLFVBRzFCSixHQUFxQmhHLEVBQWVvRyxFQUFnQixZQUFZLEVBQUUsSUFFbEVILEdBQXNCakcsRUFBZW9HLEVBQWdCLGFBQWEsRUFBRSxJQUlwRUQsRUFBa0IsUUFBVSxPQUU1QkEsRUFBa0IsWUFBYyxHQUVoQ0EsRUFBa0IsYUFBZSxLQUVqQ0EsRUFBa0IsU0FBVyxLQUU3QkEsRUFBa0IsSUFBTSxPQUd4QixLQUFLLFVBQVUsSUFBTSxPQVF0QixDQU1PLFNBQVNFLEdBQVl2RSxFQUFRLEdBQUksQ0FDdkMsT0FBTyxTQUFTLGVBQWVBLENBQUssQ0FDckMsQ0FRTyxTQUFTd0UsR0FBZ0JDLEVBQU0sQ0FDckMsT0FBT1AsR0FBbUIsS0FBS08sQ0FBSSxDQUNwQyxDQVFPLFNBQVNDLEdBQWlCRCxFQUFNLENBQ3RDLE9BQU9OLEdBQW9CLEtBQUtNLENBQUksQ0FDckMsQ0FTTyxTQUFTRSxHQUFNRixFQUFNRyxFQUFTLENBRW5DLE9BQU9KLEdBQWdCQyxDQUFJLENBaUI3QixDQVFPLFNBQVNJLEdBQVlDLEVBQVVGLEVBQVMsQ0FDOUIsQ0FFZixJQUFJRyxFQUF5Q1AsR0FBcUNNLEdBR2xGLE9BQUlDLGFBQWlCLFNBQVdBLEVBQU0sT0FBUyxHQUFXTCxHQUFpQkssQ0FBSyxFQUV6RUEsQ0FDVCxDQWFBLENBU08sU0FBU0MsR0FBUVAsRUFBTVEsRUFBUSxFQUFHTCxFQUFVLEdBQU8sQ0FDekQsSUFBSU0sRUFBMENULEVBRzlDLEtBQU9RLEtBRU5DLEVBQTRDUixHQUFpQlEsQ0FBWSxFQUl6RSxPQUFPQSxDQXVCVCxDQ3hKTyxTQUFTQyxHQUFRM0csRUFBSSxDQUMzQixJQUFJNkQsRUFBUXpELEVBQVVVLEVBRWxCb0MsSUFBa0IsS0FDckJXLEdBQVNsRCxFQUlUdUMsRUFBYyxHQUFLN0IsR0FHcEIsSUFBSXVGLEVBQ0hqRSxJQUFvQixNQUFTQSxFQUFnQixFQUFJdkMsRUFDdEJ1QyxFQUN4QixLQUdKLE1BQU1GLEVBQVMsQ0FDZCxTQUFVLEtBQ1YsSUFBS29FLEVBQ0wsS0FBTSxLQUNOLE9BQUF0RixHQUNBLEVBQUdzQyxFQUNILEdBQUE3RCxFQUNBLFVBQVcsS0FDWCxFQUFxQixLQUNyQixRQUFTLEVBQ1QsT0FBUTRHLEdBQWtCMUQsQ0FDMUIsRUFNRCxPQUFJMEQsSUFBbUIsT0FDckJBLEVBQWUsV0FBZkEsRUFBZSxTQUFhLEtBQUksS0FBS25FLENBQU0sRUFHdENBLENBQ1IsQ0FrQkEsU0FBU3FFLEdBQXlCSCxFQUFTLENBQzFDLElBQUlJLEVBQVdKLEVBQVEsU0FFdkIsR0FBSUksSUFBYSxLQUFNLENBQ3RCSixFQUFRLFNBQVcsS0FFbkIsUUFBU3hHLEVBQUksRUFBR0EsRUFBSTRHLEVBQVMsT0FBUTVHLEdBQUssRUFBRyxDQUM1QyxJQUFJZ0csRUFBUVksRUFBUzVHLENBQUMsRUFDakJnRyxFQUFNLEVBQUkvRixFQUNkNEcsR0FBd0NiLENBQU8sRUFFL0NjLEVBQXNDZCxDQUFPLENBRWpELENBQ0EsQ0FDQSxDQWFBLFNBQVNlLEdBQTBCUCxFQUFTLENBRTNDLFFBREk1QyxFQUFTNEMsRUFBUSxPQUNkNUMsSUFBVyxNQUFNLENBQ3ZCLEdBQUssRUFBQUEsRUFBTyxFQUFJM0QsR0FDZixPQUE4QjJELEVBRS9CQSxFQUFTQSxFQUFPLE1BQ2xCLENBQ0MsT0FBTyxJQUNSLENBT08sU0FBU29ELEdBQWdCUixFQUFTLENBQ3hDLElBQUluRixFQUNBNEYsRUFBcUJsRSxFQUV6Qm1FLEVBQWtCSCxHQUEwQlAsQ0FBTyxDQUFDLEVBb0JuRCxHQUFJLENBQ0hHLEdBQXlCSCxDQUFPLEVBQ2hDbkYsRUFBUThGLEdBQWdCWCxDQUFPLENBQ2xDLFFBQVksQ0FDVFUsRUFBa0JELENBQWtCLENBQ3ZDLENBR0MsT0FBTzVGLENBQ1IsQ0FNTyxTQUFTK0YsR0FBZVosRUFBUyxDQUN2QyxJQUFJbkYsRUFBUTJGLEdBQWdCUixDQUFPLEVBQy9CbkQsR0FDRmdFLEdBQWtCYixFQUFRLEVBQUloRyxJQUFtQmdHLEVBQVEsT0FBUyxLQUFPNUYsRUFBY0YsRUFFekZ1QyxFQUFrQnVELEVBQVNuRCxDQUFNLEVBRTVCbUQsRUFBUSxPQUFPbkYsQ0FBSyxJQUN4Qm1GLEVBQVEsRUFBSW5GLEVBQ1ptRixFQUFRLFFBQVUzRCxHQUFtQixFQUV2QyxDQU1PLFNBQVNnRSxHQUFnQkwsRUFBUyxDQUN4Q0csR0FBeUJILENBQU8sRUFDaENjLEVBQWlCZCxFQUFTLENBQUMsRUFDM0J2RCxFQUFrQnVELEVBQVMxRixDQUFTLEVBRXBDMEYsRUFBUSxFQUFJQSxFQUFRLFNBQVdBLEVBQVEsS0FBT0EsRUFBUSxJQUFNQSxFQUFRLFVBQVksSUFDakYsQ0NySk8sU0FBU2UsR0FBZ0JoRyxFQUFNLENBQ2pDd0IsSUFBa0IsTUFBUVAsSUFBb0IsTUFDakRnRixHQUFvQixFQUdqQmhGLElBQW9CLE1BQVNBLEVBQWdCLEVBQUloQyxHQUNwRGlILEdBQTZCLEVBRzFCQyxJQUNIQyxHQUF5QixDQUUzQixDQU1BLFNBQVNDLEdBQVlDLEVBQVFDLEVBQWUsQ0FDM0MsSUFBSUMsRUFBY0QsRUFBYyxLQUM1QkMsSUFBZ0IsS0FDbkJELEVBQWMsS0FBT0EsRUFBYyxNQUFRRCxHQUUzQ0UsRUFBWSxLQUFPRixFQUNuQkEsRUFBTyxLQUFPRSxFQUNkRCxFQUFjLEtBQU9ELEVBRXZCLENBU0EsU0FBU0csRUFBY0MsRUFBTXBJLEVBQUlxSSxFQUFNQyxFQUFPLEdBQU0sQ0FDbkQsSUFBSUMsR0FBV0gsRUFBTzNILE1BQWlCLEVBQ25Dd0gsRUFBZ0IvRSxFQVVoQjhFLEVBQVMsQ0FDWixJQUFLbkIsRUFDTCxLQUFNLEtBQ04sU0FBVSxLQUNWLFlBQWEsS0FDYixVQUFXLEtBQ1gsRUFBR3VCLEVBQU90SCxFQUNWLE1BQU8sS0FDUCxHQUFBZCxFQUNBLEtBQU0sS0FDTixLQUFNLEtBQ04sT0FBUXVJLEVBQVUsS0FBT04sRUFDekIsS0FBTSxLQUNOLFNBQVUsS0FDVixZQUFhLEtBQ2IsUUFBUyxDQUNULEVBTUQsR0FBSUksRUFBTSxDQUNULElBQUlHLEVBQTZCQyxFQUVqQyxHQUFJLENBQ0hDLEdBQXVCLEVBQUksRUFDM0JDLEdBQWNYLENBQU0sRUFDcEJBLEVBQU8sR0FBSzlHLEVBQ1osT0FBUTBILEVBQUcsQ0FDWCxNQUFBM0IsRUFBZWUsQ0FBTSxFQUNmWSxDQUNULFFBQVksQ0FDVEYsR0FBdUJGLENBQTBCLENBQ3BELENBQ0EsTUFBWXhJLElBQU8sTUFDakJxRCxHQUFnQjJFLENBQU0sRUFLdkIsSUFBSWEsRUFDSFIsR0FDQUwsRUFBTyxPQUFTLE1BQ2hCQSxFQUFPLFFBQVUsTUFDakJBLEVBQU8sY0FBZ0IsTUFDdkJBLEVBQU8sV0FBYSxPQUNuQkEsRUFBTyxFQUFJM0csTUFBd0IsRUFFckMsR0FBSSxDQUFDd0gsR0FBUyxDQUFDTixHQUFXRCxJQUNyQkwsSUFBa0IsTUFDckJGLEdBQVlDLEVBQVFDLENBQWEsRUFJOUJ0RixJQUFvQixNQUFTQSxFQUFnQixFQUFJdkMsR0FBZ0IsQ0FDcEUsSUFBSXVHLEVBQWtDaEUsR0FDckNnRSxFQUFRLFdBQVJBLEVBQVEsU0FBYSxLQUFJLEtBQUtxQixDQUFNLENBQ3hDLENBR0MsT0FBT0EsQ0FDUixDQThCTyxTQUFTYyxHQUFZOUksRUFBSSxDQUMvQjBILEdBQXlCLEVBSXpCLElBQUlxQixFQUNIN0YsSUFBa0IsT0FDakJBLEVBQWMsRUFBSTFDLEtBQW1CLEdBQ3RDcUcsSUFBc0IsTUFDdEIsQ0FBQ0EsRUFBa0IsRUFRcEIsR0FBSWtDLEVBQU8sQ0FDVixJQUFJQyxFQUEyQ25DLEdBQzlDbUMsRUFBUSxJQUFSQSxFQUFRLEVBQU0sQ0FBRSxJQUFFLEtBQUssQ0FDdkIsR0FBQWhKLEVBQ0EsT0FBUWtELEVBQ1IsU0FBVVAsQ0FDYixDQUFHLENBQ0gsS0FBUSxDQUNOLElBQUlGLEVBQVN1RixHQUFPaEksQ0FBRSxFQUN0QixPQUFPeUMsQ0FDVCxDQUNBLENBT08sU0FBU3dHLEdBQWdCakosRUFBSSxDQUNuQyxPQUFBMEgsR0FBNkIsRUFNdEJ3QixHQUFjbEosQ0FBRSxDQUN4QixDQXlCTyxTQUFTbUosR0FBZW5KLEVBQUksQ0FDbEMsTUFBTWdJLEVBQVNHLEVBQWMxSCxHQUFhVCxFQUFJLEVBQUksRUFFbEQsTUFBTyxDQUFDb0osRUFBVSxLQUNWLElBQUksUUFBU0MsR0FBVyxDQUMxQkQsRUFBUSxNQUNYRSxHQUFhdEIsRUFBUSxJQUFNLENBQzFCZixFQUFlZSxDQUFNLEVBQ3JCcUIsRUFBTyxNQUFTLENBQ3JCLENBQUssR0FFRHBDLEVBQWVlLENBQU0sRUFDckJxQixFQUFPLE1BQVMsRUFFcEIsQ0FBRyxDQUVILENBTU8sU0FBU3JCLEdBQU9oSSxFQUFJLENBQzFCLE9BQU9tSSxFQUFjOUgsR0FBUUwsRUFBSSxFQUFLLENBQ3ZDLENBMERPLFNBQVNrSixHQUFjbEosRUFBSSxDQUNqQyxPQUFPbUksRUFBYzdILEdBQWVOLEVBQUksRUFBSSxDQUM3QyxDQU1PLFNBQVN1SixHQUFnQnZKLEVBQUksQ0FNbkMsT0FBT3dKLEdBQU14SixDQUFFLENBQ2hCLENBTU8sU0FBU3dKLEdBQU14SixFQUFJNkQsRUFBUSxFQUFHLENBQ3BDLE9BQU9zRSxFQUFjN0gsR0FBZ0JDLEdBQWVzRCxFQUFPN0QsRUFBSSxFQUFJLENBQ3BFLENBTU8sU0FBU3lKLEdBQU96SixFQUFJc0ksRUFBTyxHQUFNLENBQ3ZDLE9BQU9ILEVBQWM3SCxHQUFnQkUsRUFBZVIsRUFBSSxHQUFNc0ksQ0FBSSxDQUNuRSxDQUtPLFNBQVNvQixHQUF3QjFCLEVBQVEsQ0FDL0MsSUFBSTJCLEVBQVczQixFQUFPLFNBQ3RCLEdBQUkyQixJQUFhLEtBQU0sQ0FDdEIsTUFBTUMsRUFBK0IvQixHQUMvQmdDLEVBQW9CbEgsRUFDMUJtSCxHQUF5QixFQUFJLEVBQzdCQyxFQUFvQixJQUFJLEVBQ3hCLEdBQUksQ0FDSEosRUFBUyxLQUFLLElBQUksQ0FDckIsUUFBWSxDQUNURyxHQUF5QkYsQ0FBNEIsRUFDckRHLEVBQW9CRixDQUFpQixDQUN4QyxDQUNBLENBQ0EsQ0FNTyxTQUFTRyxHQUF3QnZILEVBQVEsQ0FDL0MsSUFBSXdILEVBQVd4SCxFQUFPLFNBRXRCLEdBQUl3SCxJQUFhLEtBQU0sQ0FDdEJ4SCxFQUFPLFNBQVcsS0FFbEIsUUFBU3RDLEVBQUksRUFBR0EsRUFBSThKLEVBQVMsT0FBUTlKLEdBQUssRUFDekM2RyxHQUFnQmlELEVBQVM5SixDQUFDLENBQUMsQ0FFOUIsQ0FDQSxDQU9PLFNBQVMrSixHQUF3QnpILEVBQVEwSCxFQUFhLEdBQU8sQ0FDbkUsSUFBSW5DLEVBQVN2RixFQUFPLE1BR3BCLElBRkFBLEVBQU8sTUFBUUEsRUFBTyxLQUFPLEtBRXRCdUYsSUFBVyxNQUFNLENBQ3ZCLElBQUlvQyxFQUFPcEMsRUFBTyxLQUNsQmYsRUFBZWUsRUFBUW1DLENBQVUsRUFDakNuQyxFQUFTb0MsQ0FDWCxDQUNBLENBTU8sU0FBU0MsR0FBOEI1SCxFQUFRLENBR3JELFFBRkl1RixFQUFTdkYsRUFBTyxNQUVidUYsSUFBVyxNQUFNLENBQ3ZCLElBQUlvQyxFQUFPcEMsRUFBTyxLQUNiQSxFQUFPLEVBQUl4SCxHQUNmeUcsRUFBZWUsQ0FBTSxFQUV0QkEsRUFBU29DLENBQ1gsQ0FDQSxDQU9PLFNBQVNuRCxFQUFlZSxFQUFRbUMsRUFBYSxHQUFNLENBQ3pELElBQUlHLEVBQVUsR0FFZCxJQUFLSCxHQUFlbkMsRUFBTyxFQUFJNUcsS0FBdUI0RyxFQUFPLGNBQWdCLEtBQU0sQ0FLbEYsUUFISS9CLEVBQU8rQixFQUFPLFlBQ2R1QyxFQUFNdkMsRUFBTyxVQUVWL0IsSUFBUyxNQUFNLENBRXJCLElBQUltRSxFQUFPbkUsSUFBU3NFLEVBQU0sS0FBb0NyRSxHQUFpQkQsQ0FBSSxFQUVuRkEsRUFBSyxPQUFRLEVBQ2JBLEVBQU9tRSxDQUNWLENBRUVFLEVBQVUsRUFDWixDQUVDSixHQUF3QmxDLEVBQVFtQyxHQUFjLENBQUNHLENBQU8sRUFDdEROLEdBQXdCaEMsQ0FBTSxFQUM5QlAsRUFBaUJPLEVBQVEsQ0FBQyxFQUMxQjVFLEVBQWtCNEUsRUFBUS9HLENBQVMsRUFFbkMsSUFBSXVKLEVBQWN4QyxFQUFPLFlBRXpCLEdBQUl3QyxJQUFnQixLQUNuQixVQUFXQyxLQUFjRCxFQUN4QkMsRUFBVyxLQUFNLEVBSW5CZixHQUF3QjFCLENBQU0sRUFFOUIsSUFBSWpFLEVBQVNpRSxFQUFPLE9BR2hCakUsSUFBVyxNQUFRQSxFQUFPLFFBQVUsTUFDdkMyRyxHQUFjMUMsQ0FBTSxFQVNyQkEsRUFBTyxLQUNOQSxFQUFPLEtBQ1BBLEVBQU8sU0FDUEEsRUFBTyxJQUNQQSxFQUFPLEtBQ1BBLEVBQU8sR0FDUEEsRUFBTyxZQUNQQSxFQUFPLFVBQ04sSUFDSCxDQU9PLFNBQVMwQyxHQUFjMUMsRUFBUSxDQUNyQyxJQUFJakUsRUFBU2lFLEVBQU8sT0FDaEJoRSxFQUFPZ0UsRUFBTyxLQUNkb0MsRUFBT3BDLEVBQU8sS0FFZGhFLElBQVMsT0FBTUEsRUFBSyxLQUFPb0csR0FDM0JBLElBQVMsT0FBTUEsRUFBSyxLQUFPcEcsR0FFM0JELElBQVcsT0FDVkEsRUFBTyxRQUFVaUUsSUFBUWpFLEVBQU8sTUFBUXFHLEdBQ3hDckcsRUFBTyxPQUFTaUUsSUFBUWpFLEVBQU8sS0FBT0MsR0FFNUMsQ0FXTyxTQUFTc0YsR0FBYXRCLEVBQVEyQyxFQUFVLENBRTlDLElBQUlILEVBQWMsQ0FBRSxFQUVwQkksR0FBZTVDLEVBQVF3QyxFQUFhLEVBQUksRUFFeENLLEdBQW9CTCxFQUFhLElBQU0sQ0FDdEN2RCxFQUFlZSxDQUFNLEVBQ1AyQyxFQUFVLENBQzFCLENBQUUsQ0FDRixDQU1PLFNBQVNFLEdBQW9CTCxFQUFheEssRUFBSSxDQUNwRCxJQUFJOEssRUFBWU4sRUFBWSxPQUM1QixHQUFJTSxFQUFZLEVBQUcsQ0FDbEIsSUFBSUMsRUFBUSxJQUFNLEVBQUVELEdBQWE5SyxFQUFJLEVBQ3JDLFFBQVN5SyxLQUFjRCxFQUN0QkMsRUFBVyxJQUFJTSxDQUFLLENBRXZCLE1BQ0UvSyxFQUFJLENBRU4sQ0FPTyxTQUFTNEssR0FBZTVDLEVBQVF3QyxFQUFhUSxFQUFPLENBQzFELEdBQUssRUFBQWhELEVBQU8sRUFBSWhILElBR2hCLElBRkFnSCxFQUFPLEdBQUtoSCxHQUVSZ0gsRUFBTyxjQUFnQixLQUMxQixVQUFXeUMsS0FBY3pDLEVBQU8sYUFDM0J5QyxFQUFXLFdBQWFPLElBQzNCUixFQUFZLEtBQUtDLENBQVUsRUFPOUIsUUFGSXRFLEVBQVE2QixFQUFPLE1BRVo3QixJQUFVLE1BQU0sQ0FDdEIsSUFBSUssRUFBVUwsRUFBTSxLQUNoQjhFLEdBQWU5RSxFQUFNLEVBQUloRixNQUF3QixJQUFNZ0YsRUFBTSxFQUFJM0YsS0FBbUIsRUFJeEZvSyxHQUFlekUsRUFBT3FFLEVBQWFTLEVBQWNELEVBQVEsRUFBSyxFQUM5RDdFLEVBQVFLLENBQ1YsRUFDQSxDQzloQk8sSUFBSTBFLEVBQW9CLEdBSzNCQyxHQUF1QixHQUd2QkMsR0FBd0IsS0FFakIzQyxFQUFxQixHQUNyQlosR0FBdUIsR0FHM0IsU0FBU2EsR0FBdUJsSCxFQUFPLENBQzdDaUgsRUFBcUJqSCxDQUN0QixDQUdPLFNBQVNzSSxHQUF5QnRJLEVBQU8sQ0FDL0NxRyxHQUF1QnJHLENBQ3hCLENBS0EsSUFBSTZKLEdBQXNCLENBQUUsRUFFeEJDLEVBQWMsRUFNWCxJQUFJM0ksRUFBa0IsS0FHdEIsU0FBU29ILEVBQW9CbkcsRUFBVSxDQUM3Q2pCLEVBQWtCaUIsQ0FDbkIsQ0FHTyxJQUFJVixFQUFnQixLQUdwQixTQUFTbUUsRUFBa0JXLEVBQVEsQ0FDekM5RSxFQUFnQjhFLENBQ2pCLENBT08sSUFBSW5GLEVBQWtCLEtBZWxCTSxFQUFXLEtBRWxCb0ksRUFBZSxFQU9SakksRUFBbUIsS0FHdkIsU0FBU0MsR0FBcUIvQixFQUFPLENBQzNDOEIsRUFBbUI5QixDQUNwQixDQUdBLElBQUlnSyxHQUFrQixFQUlYaEUsRUFBZ0IsR0FZaEJYLEVBQW9CLEtBd0J4QixTQUFTN0QsSUFBb0IsQ0FDbkMsTUFBTyxFQUFFd0ksRUFDVixDQUdPLFNBQVM1SSxJQUFXLENBQzFCLE1BQU8sQ0FBQ1YsSUFBcUIyRSxJQUFzQixNQUFRQSxFQUFrQixJQUFNLElBQ3BGLENBUU8sU0FBUzRFLEdBQWdCN0gsRUFBVSxDSnpMMUMsSUFBQW9CLEVBQUEwRyxFSTBMQyxJQUFJN0gsRUFBUUQsRUFBUyxFQUVyQixHQUFLQyxFQUFRL0MsRUFDWixNQUFPLEdBR1IsR0FBSytDLEVBQVE5QyxFQUFvQixDQUNoQyxJQUFJNEssRUFBZS9ILEVBQVMsS0FDeEJnSSxHQUFjL0gsRUFBUWxELEtBQWEsRUFFdkMsR0FBSWdMLElBQWlCLEtBQU0sQ0FDMUIsSUFBSXhMLEVBRUosR0FBSzBELEVBQVFqRCxHQUFxQixDQUNqQyxJQUFLVCxFQUFJLEVBQUdBLEVBQUl3TCxFQUFhLE9BQVF4TCxNQUNuQzZFLEVBQUEyRyxFQUFheEwsQ0FBQyxHQUFFLFlBQWhCNkUsRUFBZ0IsVUFBYyxDQUFFLElBQUUsS0FBS3BCLENBQVEsRUFHakRBLEVBQVMsR0FBS2hELEVBQ2xCLENBRUcsSUFBS1QsRUFBSSxFQUFHQSxFQUFJd0wsRUFBYSxPQUFReEwsSUFBSyxDQUN6QyxJQUFJMEwsRUFBYUYsRUFBYXhMLENBQUMsRUFrQi9CLEdBaEJJc0wsR0FBd0NJLElBQzNDdEUsR0FBdUNzRSxDQUFZLEVBT25ERCxHQUNBMUksSUFBa0IsTUFDbEIsQ0FBQ3NFLEdBQ0QsR0FBQ2tFLEVBQUFHLEdBQUEsWUFBQUEsRUFBWSxZQUFaLE1BQUFILEVBQXVCLFNBQVM5SCxNQUVoQ2lJLEVBQVcsWUFBWEEsRUFBVyxVQUFjLEtBQUksS0FBS2pJLENBQVEsRUFHeENpSSxFQUFXLFFBQVVqSSxFQUFTLFFBQ2pDLE1BQU8sRUFFWixDQUNBLEVBSU0sQ0FBQ2dJLEdBQWUxSSxJQUFrQixNQUFRLENBQUNzRSxJQUM5Q3BFLEVBQWtCUSxFQUFVL0MsQ0FBSyxDQUVwQyxDQUVDLE1BQU8sRUFDUixDQU1BLFNBQVNpTCxHQUFnQkMsRUFBTy9ELEVBQVEsQ0FJdkMsUUFGSWdFLEVBQVVoRSxFQUVQZ0UsSUFBWSxNQUFNLENBQ3hCLEdBQUtBLEVBQVEsRUFBSXRMLEdBQ2hCLEdBQUksQ0FFSHNMLEVBQVEsR0FBR0QsQ0FBSyxFQUNoQixNQUNKLE1BQVcsQ0FFUEMsRUFBUSxHQUFLdEwsRUFDakIsQ0FHRXNMLEVBQVVBLEVBQVEsTUFDcEIsQ0FFQyxNQUFBZCxFQUFvQixHQUNkYSxDQUNQLENBS0EsU0FBU0UsR0FBcUJqRSxFQUFRLENBQ3JDLE9BQ0VBLEVBQU8sRUFBSS9HLEtBQWUsSUFDMUIrRyxFQUFPLFNBQVcsT0FBU0EsRUFBTyxPQUFPLEVBQUl0SCxNQUFxQixFQUVyRSxDQVlPLFNBQVN3TCxHQUFhSCxFQUFPL0QsRUFBUW1FLEVBQWlCdEYsRUFBbUIsQ0FDL0UsR0FBSXFFLEVBQW1CLENBS3RCLEdBSklpQixJQUFvQixPQUN2QmpCLEVBQW9CLElBR2pCZSxHQUFxQmpFLENBQU0sRUFDOUIsTUFBTStELEVBR1AsTUFDRixDQUVLSSxJQUFvQixPQUN2QmpCLEVBQW9CLElBUW5CLENBQ0RZLEdBQWdCQyxFQUFPL0QsQ0FBTSxFQUM3QixNQUNGLENBNERBLENBT08sU0FBU1YsR0FBZ0IxRCxFQUFVLENKN1gxQyxJQUFBb0IsRUk4WEMsSUFBSW9ILEVBQWdCakosRUFDaEJrSixFQUF3QmQsRUFDeEJlLEVBQTRCaEosRUFDNUJ1RyxFQUFvQmxILEVBQ3BCNEosRUFBeUIvRSxFQUN6QmdGLEVBQXVCM0osRUFDdkI0SixFQUE2QjVGLEVBQzdCaEQsRUFBUUQsRUFBUyxFQUVyQlQsRUFBMEMsS0FDMUNvSSxFQUFlLEVBQ2ZqSSxFQUFtQixLQUNuQlgsRUFBbUJrQixHQUFTckQsRUFBZ0JDLElBQWlDLEtBQVhtRCxFQUNsRTRELEVBQWdCLENBQUNpQixJQUF1QjVFLEVBQVFsRCxLQUFhLEVBQzdEa0MsRUFBa0IsS0FDbEJnRSxFQUFvQmpELEVBQVMsSUFFN0IsR0FBSSxDQUNILElBQUk4SSxLQUFxQzlJLEVBQVMsSUFBSyxFQUNuRCtJLEVBQU8vSSxFQUFTLEtBRXBCLEdBQUlULElBQWEsS0FBTSxDQUN0QixJQUFJaEQsRUFJSixHQUZBc0gsRUFBaUI3RCxFQUFVMkgsQ0FBWSxFQUVuQ29CLElBQVMsTUFBUXBCLEVBQWUsRUFFbkMsSUFEQW9CLEVBQUssT0FBU3BCLEVBQWVwSSxFQUFTLE9BQ2pDaEQsRUFBSSxFQUFHQSxFQUFJZ0QsRUFBUyxPQUFRaEQsSUFDaEN3TSxFQUFLcEIsRUFBZXBMLENBQUMsRUFBSWdELEVBQVNoRCxDQUFDLE9BR3BDeUQsRUFBUyxLQUFPK0ksRUFBT3hKLEVBR3hCLEdBQUksQ0FBQ3FFLEVBQ0osSUFBS3JILEVBQUlvTCxFQUFjcEwsRUFBSXdNLEVBQUssT0FBUXhNLE1BQ3RDNkUsRUFBQTJILEVBQUt4TSxDQUFDLEdBQUUsWUFBUjZFLEVBQVEsVUFBYyxDQUFFLElBQUUsS0FBS3BCLENBQVEsQ0FHMUMsTUFBVStJLElBQVMsTUFBUXBCLEVBQWVvQixFQUFLLFNBQy9DbEYsRUFBaUI3RCxFQUFVMkgsQ0FBWSxFQUN2Q29CLEVBQUssT0FBU3BCLEdBR2YsT0FBT21CLENBQ1QsUUFBVyxDQUNUdkosRUFBV2lKLEVBQ1hiLEVBQWVjLEVBQ2YvSSxFQUFtQmdKLEVBQ25CM0osRUFBa0JrSCxFQUNsQnJDLEVBQWdCK0UsRUFDaEIxSixFQUFrQjJKLEVBQ2xCM0YsRUFBb0I0RixDQUN0QixDQUNBLENBUUEsU0FBU0csR0FBZ0JuSyxFQUFRb0osRUFBWSxDQUM1QyxJQUFJcEksRUFBWW9JLEVBQVcsVUFDM0IsR0FBSXBJLElBQWMsS0FBTSxDQUN2QixJQUFJb0osRUFBUXBKLEVBQVUsUUFBUWhCLENBQU0sRUFDcEMsR0FBSW9LLElBQVUsR0FBSSxDQUNqQixJQUFJQyxFQUFhckosRUFBVSxPQUFTLEVBQ2hDcUosSUFBZSxFQUNsQnJKLEVBQVlvSSxFQUFXLFVBQVksTUFHbkNwSSxFQUFVb0osQ0FBSyxFQUFJcEosRUFBVXFKLENBQVUsRUFDdkNySixFQUFVLElBQUssRUFFbkIsQ0FDQSxDQUlFQSxJQUFjLE1BQ2JvSSxFQUFXLEVBQUl6TCxJQUlmK0MsSUFBYSxNQUFRLENBQUNBLEVBQVMsU0FBUzBJLENBQVUsS0FFbkR6SSxFQUFrQnlJLEVBQVk5SyxDQUFXLEVBR3BDOEssRUFBVyxHQUFLbEwsRUFBVUMsTUFDOUJpTCxFQUFXLEdBQUtqTCxJQUVqQjZHLEVBQTBDb0UsRUFBYSxDQUFDLEVBRTFELENBT08sU0FBU3BFLEVBQWlCaEYsRUFBUXNLLEVBQWEsQ0FDckQsSUFBSXBCLEVBQWVsSixFQUFPLEtBQzFCLEdBQUlrSixJQUFpQixLQUVyQixRQUFTeEwsRUFBSTRNLEVBQWE1TSxFQUFJd0wsRUFBYSxPQUFReEwsSUFDbER5TSxHQUFnQm5LLEVBQVFrSixFQUFheEwsQ0FBQyxDQUFDLENBRXpDLENBTU8sU0FBU3dJLEdBQWNYLEVBQVEsQ0FDckMsSUFBSW5FLEVBQVFtRSxFQUFPLEVBRW5CLEdBQUssRUFBQW5FLEVBQVE1QyxHQUliLENBQUFtQyxFQUFrQjRFLEVBQVFuSCxDQUFLLEVBRS9CLElBQUlzTCxFQUFrQmpKLEVBQ2xCdUosRUFBNkI1RixFQUVqQzNELEVBQWdCOEUsRUFPaEIsR0FBSSxDQUNFbkUsRUFBUXRELEdBQ1o4SixHQUE4QnJDLENBQU0sRUFFcENrQyxHQUF3QmxDLENBQU0sRUFFL0JnQyxHQUF3QmhDLENBQU0sRUFFOUIwQixHQUF3QjFCLENBQU0sRUFDOUIsSUFBSTJCLEVBQVdyQyxHQUFnQlUsQ0FBTSxFQUNyQ0EsRUFBTyxTQUFXLE9BQU8yQixHQUFhLFdBQWFBLEVBQVcsS0FDOUQzQixFQUFPLFFBQVV3RCxFQUtqQixPQUFRTyxFQUFPLENBQ2ZHLEdBQWFILEVBQU8vRCxFQUFRbUUsRUFBaUJNLEdBQThCekUsRUFBTyxHQUFHLENBQ3ZGLFFBQVcsQ0FDVDlFLEVBQWdCaUosQ0FLbEIsRUFDQSxDQVdBLFNBQVNhLElBQXNCLENBQzlCLEdBQUkxQixFQUFjLElBQU0sQ0FDdkJBLEVBQWMsRUFDZCxHQUFJLENBQ0gyQixHQUFnQyxDQUNoQyxPQUFRbEIsRUFBTyxDQVNmLEdBQUlYLEtBQTBCLEtBVTVCYyxHQUFhSCxFQUFPWCxHQUF1QixJQUFVLE1BTXRELE9BQU1XLENBRVYsQ0FDQSxDQUNDVCxHQUNELENBTUEsU0FBUzRCLEdBQTBCQyxFQUFjLENBQ2hELElBQUl4SixFQUFTd0osRUFBYSxPQUMxQixHQUFJeEosSUFBVyxFQUdmLENBQUFxSixHQUFxQixFQUVyQixJQUFJeEUsRUFBNkJDLEVBQ2pDQSxFQUFxQixHQUVyQixHQUFJLENBQ0gsUUFBU3RJLEVBQUksRUFBR0EsRUFBSXdELEVBQVF4RCxJQUFLLENBQ2hDLElBQUk2SCxFQUFTbUYsRUFBYWhOLENBQUMsRUFFdEI2SCxFQUFPLEVBQUluSCxJQUNmbUgsRUFBTyxHQUFLbkgsR0FJYixJQUFJdU0sRUFBb0IsQ0FBRSxFQUUxQkMsR0FBZ0JyRixFQUFRb0YsQ0FBaUIsRUFDekNFLEdBQXFCRixDQUFpQixDQUN6QyxDQUNBLFFBQVcsQ0FDVDNFLEVBQXFCRCxDQUN2QixFQUNBLENBTUEsU0FBUzhFLEdBQXFCQyxFQUFTLENBQ3RDLElBQUk1SixFQUFTNEosRUFBUSxPQUNyQixHQUFJNUosSUFBVyxFQUVmLFFBQVN4RCxFQUFJLEVBQUdBLEVBQUl3RCxFQUFReEQsSUFBSyxDQUNoQyxJQUFJNkgsRUFBU3VGLEVBQVFwTixDQUFDLEVBRXRCLEdBQUssRUFBQTZILEVBQU8sR0FBSy9HLEVBQVlELEtBQzVCLEdBQUksQ0FDQ3lLLEdBQWdCekQsQ0FBTSxJQUN6QlcsR0FBY1gsQ0FBTSxFQU9oQkEsRUFBTyxPQUFTLE1BQVFBLEVBQU8sUUFBVSxNQUFRQSxFQUFPLGNBQWdCLE9BQ3ZFQSxFQUFPLFdBQWEsS0FFdkIwQyxHQUFjMUMsQ0FBTSxFQUdwQkEsRUFBTyxHQUFLLE1BSWYsT0FBUStELEVBQU8sQ0FDZkcsR0FBYUgsRUFBTy9ELEVBQVEsS0FBTUEsRUFBTyxHQUFHLENBQ2hELENBRUEsQ0FDQSxDQUVBLFNBQVN3RixJQUFtQixDQUUzQixHQURBckMsR0FBdUIsR0FDbkJHLEVBQWMsS0FDakIsT0FFRCxNQUFNbUMsRUFBK0JwQyxHQUNyQ0EsR0FBc0IsQ0FBRSxFQUN4QjZCLEdBQTBCTyxDQUE0QixFQUVqRHRDLEtBQ0pHLEVBQWMsRUFDZEYsR0FBd0IsS0FLMUIsQ0FNTyxTQUFTL0gsR0FBZ0JaLEVBQVEsQ0FFakMwSSxLQUNKQSxHQUF1QixHQUN2QixlQUFlcUMsRUFBZ0IsR0FJakNwQyxHQUF3QjNJLEVBSXhCLFFBRkl1RixFQUFTdkYsRUFFTnVGLEVBQU8sU0FBVyxNQUFNLENBQzlCQSxFQUFTQSxFQUFPLE9BQ2hCLElBQUluRSxFQUFRbUUsRUFBTyxFQUVuQixHQUFLbkUsR0FBU3BELEdBQWNELEdBQXVCLENBQ2xELEdBQUssRUFBQXFELEVBQVFoRCxHQUFjLE9BQzNCbUgsRUFBTyxHQUFLbkgsQ0FDZixDQUNBLENBRUN3SyxHQUFvQixLQUFLckQsQ0FBTSxDQUNoQyxDQWFBLFNBQVNxRixHQUFnQnJGLEVBQVFvRixFQUFtQixDQUNuRCxJQUFJTSxFQUFpQjFGLEVBQU8sTUFDeEJ1RixFQUFVLENBQUUsRUFFaEJJLEVBQVcsS0FBT0QsSUFBbUIsTUFBTSxDQUMxQyxJQUFJN0osRUFBUTZKLEVBQWUsRUFDdkJFLEdBQWEvSixFQUFRckQsS0FBbUIsRUFDeENxTixFQUFzQkQsSUFBYy9KLEVBQVFoRCxLQUFXLEVBQ3ZEMkYsRUFBVWtILEVBQWUsS0FFN0IsR0FBSSxDQUFDRyxHQUF3QixFQUFBaEssRUFBUTdDLElBQ3BDLEdBQUs2QyxFQUFRdkQsR0FBc0IsQ0FDbEMsR0FBSXNOLEVBQ0hGLEVBQWUsR0FBSzdNLE1BRXBCLElBQUksQ0FDQzRLLEdBQWdCaUMsQ0FBYyxHQUNqQy9FLEdBQWMrRSxDQUFjLENBRTdCLE9BQVEzQixFQUFPLENBQ2ZHLEdBQWFILEVBQU8yQixFQUFnQixLQUFNQSxFQUFlLEdBQUcsQ0FDbEUsQ0FHSSxJQUFJdkgsRUFBUXVILEVBQWUsTUFFM0IsR0FBSXZILElBQVUsS0FBTSxDQUNuQnVILEVBQWlCdkgsRUFDakIsUUFDTCxDQUNJLE1BQVd0QyxFQUFReEQsSUFDbkJrTixFQUFRLEtBQUtHLENBQWMsRUFJN0IsR0FBSWxILElBQVksS0FBTSxDQUNyQixJQUFJekMsRUFBUzJKLEVBQWUsT0FFNUIsS0FBTzNKLElBQVcsTUFBTSxDQUN2QixHQUFJaUUsSUFBV2pFLEVBQ2QsTUFBTTRKLEVBRVAsSUFBSUcsRUFBaUIvSixFQUFPLEtBQzVCLEdBQUkrSixJQUFtQixLQUFNLENBQzVCSixFQUFpQkksRUFDakIsU0FBU0gsQ0FDZCxDQUNJNUosRUFBU0EsRUFBTyxNQUNwQixDQUNBLENBRUUySixFQUFpQmxILENBQ25CLENBSUMsUUFBU3JHLEVBQUksRUFBR0EsRUFBSW9OLEVBQVEsT0FBUXBOLElBQ25DZ0csRUFBUW9ILEVBQVFwTixDQUFDLEVBQ2pCaU4sRUFBa0IsS0FBS2pILENBQUssRUFDNUJrSCxHQUFnQmxILEVBQU9pSCxDQUFpQixDQUUxQyxDQTRETyxTQUFTbEksRUFBSXpDLEVBQVEsQ0p4MEI1QixJQUFBdUMsRUl5MEJDLElBQUluQixFQUFRcEIsRUFBTyxFQUNmc0wsR0FBY2xLLEVBQVF6RCxLQUFhLEVBSXZDLEdBQUkyTixHQUFlbEssRUFBUTVDLEVBQWtCLENBQzVDLElBQUlPLEVBQVEyRixHQUF3QzFFLENBQVEsRUFFNUQsT0FBQXVFLEdBQXdDdkUsQ0FBUSxFQUN6Q2pCLENBQ1QsQ0FPQyxHQUFJbUIsSUFBb0IsS0FBTSxDQUN6QkUsSUFBb0IsTUFBUUEsRUFBZ0IsU0FBU0osQ0FBTSxHQUM5RHVMLEdBQTJCLEVBRTVCLElBQUlyQixFQUFPaEssRUFBZ0IsS0FLdkJRLElBQWEsTUFBUXdKLElBQVMsTUFBUUEsRUFBS3BCLENBQVksSUFBTTlJLEVBQ2hFOEksSUFDVXBJLElBQWEsS0FDdkJBLEVBQVcsQ0FBQ1YsQ0FBTSxFQUVsQlUsRUFBUyxLQUFLVixDQUFNLEVBSXBCYSxJQUFxQixNQUNyQkosSUFBa0IsTUFDakJBLEVBQWMsRUFBSXJDLEdBQ2xCLEVBQUFxQyxFQUFjLEVBQUkxQyxJQUNuQjhDLEVBQWlCLFNBQVNiLENBQU0sSUFFaENXLEVBQWtCRixFQUFlcEMsQ0FBSyxFQUN0Q3VDLEdBQWdCSCxDQUFhLEVBRTlCLFNBQVU2SyxHQUFzQ3RMLEVBQVEsT0FBUyxLQUtqRSxRQUpJa0UsRUFBa0NsRSxFQUNsQ3NCLEVBQVM0QyxFQUFRLE9BQ2pCakMsRUFBU2lDLEVBRU41QyxJQUFXLE1BR2pCLEdBQUtBLEVBQU8sRUFBSTNELEVBQWdCLENBQy9CLElBQUl3RyxFQUF5QzdDLEVBRTdDVyxFQUFTa0MsRUFDVDdDLEVBQVM2QyxFQUFlLE1BQzVCLEtBQVUsQ0FDTixJQUFJcUIsRUFBdUNsRSxHQUV0Q2lCLEVBQUFpRCxFQUFjLFdBQWQsTUFBQWpELEVBQXdCLFNBQVNOLEtBQ3BDdUQsRUFBYyxXQUFkQSxFQUFjLFNBQWEsS0FBSSxLQUFLdkQsQ0FBTSxFQUU1QyxLQUNKLENBSUMsT0FBSXFKLElBQ0hwSCxFQUFrQ2xFLEVBRTlCZ0osR0FBZ0I5RSxDQUFPLEdBQzFCWSxHQUFlWixDQUFPLEdBMEJqQmxFLEVBQU8sQ0FDZixDQTZFTyxTQUFTd0wsR0FBUWpPLEVBQUksQ0FDM0IsTUFBTTZKLEVBQW9CbEgsRUFDMUIsR0FBSSxDQUNILE9BQUFBLEVBQWtCLEtBQ1gzQyxFQUFJLENBQ2IsUUFBVyxDQUNUMkMsRUFBa0JrSCxDQUNwQixDQUNBLENBRUEsTUFBTXFFLEdBQWMsRUFBRXBOLEVBQVFDLEVBQWNGLEdBT3JDLFNBQVN1QyxFQUFrQlgsRUFBUWUsRUFBUSxDQUNqRGYsRUFBTyxFQUFLQSxFQUFPLEVBQUl5TCxHQUFlMUssQ0FDdkMsQ0E4Sk8sU0FBUzhFLEdBQUs2RixFQUFPekssRUFBUSxHQUFPMUQsRUFBSSxDQUM5QzZHLEVBQW9CLENBQ25CLEVBQUdBLEVBQ0gsRUFBRyxLQUNILEVBQUcsS0FDSCxFQUFHLEdBQ0gsRUFBR3NILEVBQ0gsRUFBRyxLQUNILEVBQUcsSUFDSCxFQUVHak0sSUFBb0IsQ0FBQ3dCLElBQ3hCbUQsRUFBa0IsRUFBSSxDQUNyQixFQUFHLEtBQ0gsRUFBRyxLQUNILEdBQUksQ0FBRSxFQUNOLEdBQUl2RSxFQUFPLEVBQUssQ0FDaEIsRUFRSCxDQU9PLFNBQVM4TCxHQUFJQyxFQUFXLENBQzlCLE1BQU1DLEVBQXFCekgsRUFDM0IsR0FBSXlILElBQXVCLEtBQU0sQ0FJaEMsTUFBTUMsRUFBb0JELEVBQW1CLEVBQzdDLEdBQUlDLElBQXNCLEtBQU0sQ0FDL0IsSUFBSXBDLEVBQWtCakosRUFDbEIyRyxFQUFvQmxILEVBQ3hCMkwsRUFBbUIsRUFBSSxLQUN2QixHQUFJLENBQ0gsUUFBU25PLEVBQUksRUFBR0EsRUFBSW9PLEVBQWtCLE9BQVFwTyxJQUFLLENBQ2xELElBQUlxTyxFQUFtQkQsRUFBa0JwTyxDQUFDLEVBQzFDa0gsRUFBa0JtSCxFQUFpQixNQUFNLEVBQ3pDekUsRUFBb0J5RSxFQUFpQixRQUFRLEVBQzdDeEcsR0FBT3dHLEVBQWlCLEVBQUUsQ0FDL0IsQ0FDQSxRQUFhLENBQ1RuSCxFQUFrQjhFLENBQWUsRUFDakNwQyxFQUFvQkYsQ0FBaUIsQ0FDekMsQ0FDQSxDQUNFaEQsRUFBb0J5SCxFQUFtQixFQUl2Q0EsRUFBbUIsRUFBSSxFQUN6QixDQUdDLE1BQXNDLENBQUEsQ0FDdkMsQ0FRTyxTQUFTRyxHQUFnQmpOLEVBQU8sQ0FDdEMsR0FBSSxTQUFPQSxHQUFVLFVBQVksQ0FBQ0EsR0FBU0EsYUFBaUIsY0FJNUQsR0FBSUYsS0FBZ0JFLEVBQ25Ca04sR0FBVWxOLENBQUssVUFDTCxDQUFDLE1BQU0sUUFBUUEsQ0FBSyxFQUM5QixRQUFTOEQsS0FBTzlELEVBQU8sQ0FDdEIsTUFBTStDLEVBQU8vQyxFQUFNOEQsQ0FBRyxFQUNsQixPQUFPZixHQUFTLFVBQVlBLEdBQVFqRCxLQUFnQmlELEdBQ3ZEbUssR0FBVW5LLENBQUksQ0FFbEIsRUFFQSxDQVNPLFNBQVNtSyxHQUFVbE4sRUFBT21OLEVBQVUsSUFBSSxJQUFPLENBQ3JELEdBQ0MsT0FBT25OLEdBQVUsVUFDakJBLElBQVUsTUFFVixFQUFFQSxhQUFpQixjQUNuQixDQUFDbU4sRUFBUSxJQUFJbk4sQ0FBSyxFQUNqQixDQUNEbU4sRUFBUSxJQUFJbk4sQ0FBSyxFQUdiQSxhQUFpQixNQUNwQkEsRUFBTSxRQUFTLEVBRWhCLFFBQVM4RCxLQUFPOUQsRUFDZixHQUFJLENBQ0hrTixHQUFVbE4sRUFBTThELENBQUcsRUFBR3FKLENBQU8sQ0FDN0IsTUFBVyxDQUVmLENBRUUsTUFBTUMsRUFBUTlPLEdBQWlCMEIsQ0FBSyxFQUNwQyxHQUNDb04sSUFBVSxPQUFPLFdBQ2pCQSxJQUFVLE1BQU0sV0FDaEJBLElBQVUsSUFBSSxXQUNkQSxJQUFVLElBQUksV0FDZEEsSUFBVSxLQUFLLFVBQ2QsQ0FDRCxNQUFNQyxFQUFjbFAsR0FBZ0JpUCxDQUFLLEVBQ3pDLFFBQVN0SixLQUFPdUosRUFBYSxDQUM1QixNQUFNM0osRUFBTTJKLEVBQVl2SixDQUFHLEVBQUUsSUFDN0IsR0FBSUosRUFDSCxHQUFJLENBQ0hBLEVBQUksS0FBSzFELENBQUssQ0FDZCxNQUFXLENBRWpCLENBRUEsQ0FDQSxDQUNBLENBQ0EsQ0MxakNBLE1BQU1zTixHQUFpQixDQUFDLGFBQWMsV0FBVyxFQU0xQyxTQUFTQyxHQUFpQkMsRUFBTSxDQUN0QyxPQUFPRixHQUFlLFNBQVNFLENBQUksQ0FDcEMsQ0NsUE8sTUFBTUMsR0FBd0IsSUFBSSxJQUc1QkMsR0FBcUIsSUFBSSxJQWdIL0IsU0FBU0MsR0FBU0MsRUFBUSxDQUNoQyxRQUFTalAsRUFBSSxFQUFHQSxFQUFJaVAsRUFBTyxPQUFRalAsSUFDbEM4TyxHQUFzQixJQUFJRyxFQUFPalAsQ0FBQyxDQUFDLEVBR3BDLFFBQVNILEtBQU1rUCxHQUNkbFAsRUFBR29QLENBQU0sQ0FFWCxDQU9PLFNBQVNDLEVBQXlCQyxFQUFPLENObEpoRCxJQUFBdEssRU1tSkMsSUFBSXVLLEVBQWtCLEtBQ2xCQyxFQUFzQ0QsRUFBaUIsY0FDdkRFLEVBQWFILEVBQU0sS0FDbkJJLElBQU8xSyxFQUFBc0ssRUFBTSxlQUFOLFlBQUF0SyxFQUFBLEtBQUFzSyxLQUEwQixDQUFFLEVBQ25DSyxFQUFnREQsRUFBSyxDQUFDLEdBQUtKLEVBQU0sT0FNakVNLEVBQVcsRUFHWEMsRUFBYVAsRUFBTSxPQUV2QixHQUFJTyxFQUFZLENBQ2YsSUFBSUMsRUFBU0osRUFBSyxRQUFRRyxDQUFVLEVBQ3BDLEdBQ0NDLElBQVcsS0FDVlAsSUFBb0IsVUFBWUEsSUFBd0MsUUFDeEUsQ0FLREQsRUFBTSxPQUFTQyxFQUNmLE1BQ0gsQ0FPRSxJQUFJUSxFQUFjTCxFQUFLLFFBQVFILENBQWUsRUFDOUMsR0FBSVEsSUFBZ0IsR0FHbkIsT0FHR0QsR0FBVUMsSUFDYkgsRUFBV0UsRUFFZCxDQU1DLEdBSkFILEVBQXlDRCxFQUFLRSxDQUFRLEdBQUtOLEVBQU0sT0FJN0RLLElBQW1CSixFQUd2QixDQUFBOVAsR0FBZ0I2UCxFQUFPLGdCQUFpQixDQUN2QyxhQUFjLEdBQ2QsS0FBTSxDQUNMLE9BQU9LLEdBQWtCSCxDQUM1QixDQUNBLENBQUUsRUFPRCxJQUFJM0YsRUFBb0JsSCxFQUNwQndKLEVBQWtCakosRUFDdEI2RyxFQUFvQixJQUFJLEVBQ3hCMUMsRUFBa0IsSUFBSSxFQUV0QixHQUFJLENBVUgsUUFOSTJJLEVBSUFDLEVBQWUsQ0FBRSxFQUVkTixJQUFtQixNQUFNLENBRS9CLElBQUlPLEVBQ0hQLEVBQWUsY0FDZkEsRUFBZSxZQUNLQSxFQUFnQixNQUNwQyxLQUVELEdBQUksQ0FFSCxJQUFJUSxFQUFZUixFQUFlLEtBQU9GLENBQVUsRUFFaEQsR0FBSVUsSUFBYyxRQUFhLENBQXNCUixFQUFnQixTQUNwRSxHQUFJcFEsR0FBUzRRLENBQVMsRUFBRyxDQUN4QixHQUFJLENBQUNuUSxFQUFJLEdBQUdvUSxDQUFJLEVBQUlELEVBQ3BCblEsRUFBRyxNQUFNMlAsRUFBZ0IsQ0FBQ0wsRUFBTyxHQUFHYyxDQUFJLENBQUMsQ0FDL0MsTUFDTUQsRUFBVSxLQUFLUixFQUFnQkwsQ0FBSyxDQUd0QyxPQUFRdkQsRUFBTyxDQUNYaUUsRUFDSEMsRUFBYSxLQUFLbEUsQ0FBSyxFQUV2QmlFLEVBQWNqRSxDQUVuQixDQUNHLEdBQUl1RCxFQUFNLGNBQWdCWSxJQUFtQlgsR0FBbUJXLElBQW1CLEtBQ2xGLE1BRURQLEVBQWlCTyxDQUNwQixDQUVFLEdBQUlGLEVBQWEsQ0FDaEIsUUFBU2pFLEtBQVNrRSxFQUVqQixlQUFlLElBQU0sQ0FDcEIsTUFBTWxFLENBQ1gsQ0FBSyxFQUVGLE1BQU1pRSxDQUNULENBQ0EsUUFBVyxDQUVUVixFQUFNLE9BQVNDLEVBRWYsT0FBT0QsRUFBTSxjQUNidkYsRUFBb0JGLENBQWlCLEVBQ3JDeEMsRUFBa0I4RSxDQUFlLENBQ25DLEVBQ0EsQ0NwUk8sU0FBU2tFLEdBQTBCQyxFQUFNLENBQy9DLElBQUlDLEVBQU8sU0FBUyxjQUFjLFVBQVUsRUFDNUMsT0FBQUEsRUFBSyxVQUFZRCxFQUNWQyxFQUFLLE9BQ2IsQ0NNTyxTQUFTQyxHQUFhQyxFQUFPbEcsRUFBSyxDQUN4QyxJQUFJdkMsRUFBZ0M5RSxFQUNoQzhFLEVBQU8sY0FBZ0IsT0FDMUJBLEVBQU8sWUFBY3lJLEVBQ3JCekksRUFBTyxVQUFZdUMsRUFFckIsQ0FRTyxTQUFTbUcsR0FBU0MsRUFBUzlNLEVBQU8sQ0FFeEMsSUFBSStNLEdBQW1CL00sRUFBUXpCLE1BQThCLEVBR3pENkQsRUFNQTRLLEVBQVksQ0FBQ0YsRUFBUSxXQUFXLEtBQUssRUFFekMsTUFBTyxJQUFNLENBTVIxSyxJQUFTLFNBQ1pBLEVBQU9vSyxHQUEwQlEsRUFBWUYsRUFBVSxNQUFRQSxDQUFPLEdBSXZFLElBQUlHLEVBQ0hGLEVBQWtCLFNBQVMsV0FBVzNLLEVBQU0sRUFBSSxFQUFJQSxFQUFLLFVBQVUsRUFBSSxFQUd2RCxDQUNoQixJQUFJd0ssRUFBcUN6SyxHQUFnQjhLLENBQUssRUFDMUR2RyxFQUFtQ3VHLEVBQU0sVUFFN0NOLEdBQWFDLEVBQU9sRyxDQUFHLENBQzFCLENBSUUsT0FBT3VHLENBQ1AsQ0FDRixDQTZLTyxTQUFTQyxHQUFPQyxFQUFRQyxFQUFLLENBTy9CRCxJQUFXLE1BS2ZBLEVBQU8sT0FBNEJDLENBQUssQ0FDekMsQ0N6TU8sU0FBU0MsR0FBU0MsRUFBTTNQLEVBQU8sQ0FFckMsSUFBSTRQLEVBQU01UCxHQUFTLEtBQU8sR0FBSyxPQUFPQSxHQUFVLFNBQVdBLEVBQVEsR0FBS0EsRUFFcEU0UCxLQUFTRCxFQUFLLE1BQUxBLEVBQUssSUFBUUEsRUFBSyxjQUU5QkEsRUFBSyxJQUFNQyxFQUNYRCxFQUFLLFVBQVlDLEdBQU8sS0FBTyxHQUFLQSxFQUFNLEdBRTVDLENBWU8sU0FBU0MsR0FBTWhELEVBQVdqRixFQUFTLENBQ3pDLE9BQU9rSSxHQUFPakQsRUFBV2pGLENBQU8sQ0FDakMsQ0FzRkEsTUFBTW1JLEVBQXFCLElBQUksSUFRL0IsU0FBU0QsR0FBT0UsRUFBVyxDQUFFLE9BQUE5TSxFQUFRLE9BQUFzTSxFQUFRLE1BQUE3QyxFQUFRLENBQUUsRUFBRSxPQUFBaUIsRUFBUSxRQUFBcEcsRUFBUyxNQUFBeUksRUFBUSxFQUFJLEVBQUksQ0FDekY3TCxHQUFpQixFQUVqQixJQUFJOEwsRUFBb0IsSUFBSSxJQUd4QkMsRUFBZ0J2QyxHQUFXLENBQzlCLFFBQVNqUCxFQUFJLEVBQUdBLEVBQUlpUCxFQUFPLE9BQVFqUCxJQUFLLENBQ3ZDLElBQUlzUCxFQUFhTCxFQUFPalAsQ0FBQyxFQUV6QixHQUFJLENBQUF1UixFQUFrQixJQUFJakMsQ0FBVSxFQUNwQyxDQUFBaUMsRUFBa0IsSUFBSWpDLENBQVUsRUFFaEMsSUFBSW1DLEVBQVU3QyxHQUFpQlUsQ0FBVSxFQUt6Qy9LLEVBQU8saUJBQWlCK0ssRUFBWUosRUFBMEIsQ0FBRSxRQUFBdUMsQ0FBTyxDQUFFLEVBRXpFLElBQUkvTSxFQUFJME0sRUFBbUIsSUFBSTlCLENBQVUsRUFFckM1SyxJQUFNLFFBR1QsU0FBUyxpQkFBaUI0SyxFQUFZSixFQUEwQixDQUFFLFFBQUF1QyxDQUFPLENBQUUsRUFDM0VMLEVBQW1CLElBQUk5QixFQUFZLENBQUMsR0FFcEM4QixFQUFtQixJQUFJOUIsRUFBWTVLLEVBQUksQ0FBQyxFQUU1QyxDQUNFLEVBRUQ4TSxFQUFhblMsR0FBV3lQLEVBQXFCLENBQUMsRUFDOUNDLEdBQW1CLElBQUl5QyxDQUFZLEVBSW5DLElBQUl0RCxFQUFZLE9BRVp3RCxFQUFVMUksR0FBZSxJQUFNLENBQ2xDLElBQUkySSxFQUFjZCxHQUFVdE0sRUFBTyxZQUFZcUIsR0FBVyxDQUFFLEVBRTVELE9BQUEwRCxHQUFPLElBQU0sQ0FDWixHQUFJVCxFQUFTLENBQ1pWLEdBQUssQ0FBQSxDQUFFLEVBQ1AsSUFBSXlKLEVBQXVDbEwsRUFDM0NrTCxFQUFJLEVBQUkvSSxDQUNaLENBRU9vRyxJQUVpQmpCLEVBQU8sU0FBV2lCLEdBU3ZDZixFQUFZbUQsRUFBVU0sRUFBYTNELENBQUssR0FBSyxDQUFFLEVBTzNDbkYsR0FDSG9GLEdBQUssQ0FFVCxDQUFHLEVBRU0sSUFBTSxDVC9PZixJQUFBcEosRVNnUEcsUUFBU3lLLEtBQWNpQyxFQUFtQixDQUN6Q2hOLEVBQU8sb0JBQW9CK0ssRUFBWUosQ0FBd0IsRUFFL0QsSUFBSXhLLEVBQTJCME0sRUFBbUIsSUFBSTlCLENBQVUsRUFFNUQsRUFBRTVLLElBQU0sR0FDWCxTQUFTLG9CQUFvQjRLLEVBQVlKLENBQXdCLEVBQ2pFa0MsRUFBbUIsT0FBTzlCLENBQVUsR0FFcEM4QixFQUFtQixJQUFJOUIsRUFBWTVLLENBQUMsQ0FFekMsQ0FFR3FLLEdBQW1CLE9BQU95QyxDQUFZLEVBRWxDRyxJQUFnQmQsS0FDbkJoTSxFQUFBOE0sRUFBWSxhQUFaLE1BQUE5TSxFQUF3QixZQUFZOE0sR0FFckMsQ0FDSCxDQUFFLEVBRUQsT0FBQUUsR0FBbUIsSUFBSTNELEVBQVd3RCxDQUFPLEVBQ2xDeEQsQ0FDUixDQU1BLElBQUkyRCxHQUFxQixJQUFJLFFDblF0QixTQUFTQyxHQUFLQyxFQUFZLEdBQU8sQ0FDdkMsTUFBTWxKLEVBQWlEbkMsRUFFakRzTCxFQUFZbkosRUFBUSxFQUFFLEVBQzVCLEdBQUksQ0FBQ21KLEVBQVcsT0FFaEIsSUFBSWhFLEVBQVEsSUFBTU0sR0FBZ0J6RixFQUFRLENBQUMsRUFFM0MsR0FBSWtKLEVBQVcsQ0FDZCxJQUFJOU4sRUFBVSxFQUNWSixFQUEyQyxDQUFBLEVBRy9DLE1BQU13QixFQUFJbUIsR0FBUSxJQUFNLENBQ3ZCLElBQUl5TCxFQUFVLEdBQ2QsTUFBTWpFLEVBQVFuRixFQUFRLEVBQ3RCLFVBQVcxRCxLQUFPNkksRUFDYkEsRUFBTTdJLENBQUcsSUFBTXRCLEVBQUtzQixDQUFHLElBQzFCdEIsRUFBS3NCLENBQUcsRUFBSTZJLEVBQU03SSxDQUFHLEVBQ3JCOE0sRUFBVSxJQUdaLE9BQUlBLEdBQVNoTyxJQUNOQSxDQUNWLENBQUcsRUFFRCtKLEVBQVEsSUFBTWpKLEVBQUlNLENBQUMsQ0FDckIsQ0FHSzJNLEVBQVUsRUFBRSxRQUNmbEosR0FBZ0IsSUFBTSxDQUNyQm9KLEdBQVlySixFQUFTbUYsQ0FBSyxFQUMxQmxPLEdBQVFrUyxFQUFVLENBQUMsQ0FDdEIsQ0FBRyxFQUlGckosR0FBWSxJQUFNLENBQ2pCLE1BQU13SixFQUFNckUsR0FBUSxJQUFNa0UsRUFBVSxFQUFFLElBQUlwUyxFQUFHLENBQUMsRUFDOUMsTUFBTyxJQUFNLENBQ1osVUFBV0MsS0FBTXNTLEVBQ1osT0FBT3RTLEdBQU8sWUFDakJBLEVBQUksQ0FHTixDQUNILENBQUUsRUFHR21TLEVBQVUsRUFBRSxRQUNmckosR0FBWSxJQUFNLENBQ2pCdUosR0FBWXJKLEVBQVNtRixDQUFLLEVBQzFCbE8sR0FBUWtTLEVBQVUsQ0FBQyxDQUN0QixDQUFHLENBRUgsQ0FRQSxTQUFTRSxHQUFZckosRUFBU21GLEVBQU8sQ0FDcEMsR0FBSW5GLEVBQVEsRUFBRSxFQUNiLFVBQVd2RyxLQUFVdUcsRUFBUSxFQUFFLEVBQUc5RCxFQUFJekMsQ0FBTSxFQUc3QzBMLEVBQU8sQ0FDUixDQ3ZFTyxTQUFTb0UsR0FBZ0J2UyxFQUFJLENBQ25DLElBQUkyRSxFQUFJckMsRUFBTyxDQUFDLEVBRWhCLE9BQU8sVUFBWSxDQUNsQixPQUFJLFVBQVUsU0FBVyxHQUN4QkksRUFBSWlDLEVBQUdPLEVBQUlQLENBQUMsRUFBSSxDQUFDLEVBQ1YsVUFBVSxDQUFDLElBRWxCTyxFQUFJUCxDQUFDLEVBQ0UzRSxFQUFJLEVBRVosQ0FDRixDQ1pPLE1BQU13UyxHQUFpQixJQ1AxQixPQUFPLE9BQVcsTUFFcEIsT0FBTyxXQUFQLE9BQU8sU0FBYSxDQUFFLEVBQUcsSUFBSSxPQUFTLEVBQUUsSUFBSUEsRUFBYyxFQ0Y1RHJRLEdBQXlCLFFDS1pzUSxNQUNYLE1BQU8sRUFDUCxTQUFVLENBQ1IsS0FBTSxJQUFBLEVBQUEsNk1DUENDLEdBQUssT0FDQSxTQUFTLEtBQU8sUUFBUSxXQUc3QkMsR0FBUyxDQUNKQyxFQUFBQSxFQUFBLEVBQUEsT0FBUyxDQUFDLG9DQUlURiwwQkFDQUMsa0RBRWdCRSxHQUFBMUIsRUFBQSxrQkFBQXlCLEVBQUEsRUFBQSxTQUFTLE1BQUksRUFBQSxFQUFBLHFCQUNyQixPQUFLLEVBQUEsRUFBQSwrQkNWOUIsTUFBTWxPLEdBQVMsU0FBUyxlQUFlLEtBQUssRUFFNUMsR0FBSSxDQUFDQSxHQUNHLE1BQUEsSUFBSSxNQUFNLDJCQUEyQixFQUc3QzJNLEdBQU15QixHQUFLLENBQUUsT0FBQXBPLEdBQVEsTUFBTyxDQUFFLEdBQUdBLEdBQU8sT0FBUSxFQUFHIiwieF9nb29nbGVfaWdub3JlTGlzdCI6WzAsMSwyLDMsNCw1LDYsNyw4LDksMTAsMTEsMTIsMTMsMTQsMTUsMTYsMTcsMTgsMTksMjAsMjEsMjJdfQ==
